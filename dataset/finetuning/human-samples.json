[
  {
    "function": "package main\n\nfunc AddTwoNumbers(a, b int) int {\n\treturn a + b\n}\n"
  },
  {
    "function": "package main\n\nfunc FindMax(numbers []int) int {\n\tmax := numbers[0]\n\tfor _, num := range numbers {\n\t\tif num > max {\n\t\t\tmax = num\n\t\t}\n\t}\n\treturn max\n}\n"
  },
  {
    "function": "package main\n\nfunc CalculateFactorial(n int) int {\n\tif n <= 1 {\n\t\treturn 1\n\t}\n\treturn n * CalculateFactorial(n-1)\n}\n"
  },
  {
    "function": "package main\n\nfunc IsPalindrome(str string) bool {\n\tfor i := 0; i < len(str)/2; i++ {\n\t\tif str[i] != str[len(str)-1-i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"
  },
  {
    "function": "package main\n\nfunc ReverseString(str string) string {\n\trunes := []rune(str)\n\tfor i, j := 0, len(runes)-1; i < len(runes)/2; i, j = i+1, j-1 {\n\t\trunes[i], runes[j] = runes[j], runes[i]\n\t}\n\treturn string(runes)\n}\n"
  },
  {
    "function": "package main\n\nfunc GenerateFibonacci(n int) []int {\n\tfib := make([]int, n)\n\tfib[0], fib[1] = 0, 1\n\tfor i := 2; i < n; i++ {\n\t\tfib[i] = fib[i-1] + fib[i-2]\n\t}\n\treturn fib\n}\n"
  },
  {
    "function": "package main\n\nfunc LinearSearch(arr []int, target int) int {\n\tfor i, num := range arr {\n\t\tif num == target {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n"
  },
  {
    "function": "package main\n\nfunc BubbleSort(arr []int) {\n\tfor i := 0; i < len(arr)-1; i++ {\n\t\tfor j := 0; j < len(arr)-i-1; j++ {\n\t\t\tif arr[j] > arr[j+1] {\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\t\t\t}\n\t\t}\n\t}\n}\n"
  },
  {
    "function": "package main\n\nfunc CalculateAverage(numbers []float64) float64 {\n\tsum := 0.0\n\tfor _, num := range numbers {\n\t\tsum += num\n\t}\n\treturn sum / float64(len(numbers))\n}\n"
  },
  {
    "function": "package main\n\nfunc GetStringLength(str string) int {\n\treturn len(str)\n}\n"
  },
  {
    "function": "package main\n\nfunc CountVowels(str string) int {\n\tcount := 0\n\tvowels := []rune{'a', 'e', 'i', 'o', 'u'}\n\tfor _, char := range str {\n\t\tfor _, vowel := range vowels {\n\t\t\tif char == vowel {\n\t\t\t\tcount++\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n"
  },
  {
    "function": "package main\n\nfunc RemoveDuplicates(arr []int) []int {\n\tresult := []int{}\n\tvisited := map[int]bool{}\n\tfor _, num := range arr {\n\t\tif !visited[num] {\n\t\t\tvisited[num] = true\n\t\t\tresult = append(result, num)\n\t\t}\n\t}\n\treturn result\n}\n"
  },  
  {
    "function": "package main\n\nfunc ConvertToUpperCase(str string) string {\n\treturn strings.ToUpper(str)\n}\n"
  },
  {
    "function": "package main\n\nfunc GetUniqueValues(arr []int) []int {\n\tunique := make(map[int]bool)\n\tresult := []int{}\n\tfor _, num := range arr {\n\t\tif !unique[num] {\n\t\t\tunique[num] = true\n\t\t\tresult = append(result, num)\n\t\t}\n\t}\n\treturn result\n}\n"
  },
  {
    "function": "package main\n\nfunc SplitString(str, sep string) []string {\n\treturn strings.Split(str, sep)\n}\n"
  },
  {
    "function": "package main\n\nfunc CountOccurrences(arr []int, target int) int {\n\tcount := 0\n\tfor _, num := range arr {\n\t\tif num == target {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n"
  },
  {
    "function": "package main\n\nfunc IsPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"
  },
  {
    "function": "package main\n\nfunc CalculatePower(base, exponent int) int {\n\tresult := 1\n\tfor i := 0; i < exponent; i++ {\n\t\tresult *= base\n\t}\n\treturn result\n}\n"
  },
  {
    "function": "package main\n\nfunc RemoveWhitespace(str string) string {\n\treturn strings.ReplaceAll(str, \" \", \"\")\n}\n"
  },
  {
    "function": "package main\n\nfunc CheckAnagram(str1, str2 string) bool {\n\tcount := make(map[rune]int)\n\tfor _, char := range str1 {\n\t\tcount[char]++\n\t}\n\tfor _, char := range str2 {\n\t\tcount[char]--\n\t}\n\tfor _, val := range count {\n\t\tif val != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"
  },
  {
    "function": "package main\n\nfunc ReverseLinkedList(head *ListNode) *ListNode {\n\tvar prev *ListNode\n\tcurr := head\n\tfor curr != nil {\n\t\tnext := curr.Next\n\t\tcurr.Next = prev\n\t\tprev = curr\n\t\tcurr = next\n\t}\n\treturn prev\n}\n"
  },
  {
    "function": "package main\n\nfunc FindMedian(arr []int) float64 {\n\tsorted := make([]int, len(arr))\n\tcopy(sorted, arr)\n\tsort.Ints(sorted)\n\tmid := len(sorted) / 2\n\tif len(sorted)%2 == 0 {\n\t\treturn float64(sorted[mid-1]+sorted[mid]) / 2.0\n\t} else {\n\t\treturn float64(sorted[mid])\n\t}\n}\n"
  },
  {
    "function": "package main\n\nfunc CheckPalindromeLinkedList(head *ListNode) bool {\n\tfast := head\n\tslow := head\n\tstack := []int{}\n\tfor fast != nil && fast.Next != nil {\n\t\tstack = append(stack, slow.Val)\n\t\tslow = slow.Next\n\t\tfast = fast.Next.Next\n\t}\n\tif fast != nil {\n\t\tslow = slow.Next\n\t}\n\tfor slow != nil {\n\t\ttop := len(stack) - 1\n\t\tif slow.Val != stack[top] {\n\t\t\treturn false\n\t\t}\n\t\tslow = slow.Next\n\t\tstack = stack[:top]\n\t}\n\treturn true\n}\n"
  },
    {
      "function": "// Calculate the sum of two numbers\nfunc Add(a, b int) int {\n\treturn a + b\n}\n"
    },
    {
      "function": "// Check if a given number is even\nfunc IsEven(num int) bool {\n\treturn num%2 == 0\n}\n"
    },
    {
      "function": "// Calculate the factorial of a number\nfunc Factorial(n int) int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n * Factorial(n-1)\n}\n"
    },
    {
      "function": "// Check if a string is a palindrome\nfunc IsPalindrome(str string) bool {\n\tfor i := 0; i < len(str)/2; i++ {\n\t\tif str[i] != str[len(str)-1-i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"
    },
    {
      "function": "// Find the maximum element in an array\nfunc FindMax(arr []int) int {\n\tmax := arr[0]\n\tfor i := 1; i < len(arr); i++ {\n\t\tif arr[i] > max {\n\t\t\tmax = arr[i]\n\t\t}\n\t}\n\treturn max\n}\n"
    },
    {
      "function": "// Reverse a string\nfunc ReverseString(str string) string {\n\trunes := []rune(str)\n\tfor i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n\t\trunes[i], runes[j] = runes[j], runes[i]\n\t}\n\treturn string(runes)\n}\n"
    },
    {
      "function": "// Check if a number is prime\nfunc IsPrime(num int) bool {\n\tif num <= 1 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= num; i++ {\n\t\tif num%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"
    },
    {
      "function": "// Count the number of vowels in a string\nfunc CountVowels(str string) int {\n\tcount := 0\n\tvowels := \"aeiou\"\n\tfor _, char := range str {\n\t\tif strings.ContainsRune(vowels, char) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n"
    },
    {
      "function": "// Calculate the average of a slice of numbers\nfunc CalculateAverage(numbers []float64) float64 {\n\tsum := 0.0\n\tfor _, num := range numbers {\n\t\tsum += num\n\t}\n\treturn sum / float64(len(numbers))\n}\n"
    },
    {
      "function": "// Check if a string contains a specific substring\nfunc ContainsSubstring(str, substr string) bool {\n\treturn strings.Contains(str, substr)\n}\n"
    },
    {
      "function": "// Convert a string to uppercase\nfunc ToUpperCase(str string) string {\n\treturn strings.ToUpper(str)\n}\n"
    },
    {
      "function": "// Get the length of a string\nfunc StringLength(str string) int {\n\treturn len(str)\n}\n"
    },
    {
      "function": "// Check if two strings are anagrams\nfunc IsAnagram(str1, str2 string) bool {\n\tcount := make(map[rune]int)\n\tfor _, char := range str1 {\n\t\tcount[char]++\n\t}\n\tfor _, char := range str2 {\n\t\tcount[char]--\n\t}\n\tfor _, val := range count {\n\t\tif val != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"
    },
    {
      "function": "// Remove duplicates from an array\nfunc RemoveDuplicates(arr []int) []int {\n\tresult := []int{}\n\tseen := make(map[int]bool)\n\tfor _, num := range arr {\n\t\tif !seen[num] {\n\t\t\tseen[num] = true\n\t\t\tresult = append(result, num)\n\t\t}\n\t}\n\treturn result\n}\n"
    },
    {
      "function": "// Sort an array of integers in ascending order\nfunc SortIntegers(arr []int) {\n\tsort.Ints(arr)\n}\n"
    },
    {
      "function": "// Check if a number is a perfect square\nfunc IsPerfectSquare(num int) bool {\n\tsqrt := int(math.Sqrt(float64(num)))\n\treturn sqrt*sqrt == num\n}\n"
    },
    {
      "function": "// Find the minimum element in an array\nfunc FindMin(arr []int) int {\n\tmin := arr[0]\n\tfor i := 1; i < len(arr); i++ {\n\t\tif arr[i] < min {\n\t\t\tmin = arr[i]\n\t\t}\n\t}\n\treturn min\n}\n"
    },
    {
      "function": "// Concatenate two strings\nfunc ConcatenateStrings(str1, str2 string) string {\n\treturn str1 + str2\n}\n"
    },
    {
      "function": "// Calculate the power of a number\nfunc Power(base, exponent int) int {\n\tresult := 1\n\tfor i := 0; i < exponent; i++ {\n\t\tresult *= base\n\t}\n\treturn result\n}\n"
    },
    {
      "function": "// Check if a number is positive\nfunc IsPositive(num int) bool {\n\treturn num > 0\n}\n"
    },
    {
      "function": "// Check if a string is empty\nfunc IsEmptyString(str string) bool {\n\treturn len(str) == 0\n}\n"
    },
    {
      "function": "// Calculate the sum of all elements in an array\nfunc CalculateSum(arr []int) int {\n\tsum := 0\n\tfor _, num := range arr {\n\t\tsum += num\n\t}\n\treturn sum\n}\n"
    },
    {
      "function": "// Reverse the order of elements in an array\nfunc ReverseArray(arr []int) {\n\tfor i, j := 0, len(arr)-1; i < j; i, j = i+1, j-1 {\n\t\tarr[i], arr[j] = arr[j], arr[i]\n\t}\n}\n"
    },
    {
      "function": "// Check if a string starts with a specific prefix\nfunc StartsWith(str, prefix string) bool {\n\treturn strings.HasPrefix(str, prefix)\n}\n"
    },
    {
      "function": "// Find the index of a target value in an array\nfunc FindIndex(arr []int, target int) int {\n\tfor i, num := range arr {\n\t\tif num == target {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n"
    },
    {
      "function": "// Check if a number is negative\nfunc IsNegative(num int) bool {\n\treturn num < 0\n}\n"
    },
    {
      "function": "// Calculate the product of all elements in an array\nfunc CalculateProduct(arr []int) int {\n\tproduct := 1\n\tfor _, num := range arr {\n\t\tproduct *= num\n\t}\n\treturn product\n}\n"
    },
    {
      "function": "// Find the index of the first occurrence of a substring in a string\nfunc FindSubstringIndex(str, substr string) int {\n\treturn strings.Index(str, substr)\n}\n"
    },
    {
      "function": "// Check if a string ends with a specific suffix\nfunc EndsWith(str, suffix string) bool {\n\treturn strings.HasSuffix(str, suffix)\n}\n"
    },
    {
      "function": "// Check if a string is alphanumeric\nfunc IsAlphanumeric(str string) bool {\n\treturn regexp.MustCompile(`^[a-zA-Z0-9]+$`).MatchString(str)\n}\n"
    },
    {
      "function": "// Find the maximum element in a matrix\nfunc FindMaxInMatrix(matrix [][]int) int {\n\tmax := matrix[0][0]\n\tfor _, row := range matrix {\n\t\tfor _, num := range row {\n\t\t\tif num > max {\n\t\t\t\tmax = num\n\t\t\t}\n\t\t}\n\t}\n\treturn max\n}\n"
    },
    {
      "function": "// Check if a number is zero\nfunc IsZero(num int) bool {\n\treturn num == 0\n}\n"
    },
    {
      "function": "// Find the index of the last occurrence of a substring in a string\nfunc FindLastSubstringIndex(str, substr string) int {\n\treturn strings.LastIndex(str, substr)\n}\n"
    },
    {
      "function": "// Swap two numbers\nfunc SwapNumbers(a, b *int) {\n\t*a, *b = *b, *a\n}\n"
    },
    {
      "function": "// Check if a string is lowercase\nfunc IsLowercase(str string) bool {\n\treturn str == strings.ToLower(str)\n}\n"
    },
    {
      "function": "// Convert a string to lowercase\nfunc ToLowercase(str string) string {\n\treturn strings.ToLower(str)\n}\n"
    },
    {
      "function": "// Check if a string is uppercase\nfunc IsUppercase(str string) bool {\n\treturn str == strings.ToUpper(str)\n}\n"
    },
    {
      "function": "// Convert a string to uppercase\nfunc ToUppercase(str string) string {\n\treturn strings.ToUpper(str)\n}\n"
    },
    {
      "function": "// Check if a number is between a given range\nfunc IsInRange(num, min, max int) bool {\n\treturn num >= min && num <= max\n}\n"
    },
  {
    "function": "// Send a GET request to the specified URL\nfunc Get(url string) (*http.Response, error) {\n\tresponse, err := http.Get(url)\n\treturn response, err\n}\n"
  },
  {
    "function": "// Send a POST request to the specified URL with a JSON payload\nfunc Post(url string, payload []byte) (*http.Response, error) {\n\treturn http.Post(url, \"application/json\", bytes.NewBuffer(payload))\n}\n"
  },
  {
    "function": "// Send a PUT request to the specified URL with a JSON payload\nfunc Put(url string, payload []byte) (*http.Response, error) {\n\trequest, _ := http.NewRequest(\"PUT\", url, bytes.NewBuffer(payload))\n\treturn http.DefaultClient.Do(request)\n}\n"
  },
  {
    "function": "// Send a DELETE request to the specified URL\nfunc Delete(url string) (*http.Response, error) {\n\trequest, _ := http.NewRequest(\"DELETE\", url, nil)\n\treturn http.DefaultClient.Do(request)\n}\n"
  },
  {
    "function": "// Send a PATCH request to the specified URL with a JSON payload\nfunc Patch(url string, payload []byte) (*http.Response, error) {\n\trequest, _ := http.NewRequest(\"PATCH\", url, bytes.NewBuffer(payload))\n\treturn http.DefaultClient.Do(request)\n}\n"
  },
  {
    "function": "// Read the response body as a string\nfunc ReadBody(response *http.Response) (string, error) {\n\tbody, err := ioutil.ReadAll(response.Body)\n\treturn string(body), err\n}\n"
  },
  {
    "function": "// Get the value of a specific header from the response\nfunc GetHeader(response *http.Response, header string) string {\n\treturn response.Header.Get(header)\n}\n"
  },
  {
    "function": "// Read the request body as a string\nfunc ReadRequestBody(request *http.Request) (string, error) {\n\tbody, err := ioutil.ReadAll(request.Body)\n\treturn string(body), err\n}\n"
  },
  {
    "function": "// Set a request header with the specified key and value\nfunc SetHeader(request *http.Request, key, value string) {\n\trequest.Header.Set(key, value)\n}\n"
  },
  {
    "function": "// Check if the request is of GET method\nfunc IsGetRequest(request *http.Request) bool {\n\treturn request.Method == http.MethodGet\n}\n"
  },
  {
    "function": "// Check if the response status code indicates success\nfunc IsSuccessStatusCode(response *http.Response) bool {\n\treturn response.StatusCode >= 200 && response.StatusCode < 300\n}\n"
  },
  {
    "function": "// Get the query parameters from the request URL\nfunc GetQueryParameters(request *http.Request) url.Values {\n\treturn request.URL.Query()\n}\n"
  },
  {
    "function": "// Encode a value as URL query parameter\nfunc EncodeQueryParam(value string) string {\n\treturn url.QueryEscape(value)\n}\n"
  },
  {
    "function": "// Set a query parameter with the specified key and value in the request URL\nfunc SetQueryParam(request *http.Request, key, value string) {\n\tquery := request.URL.Query()\n\tquery.Set(key, value)\n\trequest.URL.RawQuery = query.Encode()\n}\n"
  },
  {
    "function": "// Send a request with custom headers\nfunc SendRequestWithHeaders(method, url string, headers map[string]string, body io.Reader) (*http.Response, error) {\n\trequest, _ := http.NewRequest(method, url, body)\n\tfor key, value := range headers {\n\t\trequest.Header.Set(key, value)\n\t}\n\treturn http.DefaultClient.Do(request)\n}\n"
  },
  {
    "function": "// Set a cookie in the response\nfunc SetCookie(response http.ResponseWriter, name, value string) {\n\thttp.SetCookie(response, &http.Cookie{Name: name, Value: value})\n}\n"
  },
  {
    "function": "// Get the value of a specific cookie from the request\nfunc GetCookie(request *http.Request, name string) (string, error) {\n\tcookie, err := request.Cookie(name)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn cookie.Value, nil\n}\n"
  },
  {
    "function": "// Redirect the request to the specified URL\nfunc Redirect(response http.ResponseWriter, request *http.Request, url string) {\n\thttp.Redirect(response, request, url, http.StatusFound)\n}\n"
  },
  {
    "function": "// Serve a file as the response\nfunc ServeFile(response http.ResponseWriter, request *http.Request, path string) {\n\thttp.ServeFile(response, request, path)\n}\n"
  },
  {
    "function": "// Set a response status code\nfunc SetStatusCode(response http.ResponseWriter, statusCode int) {\n\tresponse.WriteHeader(statusCode)\n}\n"
  },
  {
    "function": "// Create a new HTTP client\nfunc NewClient() *http.Client {\n\treturn &http.Client{}\n}\n"
  },
  {
    "function": "// Enable TLS configuration for the client\nfunc EnableTLS(client *http.Client) {\n\tclient.Transport = &http.Transport{\n\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t}\n}\n"
  },
  {
    "function": "// Create a new HTTP request with the specified method, URL, and body\nfunc NewRequest(method, url string, body io.Reader) (*http.Request, error) {\n\treturn http.NewRequest(method, url, body)\n}\n"
  },
  {
    "function": "// Add basic authentication to the request\nfunc AddBasicAuth(request *http.Request, username, password string) {\n\trequest.SetBasicAuth(username, password)\n}\n"
  },
  {
    "function": "// Add a query parameter to the request URL\nfunc AddQueryParameter(request *http.Request, key, value string) {\n\tquery := request.URL.Query()\n\tquery.Add(key, value)\n\trequest.URL.RawQuery = query.Encode()\n}\n"
  },
  {
    "function": "// Set the request body as JSON\nfunc SetJSONBody(request *http.Request, payload interface{}) error {\n\tdata, err := json.Marshal(payload)\n\tif err != nil {\n\t\treturn err\n\t}\n\trequest.Header.Set(\"Content-Type\", \"application/json\")\n\trequest.Body = ioutil.NopCloser(bytes.NewBuffer(data))\n\treturn nil\n}\n"
  },
  {
    "function": "// Get the remote IP address from the request\nfunc GetRemoteIP(request *http.Request) string {\n\tip, _, _ := net.SplitHostPort(request.RemoteAddr)\n\treturn ip\n}\n"
  },
  {
    "function": "// Parse and handle form data from the request\nfunc ParseFormData(request *http.Request) error {\n\tif err := request.ParseForm(); err != nil {\n\t\treturn err\n\t}\n\t// Access form data using request.Form\n\treturn nil\n}\n"
  },
  {
    "function": "// Stream the response from a GET request\nfunc StreamGet(url string) (*http.Response, error) {\n\trequest, _ := http.NewRequest(\"GET\", url, nil)\n\trequest.Header.Set(\"Accept\", \"application/octet-stream\")\n\treturn http.DefaultClient.Do(request)\n}\n"
  },
  {
    "function": "// Read the response body as JSON into a struct\nfunc ReadJSON(response *http.Response, data interface{}) error {\n\treturn json.NewDecoder(response.Body).Decode(data)\n}\n"
  },
  {
    "function": "// Enable gzip compression for the response\nfunc EnableGzipCompression(response http.ResponseWriter) {\n\tresponse.Header().Set(\"Content-Encoding\", \"gzip\")\n\tresponse.Header().Set(\"Vary\", \"Accept-Encoding\")\n\tresponseWriter := gzip.NewWriter(response)\n\tdefer responseWriter.Close()\n\t// Write response data to responseWriter\n}\n"
  },
  {
    "function": "// Enable CORS (Cross-Origin Resource Sharing) for the response\nfunc EnableCORS(response http.ResponseWriter) {\n\tresponse.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\tresponse.Header().Set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\")\n\tresponse.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type\")\n}\n"
  },
  {
    "function": "// Set a response header with the specified key and value\nfunc SetResponseHeader(response http.ResponseWriter, key, value string) {\n\tresponse.Header().Set(key, value)\n}\n"
  },
  {
    "function": "// Enable secure HTTPS server with TLS certificate and key\nfunc EnableTLS(server *http.Server, certFile, keyFile string) error {\n\treturn server.ListenAndServeTLS(certFile, keyFile)\n}\n"
  },
  {
    "function": "// Create and start an HTTP server with the specified handler\nfunc StartServer(addr string, handler http.Handler) error {\n\treturn http.ListenAndServe(addr, handler)\n}\n"
  },
  {
    "function": "// Enable basic authentication for the HTTP server\nfunc EnableBasicAuth(handler http.Handler, username, password string) http.Handler {\n\treturn http.HandlerFunc(func(response http.ResponseWriter, request *http.Request) {\n\t\tuser, pass, _ := request.BasicAuth()\n\t\tif user != username || pass != password {\n\t\t\tresponse.Header().Set(\"WWW-Authenticate\", \"Basic realm=\\\"Restricted\\\"\")\n\t\t\tresponse.WriteHeader(http.StatusUnauthorized)\n\t\t\tresponse.Write([]byte(\"Unauthorized\"))\n\t\t\treturn\n\t\t}\n\t\thandler.ServeHTTP(response, request)\n\t})\n}\n"
  },
  {
    "function": "// Serve static files from a specified directory\nfunc ServeStaticFiles(directory string) http.Handler {\n\treturn http.FileServer(http.Dir(directory))\n}\n"
  },
  {
    "function": "// Handle HTTP OPTIONS method for CORS preflight requests\nfunc HandleOptionsMethod(response http.ResponseWriter, request *http.Request) {\n\tresponse.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\tresponse.Header().Set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\")\n\tresponse.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type\")\n}\n"
  },
  {
    "function": "// Create a new HTTP server with the specified address and handler\nfunc NewServer(addr string, handler http.Handler) *http.Server {\n\treturn &http.Server{\n\t\tAddr:    addr,\n\t\tHandler: handler,\n\t}\n}\n"
  },
  {
    "function": "// Create a new HTTP redirect handler\nfunc NewRedirectHandler(url string, code int) http.Handler {\n\treturn http.RedirectHandler(url, code)\n}\n"
  },
  {
    "function": "// Create a new HTTP file server handler for serving static files\nfunc NewFileServer(directory string) http.Handler {\n\treturn http.FileServer(http.Dir(directory))\n}\n"
  },
  {
    "function": "// Create a new HTTP multiplexer (router)\nfunc NewMux() *http.ServeMux {\n\treturn http.NewServeMux()\n}\n"
  },
  {
    "function": "// Add a handler function for the specified route pattern\nfunc HandleFunc(mux *http.ServeMux, pattern string, handlerFunc http.HandlerFunc) {\n\tmux.HandleFunc(pattern, handlerFunc)\n}\n"
  },
  {
    "function": "// Handle HTTP OPTIONS method for CORS preflight requests with allowed headers\nfunc HandleOptionsMethodWithAllowedHeaders(response http.ResponseWriter, request *http.Request, allowedHeaders []string) {\n\tresponse.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\tresponse.Header().Set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\")\n\tresponse.Header().Set(\"Access-Control-Allow-Headers\", strings.Join(allowedHeaders, \", \"))\n}\n"
  },
  {
    "function": "// Set a custom timeout for the HTTP client\nfunc SetTimeout(client *http.Client, timeout time.Duration) {\n\tclient.Timeout = timeout\n}\n"
  },
  {
    "function": "// Enable HTTP/2 support for the server\nfunc EnableHTTP2(server *http.Server) {\n\thttp2.ConfigureServer(server, &http2.Server{})\n}\n"
  },
  {
    "function": "// Serve an HTTP handler with graceful shutdown support\nfunc ServeWithGracefulShutdown(server *http.Server, idleTimeout, shutdownTimeout time.Duration) error {\n\tidleConnsClosed := make(chan struct{})\n\n\tgo func() {\n\t\tquit := make(chan os.Signal, 1)\n\t\tsignal.Notify(quit, os.Interrupt, syscall.SIGTERM)\n\t\t<-quit\n\n\t\tctx, cancel := context.WithTimeout(context.Background(), shutdownTimeout)\n\t\tdefer cancel()\n\n\t\tif err := server.Shutdown(ctx); err != nil {\n\t\t\tfmt.Println(\"Server shutdown error: \", err)\n\t\t}\n\n\t\tclose(idleConnsClosed)\n\t}()\n\n\tif err := server.ListenAndServe(); err != http.ErrServerClosed {\n\t\treturn err\n\t}\n\n\t<-idleConnsClosed\n\treturn nil\n}\n"
  },
  {
    "function": "// Enable automatic HTTP to HTTPS redirection for the server\nfunc EnableHTTPtoHTTPSRedirection(server *http.Server, httpsPort string) {\n\tserver.Handler = http.HandlerFunc(func(response http.ResponseWriter, request *http.Request) {\n\t\tredirectURL := \"https://\" + request.Host + \":\" + httpsPort + request.URL.String()\n\t\thttp.Redirect(response, request, redirectURL, http.StatusMovedPermanently)\n\t})\n}\n"
  },
  {
    "function": "// Serve an HTTP handler with automatic TLS certificate generation and renewal\nfunc ServeWithAutoTLS(server *http.Server, domain, cacheDir string) error {\n\tautoManager := autocert.Manager{\n\t\tPrompt:     autocert.AcceptTOS,\n\t\tHostPolicy: autocert.HostWhitelist(domain),\n\t\tCache:      autocert.DirCache(cacheDir),\n\t}\n\n\tserver.TLSConfig = &tls.Config{\n\t\tGetCertificate: autoManager.GetCertificate,\n\t}\n\n\tsrv := &http.Server{\n\t\tAddr:      \":443\",\n\t\tHandler:   server.Handler,\n\t\tTLSConfig: server.TLSConfig,\n\t}\n\n\treturn srv.ListenAndServeTLS(\"\", \"\")\n}\n"
  },
  {
    "function": "// Enable rate limiting for HTTP requests\nfunc EnableRateLimiting(handler http.Handler, requestsPerSecond int) http.Handler {\n\tlimiter := rate.NewLimiter(rate.Limit(requestsPerSecond), requestsPerSecond)\n\treturn http.HandlerFunc(func(response http.ResponseWriter, request *http.Request) {\n\t\tif !limiter.Allow() {\n\t\t\tresponse.WriteHeader(http.StatusTooManyRequests)\n\t\t\tresponse.Write([]byte(\"Too many requests\"))\n\t\t\treturn\n\t\t}\n\t\thandler.ServeHTTP(response, request)\n\t})\n}\n"
  },
  {
    "function": "// Enable HTTP basic authentication for the server\nfunc EnableHTTPBasicAuth(handler http.Handler, username, password string) http.Handler {\n\treturn auth.BasicAuth(username, password)(handler)\n}\n"
  },
  {
    "function": "// Enable request logging for the server\nfunc EnableRequestLogging(handler http.Handler) http.Handler {\n\treturn handlers.LoggingHandler(os.Stdout, handler)\n}\n"
  },
  {
    "function": "// Enable Gzip compression for the server\nfunc EnableGzipCompression(handler http.Handler) http.Handler {\n\treturn handlers.CompressHandler(handler)\n}\n"
  },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc SendRequest() {\n\tclient := &http.Client{}\n\trequest, _ := http.NewRequest(\"GET\", \"https://example.com\", nil)\n\tresponse, _ := client.Do(request)\n\tdefer response.Body.Close()\n\n\t// Handle the response\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc ReadResponseBody() {\n\tresponse, _ := http.Get(\"https://example.com\")\n\tdefer response.Body.Close()\n\n\tbody, _ := ioutil.ReadAll(response.Body)\n\tfmt.Println(string(body))\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc SetRequestHeaders() {\n\tclient := &http.Client{}\n\trequest, _ := http.NewRequest(\"GET\", \"https://example.com\", nil)\n\n\trequest.Header.Set(\"Content-Type\", \"application/json\")\n\trequest.Header.Set(\"Authorization\", \"Bearer TOKEN\")\n\n\tresponse, _ := client.Do(request)\n\tdefer response.Body.Close()\n\n\t// Handle the response\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"encoding/json\"\n)\n\nfunc SendJSONRequest() {\n\tclient := &http.Client{}\n\tdata := map[string]interface{}{\n\t\t\"name\": \"John Doe\",\n\t\t\"age\": 30,\n\t}\n\n\tjsonData, _ := json.Marshal(data)\n\n\trequest, _ := http.NewRequest(\"POST\", \"https://example.com\", bytes.NewBuffer(jsonData))\n\trequest.Header.Set(\"Content-Type\", \"application/json\")\n\n\tresponse, _ := client.Do(request)\n\tdefer response.Body.Close()\n\n\t// Handle the response\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc SendFormData() {\n\tclient := &http.Client{}\n\trequest, _ := http.NewRequest(\"POST\", \"https://example.com\", nil)\n\n\tdata := url.Values{}\n\tdata.Set(\"name\", \"John Doe\")\n\tdata.Set(\"age\", \"30\")\n\n\trequest.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\trequest.Body = ioutil.NopCloser(strings.NewReader(data.Encode()))\n\n\tresponse, _ := client.Do(request)\n\tdefer response.Body.Close()\n\n\t// Handle the response\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc DownloadFile() {\n\tresponse, _ := http.Get(\"https://example.com/file.txt\")\n\tdefer response.Body.Close()\n\n\tfile, _ := os.Create(\"file.txt\")\n\tdefer file.Close()\n\n\tio.Copy(file, response.Body)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"encoding/base64\"\n)\n\nfunc SendBasicAuthRequest() {\n\tclient := &http.Client{}\n\trequest, _ := http.NewRequest(\"GET\", \"https://example.com\", nil)\n\n\tusername := \"user\"\n\tpassword := \"pass\"\n\tauth := username + \":\" + password\n\tencodedAuth := base64.StdEncoding.EncodeToString([]byte(auth))\n\n\trequest.Header.Set(\"Authorization\", \"Basic \"+encodedAuth)\n\n\tresponse, _ := client.Do(request)\n\tdefer response.Body.Close()\n\n\t// Handle the response\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc RedirectRequest() {\n\thttp.HandleFunc(\"/old\", func(w http.ResponseWriter, r *http.Request) {\n\t\thttp.Redirect(w, r, \"/new\", http.StatusMovedPermanently)\n\t})\n\n\thttp.HandleFunc(\"/new\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Welcome to the new page!\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc ServeStaticFiles() {\n\thttp.Handle(\"/static/\", http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static\"))))\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"log\"\n)\n\nfunc LogRequests() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tlog.Printf(\"[%s] %s %s\", r.Method, r.URL.Path, r.RemoteAddr)\n\n\t\tfmt.Fprintf(w, \"Hello, World!\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc EnableCORS() {\n\thttp.HandleFunc(\"/api\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\t\tw.Header().Set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\")\n\t\tw.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type\")\n\n\t\tfmt.Fprintf(w, \"API response\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc ServeHTTPS() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, HTTPS!\")\n\t})\n\n\thttp.ListenAndServeTLS(\":443\", \"cert.pem\", \"key.pem\", nil)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc EnableTLS() {\n\tserver := &http.Server{\n\t\tAddr:    \":8080\",\n\t\tHandler: nil, // Set your handler here\n\t\tTLSConfig: &tls.Config{\n\t\t\tMinVersion:               tls.VersionTLS13,\n\t\t\tCurvePreferences:         []tls.CurveID{tls.CurveP521, tls.CurveP384, tls.CurveP256},\n\t\t\tPreferServerCipherSuites: true,\n\t\t\tCipherSuites: []uint16{\n\t\t\t\ttls.TLS_AES_256_GCM_SHA384,\n\t\t\t\ttls.TLS_AES_128_GCM_SHA256,\n\t\t\t\ttls.TLS_CHACHA20_POLY1305_SHA256,\n\t\t\t},\n\t\t},\n\t}\n\n\tserver.ListenAndServeTLS(\"cert.pem\", \"key.pem\")\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"html/template\"\n)\n\nfunc RenderTemplate() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\ttemplateData := struct {\n\t\t\tTitle   string\n\t\t\tMessage string\n\t\t}{\n\t\t\tTitle:   \"Welcome\",\n\t\t\tMessage: \"Hello, World!\",\n\t\t}\n\n\t\tt, _ := template.ParseFiles(\"template.html\")\n\t\tt.Execute(w, templateData)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"log\"\n)\n\nfunc LogRequestsWithMiddleware() {\n\tlogger := func(next http.Handler) http.Handler {\n\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tlog.Printf(\"[%s] %s %s\", r.Method, r.URL.Path, r.RemoteAddr)\n\t\t\tnext.ServeHTTP(w, r)\n\t\t})\n\t}\n\n\thttp.Handle(\"/\", logger(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, World!\")\n\t})))\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc ServeWebSocket() {\n\thttp.HandleFunc(\"/ws\", func(w http.ResponseWriter, r *http.Request) {\n\t\tconn, _ := websocket.Upgrade(w, r, nil, 1024, 1024)\n\t\tdefer conn.Close()\n\n\t\tfor {\n\t\t\tmessageType, message, _ := conn.ReadMessage()\n\t\t\tfmt.Println(string(message))\n\n\t\t\t// Handle the received message\n\n\t\t\tconn.WriteMessage(messageType, []byte(\"Received\"))\n\t\t}\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\nfunc UseGorillaMux() {\n\trouter := mux.NewRouter()\n\n\trouter.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, Gorilla Mux!\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", router)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/go-chi/chi\"\n)\n\nfunc UseChi() {\n\trouter := chi.NewRouter()\n\n\trouter.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, Chi!\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", router)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc UseGin() {\n\trouter := gin.Default()\n\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"Hello, Gin!\")\n\t})\n\n\trouter.Run(\":8080\")\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\nfunc UseEcho() {\n\te := echo.New()\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, Echo!\")\n\t})\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.Start(\":8080\")\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/valyala/fasthttp\"\n)\n\nfunc UseFastHTTP() {\n\thandler := func(ctx *fasthttp.RequestCtx) {\n\t\tfmt.Fprintf(ctx, \"Hello, FastHTTP!\")\n\t}\n\n\tfasthttp.ListenAndServe(\":8080\", handler)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/justinas/alice\"\n)\n\nfunc UseAlice() {\n\thandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, Alice!\")\n\t})\n\n\tchain := alice.New(\n\t\tmiddleware1,\n\t\tmiddleware2,\n\t\tmiddleware3,\n\t).Then(handler)\n\n\thttp.ListenAndServe(\":8080\", chain)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/rs/cors\"\n)\n\nfunc UseCors() {\n\thandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, CORS!\")\n\t})\n\n\tcorsHandler := cors.Default().Handler(handler)\n\n\thttp.ListenAndServe(\":8080\", corsHandler)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/urfave/negroni\"\n)\n\nfunc UseNegroni() {\n\thandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, Negroni!\")\n\t})\n\n\tn := negroni.Classic()\n\tn.Use(negroni.HandlerFunc(middleware1))\n\tn.Use(negroni.HandlerFunc(middleware2))\n\tn.Use(negroni.HandlerFunc(middleware3))\n\tn.UseHandler(handler)\n\n\thttp.ListenAndServe(\":8080\", n)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"golang.org/x/net/http2\"\n)\n\nfunc EnableHTTP2() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, HTTP/2!\")\n\t})\n\n\thttp2.ConfigureServer(http.DefaultServer, &http2.Server{})\n\thttp.ListenAndServeTLS(\":8080\", \"cert.pem\", \"key.pem\", nil)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/nbari/violetear\"\n)\n\nfunc UseVioletear() {\n\trouter := violetear.New()\n\n\trouter.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, Violetear!\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", router)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/soheilhy/cmux\"\n)\n\nfunc UseCMux() {\n\tlistener, _ := net.Listen(\"tcp\", \":8080\")\n\n\tm := cmux.New(listener)\n\n\thttpL := m.Match(cmux.HTTP1Fast())\n\thttpS := m.Match(cmux.Any())\n\n\thttpHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, CMux!\")\n\t})\n\n\tgo http.Serve(httpL, httpHandler)\n\tgo http.ServeTLS(httpS, httpHandler, \"cert.pem\", \"key.pem\")\n\n\tm.Serve()\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/gobuffalo/packr/v2\"\n)\n\nfunc ServeStaticFilesUsingPackr() {\n\tbox := packr.New(\"static\", \"./static\")\n\n\thttp.Handle(\"/static/\", http.StripPrefix(\"/static/\", http.FileServer(box)))\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/gobuffalo/packr/v2\"\n)\n\nfunc UseGzipCompression() {\n\thandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, Gzip!\")\n\t})\n\n\tpackrHandler := packr.GzipHandler(handler)\n\n\thttp.ListenAndServe(\":8080\", packrHandler)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/gorilla/handlers\"\n)\n\nfunc UseHandlers() {\n\thandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, Handlers!\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", handlers.LoggingHandler(os.Stdout, handler))\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/gorilla/handlers\"\n)\n\nfunc EnableCORSWithHandlers() {\n\thandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, CORS with Handlers!\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", handlers.CORS(\n\t\thandlers.AllowedOrigins([]string{\"*\"}),\n\t\thandlers.AllowedMethods([]string{\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"}),\n\t\thandlers.AllowedHeaders([]string{\"Content-Type\"}),\n\t)(handler))\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/go-zoo/bone\"\n)\n\nfunc UseBone() {\n\trouter := bone.New()\n\n\trouter.Get(\"/\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, Bone!\")\n\t}))\n\n\thttp.ListenAndServe(\":8080\", router)\n}\n"
    },
    {
      "function": "package main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\n\t_ \"github.com/lib/pq\"\n)\n\nfunc main() {\n\tdb, err := sql.Open(\"postgres\", \"postgres://username:password@localhost/mydb?sslmode=disable\")\n\tif err != nil {\n\t\tfmt.Println(\"Failed to connect to the database:\", err)\n\t\treturn\n\t}\n\tdefer db.Close()\n\n\t// Perform database operations here\n\t// ...\n}\n"
    },
    {
      "function": "func insertUser(db *sql.DB, id int, name string) error {\n\tstmt, err := db.Prepare(\"INSERT INTO users (id, name) VALUES ($1, $2)\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer stmt.Close()\n\n\t_, err = stmt.Exec(id, name)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
    },
    {
      "function": "func getUserByID(db *sql.DB, id int) (string, error) {\n\tstmt, err := db.Prepare(\"SELECT name FROM users WHERE id = $1\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer stmt.Close()\n\n\tvar name string\n\terr = stmt.QueryRow(id).Scan(&name)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn name, nil\n}\n"
    },
    {
      "function": "func updateUser(db *sql.DB, id int, newName string) error {\n\tstmt, err := db.Prepare(\"UPDATE users SET name = $1 WHERE id = $2\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer stmt.Close()\n\n\t_, err = stmt.Exec(newName, id)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
    },
    {
      "function": "func deleteUser(db *sql.DB, id int) error {\n\tstmt, err := db.Prepare(\"DELETE FROM users WHERE id = $1\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer stmt.Close()\n\n\t_, err = stmt.Exec(id)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
    },
    {
      "function": "func getAllUsers(db *sql.DB) ([]User, error) {\n\trows, err := db.Query(\"SELECT id, name FROM users\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\n\tvar users []User\n\tfor rows.Next() {\n\t\tvar user User\n\t\terr := rows.Scan(&user.ID, &user.Name)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tusers = append(users, user)\n\t}\n\n\treturn users, nil\n}\n"
    },
    {
      "function": "func createTable(db *sql.DB) error {\n\tstmt, err := db.Prepare(`CREATE TABLE IF NOT EXISTS users (id SERIAL PRIMARY KEY, name VARCHAR(50))`)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer stmt.Close()\n\n\t_, err = stmt.Exec()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
    },
    {
      "function": "func dropTable(db *sql.DB) error {\n\tstmt, err := db.Prepare(\"DROP TABLE IF EXISTS users\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer stmt.Close()\n\n\t_, err = stmt.Exec()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
    },
    {
      "function": "func beginTransaction(db *sql.DB) (*sql.Tx, error) {\n\ttx, err := db.Begin()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn tx, nil\n}\n"
    },
    {
      "function": "func commitTransaction(tx *sql.Tx) error {\n\terr := tx.Commit()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
    },
    {
      "function": "func rollbackTransaction(tx *sql.Tx) error {\n\terr := tx.Rollback()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
    },
    {
      "function": "func prepareStatement(db *sql.DB, query string) (*sql.Stmt, error) {\n\tstmt, err := db.Prepare(query)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn stmt, nil\n}\n"
    },
    {
      "function": "func closeStatement(stmt *sql.Stmt) error {\n\terr := stmt.Close()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
    },
    {
      "function": "func execStatement(stmt *sql.Stmt, args ...interface{}) (sql.Result, error) {\n\tresult, err := stmt.Exec(args...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn result, nil\n}\n"
    },
    {
      "function": "func queryRow(stmt *sql.Stmt, args ...interface{}) *sql.Row {\n\trow := stmt.QueryRow(args...)\n\treturn row\n}\n"
    },
    {
      "function": "func queryRows(stmt *sql.Stmt, args ...interface{}) (*sql.Rows, error) {\n\trows, err := stmt.Query(args...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn rows, nil\n}\n"
    },
    {
      "function": "func scanRow(row *sql.Row, dest ...interface{}) error {\n\terr := row.Scan(dest...)\n\tif err != nil {\n\t\tif err == sql.ErrNoRows {\n\t\t\treturn ErrNoRows\n\t\t}\n\t\treturn err\n\t}\n\treturn nil\n}\n"
    },
    {
      "function": "func scanRows(rows *sql.Rows, dest ...interface{}) error {\n\terr := rows.Scan(dest...)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n"
    },
    {
      "function": "func prepareAndQuery(db *sql.DB, query string, args ...interface{}) (*sql.Rows, error) {\n\tstmt, err := db.Prepare(query)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer stmt.Close()\n\n\trows, err := stmt.Query(args...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn rows, nil\n}\n"
    },
    {
      "function": "func getRowCount(rows *sql.Rows) (int, error) {\n\tcount := 0\n\tfor rows.Next() {\n\t\tcount++\n\t}\n\tif err := rows.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n"
    },
    {
      "function": "func createIndex(db *sql.DB) error {\n\tstmt, err := db.Prepare(\"CREATE INDEX idx_name ON users (name)\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer stmt.Close()\n\n\t_, err = stmt.Exec()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
    },
    {
      "function": "func dropIndex(db *sql.DB) error {\n\tstmt, err := db.Prepare(\"DROP INDEX IF EXISTS idx_name\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer stmt.Close()\n\n\t_, err = stmt.Exec()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
    },
    {
      "function": "func createForeignKey(db *sql.DB) error {\n\tstmt, err := db.Prepare(\"ALTER TABLE users ADD CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES other_table(id)\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer stmt.Close()\n\n\t_, err = stmt.Exec()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
    },
    {
      "function": "func dropForeignKey(db *sql.DB) error {\n\tstmt, err := db.Prepare(\"ALTER TABLE users DROP CONSTRAINT fk_user_id\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer stmt.Close()\n\n\t_, err = stmt.Exec()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
    },
    {
      "function": "func createTransaction(db *sql.DB) (*sql.Tx, error) {\n\ttx, err := db.Begin()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn tx, nil\n}\n"
    },
    {
      "function": "func commitTransaction(tx *sql.Tx) error {\n\terr := tx.Commit()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n"
    },
    {
      "function": "func rollbackTransaction(tx *sql.Tx) error {\n\terr := tx.Rollback()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n"
    },
    {
      "function": "func prepareStatement(tx *sql.Tx, query string) (*sql.Stmt, error) {\n\tstmt, err := tx.Prepare(query)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn stmt, nil\n}\n"
    },
    {
      "function": "func closeStatement(stmt *sql.Stmt) error {\n\terr := stmt.Close()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n"
    },
    {
      "function": "func execStatement(stmt *sql.Stmt, args ...interface{}) (sql.Result, error) {\n\tresult, err := stmt.Exec(args...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn result, nil\n}\n"
    },
    {
      "function": "func queryRow(stmt *sql.Stmt, args ...interface{}) *sql.Row {\n\trow := stmt.QueryRow(args...)\n\treturn row\n}\n"
    },
    {
      "function": "func queryRows(stmt *sql.Stmt, args ...interface{}) (*sql.Rows, error) {\n\trows, err := stmt.Query(args...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn rows, nil\n}\n"
    },
    {
      "function": "func scanRow(row *sql.Row, dest ...interface{}) error {\n\terr := row.Scan(dest...)\n\tif err != nil {\n\t\tif err == sql.ErrNoRows {\n\t\t\treturn ErrNoRows\n\t\t}\n\t\treturn err\n\t}\n\treturn nil\n}\n"
    },
    {
      "function": "func scanRows(rows *sql.Rows, dest ...interface{}) error {\n\terr := rows.Scan(dest...)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n"
    },
    {
      "function": "func prepareAndQuery(tx *sql.Tx, query string, args ...interface{}) (*sql.Rows, error) {\n\tstmt, err := tx.Prepare(query)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer stmt.Close()\n\n\trows, err := stmt.Query(args...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn rows, nil\n}\n"
    },
    {
      "function": "func getRowCount(rows *sql.Rows) (int, error) {\n\tcount := 0\n\tfor rows.Next() {\n\t\tcount++\n\t}\n\tif err := rows.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n"
    },
    {
      "function": "func createIndex(tx *sql.Tx) error {\n\tstmt, err := tx.Prepare(\"CREATE INDEX idx_name ON users (name)\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer stmt.Close()\n\n\t_, err = stmt.Exec()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
    },
    {
      "function": "func dropIndex(tx *sql.Tx) error {\n\tstmt, err := tx.Prepare(\"DROP INDEX IF EXISTS idx_name\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer stmt.Close()\n\n\t_, err = stmt.Exec()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
    },
    {
      "function": "func createForeignKey(tx *sql.Tx) error {\n\tstmt, err := tx.Prepare(\"ALTER TABLE users ADD CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES other_table(id)\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer stmt.Close()\n\n\t_, err = stmt.Exec()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
    },
    {
      "function": "func dropForeignKey(tx *sql.Tx) error {\n\tstmt, err := tx.Prepare(\"ALTER TABLE users DROP CONSTRAINT fk_user_id\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer stmt.Close()\n\n\t_, err = stmt.Exec()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
    },
    {
      "function": "func createTransaction(db *sql.DB) (*sql.Tx, error) {\n\ttx, err := db.Begin()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn tx, nil\n}\n"
    },
    {
        "function": "package main\n\n// IsError checks if the error is not nil\nfunc IsError(err error) bool {\n\treturn err != nil\n}\n"
    },
    {
        "function": "package main\n\n// LogError logs the error\nfunc LogError(err error) {\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// HandleError handles the error by logging and exiting\nfunc HandleError(err error) {\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// PanicIfError panics if the error is not nil\nfunc PanicIfError(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// ErrorWithMessage returns an error with a custom message\nfunc ErrorWithMessage(err error, message string) error {\n\tif err != nil {\n\t\treturn fmt.Errorf(\"%s: %w\", message, err)\n\t}\n\treturn nil\n}\n"
    },
    {
        "function": "package main\n\n// WrapError wraps an error with another error\nfunc WrapError(err error, wrapErr error) error {\n\tif err != nil {\n\t\treturn fmt.Errorf(\"%w\", wrapErr)\n\t}\n\treturn nil\n}\n"
    },
    {
        "function": "package main\n\n// RecoverFromPanic recovers from a panic situation\nfunc RecoverFromPanic() {\n\tif r := recover(); r != nil {\n\t\tlog.Println(\"Recovered from\", r)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// CheckErrorAndExit checks for an error and exits if one exists\nfunc CheckErrorAndExit(err error) {\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// RetryOnError retries a function if it returns an error\nfunc RetryOnError(fn func() error, retries int) error {\n\tfor i := 0; i < retries; i++ {\n\t\terr := fn()\n\t\tif err == nil {\n\t\t\treturn nil\n\t\t}\n\t\tlog.Println(\"Retry\", i, \"failed with\", err)\n\t}\n\treturn fmt.Errorf(\"failed after %d retries\", retries)\n}\n"
    },
    {
        "function": "package main\n\n// ReturnError returns the error as a string\nfunc ReturnError(err error) string {\n\tif err != nil {\n\t\treturn err.Error()\n\t}\n\treturn \"\"\n}\n"
    },
    {
        "function": "package main\n\n// ErrorEquals checks if an error is equal to another error\nfunc ErrorEquals(err error, target error) bool {\n\tif err != nil {\n\t\treturn errors.Is(err, target)\n\t}\n\treturn false\n}\n"
    },
    {
        "function": "package main\n\n// ErrorContains checks if an error message contains a specific string\nfunc ErrorContains(err error, str string) bool {\n\tif err != nil {\n\t\treturn strings.Contains(err.Error(), str)\n\t}\n\treturn false\n}\n"
    },
    {
        "function": "package main\n\n// RecoverAndLog recovers from panic and logs the error\nfunc RecoverAndLog() {\n\tif r := recover(); r != nil {\n\t\tlog.Println(\"Recovered from\", r)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// AssertNoError asserts that there's no error, panics if there is an error\nfunc AssertNoError(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// HandleErrorWithDefault handles an error, returns a default value if an error occurs\nfunc HandleErrorWithDefault(err error, defaultValue string) string {\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn defaultValue\n\t}\n\treturn \"\"\n}\n"
    },
    {
        "function": "package main\n\n// ErrorOrNil returns error message or 'nil' if error is nil\nfunc ErrorOrNil(err error) string {\n\tif err != nil {\n\t\treturn err.Error()\n\t}\n\treturn \"nil\"\n}\n"
    },
    {
        "function": "package main\n\n// HandleCustomError handles a custom error type\nfunc HandleCustomError(err error) {\n\tif customErr, ok := err.(*CustomError); ok {\n\t\tlog.Println(customErr.Details)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// HandleErrAndRecover handles an error and recovers from a panic situation\nfunc HandleErrAndRecover(err error) {\n\tdefer RecoverFromPanic()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// HandleErrAndExit handles an error and exits\nfunc HandleErrAndExit(err error, exitCode int) {\n\tif err != nil {\n\t\tlog.Println(err)\n\t\tos.Exit(exitCode)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// PanicIfErrAndRecover panics if there's an error and recovers\nfunc PanicIfErrAndRecover(err error) {\n\tdefer RecoverFromPanic()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// IgnoreError ignores an error\nfunc IgnoreError(err error) {\n\t_ = err\n}\n"
    },
    {
        "function": "package main\n\n// LogAndIgnoreError logs and ignores an error\nfunc LogAndIgnoreError(err error) {\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// IsOfType checks if an error is of a specific type\nfunc IsOfType(err error, targetType error) bool {\n\treturn errors.As(err, &targetType)\n}\n"
    },
    {
        "function": "package main\n\n// WrapErrorWithMessage wraps an error with a new error message\nfunc WrapErrorWithMessage(err error, message string) error {\n\treturn fmt.Errorf(\"%s: %w\", message, err)\n}\n"
    },
    {
        "function": "package main\n\n// IfErrorThenLog checks if an error exists, if so, logs it\nfunc IfErrorThenLog(err error) {\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// IfErrorThenPanic checks if an error exists, if so, panics\nfunc IfErrorThenPanic(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// IfErrorThenExit checks if an error exists, if so, exits the program\nfunc IfErrorThenExit(err error) {\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// ErrorHandler is a function that takes an error and handles it\nfunc ErrorHandler(err error, handler func(error)) {\n\thandler(err)\n}\n"
    },
    {
        "function": "package main\n\n// ErrorHandlerWithDefault is a function that takes an error and a default error, if the error is nil it returns the default error\nfunc ErrorHandlerWithDefault(err error, defaultErr error) error {\n\tif err == nil {\n\t\treturn defaultErr\n\t}\n\treturn err\n}\n"
    },
    {
        "function": "package main\n\n// IfErrorPrintStackTrace checks if an error exists, if so, prints the stack trace\nfunc IfErrorPrintStackTrace(err error) {\n\tif err != nil {\n\t\tfmt.Printf(\"%+v\", err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// HandleErrorWithMessage logs the error with a custom message\nfunc HandleErrorWithMessage(err error, message string) {\n\tif err != nil {\n\t\tlog.Printf(\"%s: %v\", message, err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// IfErrorThenReplace checks if an error exists, if so, replaces it with a new error\nfunc IfErrorThenReplace(err *error, replaceErr error) {\n\tif *err != nil {\n\t\t*err = replaceErr\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// ThrowError creates an error with a given message\nfunc ThrowError(msg string) error {\n\treturn errors.New(msg)\n}\n"
    },
    {
        "function": "package main\n\n// IfErrorThenReturnDefault checks if an error exists, if so, returns a default value\nfunc IfErrorThenReturnDefault(err error, defaultValue string) string {\n\tif err != nil {\n\t\treturn defaultValue\n\t}\n\treturn \"\"\n}\n"
    },
    {
        "function": "package main\n\n// IfErrorThenLogWithMessage checks if an error exists, if so, logs it with a message\nfunc IfErrorThenLogWithMessage(err error, message string) {\n\tif err != nil {\n\t\tlog.Printf(\"%s: %v\", message, err)\n\t}\n}\n"
    },
    {
        "function": "// RetryOnErrorWithDelay retries a function if it returns an error, with a delay between each try\nfunc RetryOnErrorWithDelay(fn func() error, retries int, delay time.Duration) error {\n\tfor i := 0; i < retries; i++ {\n\t\terr := fn()\n\t\tif err == nil {\n\t\t\treturn nil\n\t\t}\n\t\ttime.Sleep(delay)\n\t}\n\treturn fmt.Errorf(\"failed after %d retries\", retries)\n}\n"
    },
    {
        "function": "// IfErrorThenCustomAction performs a custom action if an error exists\nfunc IfErrorThenCustomAction(err error, action func(error)) {\n\tif err != nil {\n\t\taction(err)\n\t}\n}\n"
    },
    {
        "function": "// PrintErrorDetails prints the error details\nfunc PrintErrorDetails(err error) {\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n}\n"
    },
    {
        "function": "// IfErrorThenLogAndReturnDefault checks if an error exists, if so, logs it and returns a default value\nfunc IfErrorThenLogAndReturnDefault(err error, defaultValue string) string {\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn defaultValue\n\t}\n\treturn \"\"\n}\n"
    },
    {
        "function": "// ErrorHandlerMiddleware is a middleware that handles any error from the next function\nfunc ErrorHandlerMiddleware(next func() error) func() {\n\treturn func() {\n\t\terr := next()\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t}\n}\n"
    },
    {
        "function": "// PrintErrorOrMessage prints the error if exists, else prints a message\nfunc PrintErrorOrMessage(err error, message string) {\n\tif err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfmt.Println(message)\n\t}\n}\n"
    },
    {
        "function": "// LogErrorAndSendEmail logs the error and sends an email (dummy function)\nfunc LogErrorAndSendEmail(err error) {\n\tif err != nil {\n\t\tlog.Println(err)\n\t\t// Assume SendEmail is defined\n\t\t// SendEmail(\"admin@domain.com\", \"An error occurred\", err.Error())\n\t}\n}\n"
    },
    {
        "function": "// WrapErrorInStruct wraps an error in a custom struct\nfunc WrapErrorInStruct(err error) *CustomErrorStruct {\n\treturn &CustomErrorStruct{Err: err}\n}\n"
    },
    {
        "function": "// LogErrorIfNotNil logs the error if it's not nil\nfunc LogErrorIfNotNil(err error) {\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n}\n"
    },
    {
        "function": "// PrintAndReturnError prints an error message and returns an error\nfunc PrintAndReturnError(message string) error {\n\tfmt.Println(message)\n\treturn errors.New(message)\n}\n"
    },
    {
        "function": "// ReturnIfError returns early if an error is not nil\nfunc ReturnIfError(err error) {\n\tif err != nil {\n\t\treturn\n\t}\n}\n"
    },
    {
        "function": "// LogErrorAndContinue logs the error and continues execution\nfunc LogErrorAndContinue(err error) {\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\t// Continue execution...\n}\n"
    },
    {
        "function": "// PanicIfError panics if the error is not nil\nfunc PanicIfError(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"
    },
    {
        "function": "// IsError checks if a returned error is a specific error\nfunc IsError(err error, target error) bool {\n\treturn errors.Is(err, target)\n}\n"
    },
    {
        "function": "// ErrorType returns the type of the error\nfunc ErrorType(err error) reflect.Type {\n\treturn reflect.TypeOf(err)\n}\n"
    },
    {
        "function": "// NewError creates a new error with a message\nfunc NewError(message string) error {\n\treturn errors.New(message)\n}\n"
    },
    {
        "function": "// LogErrorWithTrace logs the error with a trace\nfunc LogErrorWithTrace(err error) {\n\tif err != nil {\n\t\tlog.Printf(\"%v\n%+v\", err, err)\n\t}\n}\n"
    },
    {
        "function": "// UnwrapError unwraps an error\nfunc UnwrapError(err error) error {\n\treturn errors.Unwrap(err)\n}\n"
    },
    {
        "function": "// IgnoreErrorAndContinue ignores the error and continues execution\nfunc IgnoreErrorAndContinue(err error) {\n\t_ = err\n\t// Continue execution...\n}\n"
    },
    {
        "function": "// CustomErrorHandler handles an error with a custom error handler\nfunc CustomErrorHandler(err error, handler func(error)) {\n\tif err != nil {\n\t\thandler(err)\n\t}\n}\n"
    },
    {
        "function": "// HandleErrorGracefully logs the error and recovers from a panic\nfunc HandleErrorGracefully(err *error) {\n\tif r := recover(); r != nil {\n\t\tif err, ok := r.(error); ok {\n\t\t\t*err = err\n\t\t\tlog.Println(\"Recovered from panic with error:\", (*err).Error())\n\t\t}\n\t}\n}\n"
    },
    {
        "function": "// IfErrorReturn checks if an error exists and returns it if so\nfunc IfErrorReturn(err error) error {\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n"
    },
    {
        "function": "// ErrorHandlerInGoroutine handles an error within a goroutine\nfunc ErrorHandlerInGoroutine(err *error) {\n\tgo func() {\n\t\tif err := recover(); err != nil {\n\t\t\t*err = fmt.Errorf(\"goroutine error: %v\", err)\n\t\t}\n\t}()\n}\n"
    },
    {
        "function": "// LogErrorToFile logs the error to a file (assuming logFile is defined)\nfunc LogErrorToFile(err error) {\n\tif err != nil {\n\t\t// Assuming logFile is a file descriptor\n\t\t// fmt.Fprintf(logFile, \"%v\", err)\n\t}\n}\n"
    },
    {
        "function": "// ReturnErrorOrResult returns an error if exists, else returns a result\nfunc ReturnErrorOrResult(err error, result string) (string, error) {\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn result, nil\n}\n"
    },
    {
        "function": "// IfErrorRetry retries a function if it returns an error\nfunc IfErrorRetry(fn func() error, retries int) error {\n\tfor i := 0; i < retries; i++ {\n\t\terr := fn()\n\t\tif err == nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"failed after %d retries\", retries)\n}\n"
    },
    {
        "function": "// PrintErrorAndExit prints the error and exits the program\nfunc PrintErrorAndExit(err error) {\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n}\n"
    },
    {
        "function": "// IfErrorThenReplaceWithFormattedError checks if an error exists, if so, replaces it with a new formatted error\nfunc IfErrorThenReplaceWithFormattedError(err *error, format string, a ...interface{}) {\n\tif *err != nil {\n\t\t*err = fmt.Errorf(format, a...)\n\t}\n}\n"
    },
    {
        "function": "// HandleErrorInDeferredFunction handles an error in a deferred function\nfunc HandleErrorInDeferredFunction(err *error) {\n\tif r := recover(); r != nil {\n\t\t*err = fmt.Errorf(\"deferred function error: %v\", r)\n\t}\n}\n"
    },
    {
        "function": "// IfErrorThenLogAndExit checks if an error exists, if so, logs it and exits the program\nfunc IfErrorThenLogAndExit(err error) {\n\tif err != nil {\n\t\tlog.Println(err)\n\t\tos.Exit(1)\n\t}\n}\n"
    },
    {
        "function": "// HandleErrorAndRecover gracefully handles an error and attempts to recover\nfunc HandleErrorAndRecover(err *error) {\n\tif r := recover(); r != nil {\n\t\t*err = fmt.Errorf(\"recovered error: %v\", r)\n\t\t// Attempt recovery...\n\t}\n}\n"
    },
    {
        "function": "// ErrorToString converts an error to a string\nfunc ErrorToString(err error) string {\n\tif err != nil {\n\t\treturn err.Error()\n\t}\n\treturn \"\"\n}\n"
    },
    {
        "function": "// IfErrorThenWrap checks if an error exists, if so, wraps it in another error\nfunc IfErrorThenWrap(err error, wrapErr string) error {\n\tif err != nil {\n\t\treturn fmt.Errorf(\"%s: %w\", wrapErr, err)\n\t}\n\treturn nil\n}\n"
    },
    {
        "function": "// IfErrorThenCustomError checks if an error exists, if so, returns a custom error\nfunc IfErrorThenCustomError(err error, customError string) error {\n\tif err != nil {\n\t\treturn errors.New(customError)\n\t}\n\treturn nil\n}\n"
    },
    {
        "function": "// ErrorHandlerWithErrorReturn handles an error with a custom handler that returns an error\nfunc ErrorHandlerWithErrorReturn(err error, handler func(error) error) error {\n\treturn handler(err)\n}\n"
    },
    {
        "function": "// PrintErrorOrContinue prints the error if it exists, otherwise continues execution\nfunc PrintErrorOrContinue(err error) {\n\tif err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\t// Continue execution...\n\t}\n}\n"
    },
    {
        "function": "// ConvertErrorToJSON converts an error to a JSON string (dummy function)\nfunc ConvertErrorToJSON(err error) string {\n\t// Let's assume err has fields 'Type' and 'Message'\n\t// return json.Marshal(err)\n\treturn \"\"\n}\n"
    },
    {
        "function": "// RecoverAndHandleError recovers from a panic and handles the error\nfunc RecoverAndHandleError(err *error) {\n\tif r := recover(); r != nil {\n\t\tif recErr, ok := r.(error); ok {\n\t\t\t*err = recErr\n\t\t\tlog.Println(\"Recovered from panic with error:\", (*err).Error())\n\t\t}\n\t}\n}\n"
    },
    {
        "function": "// IfErrorThenPanic checks if an error exists, if so, panics\nfunc IfErrorThenPanic(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"
    },
    {
        "function": "// IfErrorThenLogAndPanic checks if an error exists, if so, logs it and panics\nfunc IfErrorThenLogAndPanic(err error) {\n\tif err != nil {\n\t\tlog.Println(err)\n\t\tpanic(err)\n\t}\n}\n"
    },
    {
        "function": "// IsErrorOfType checks if an error is of a specific type\nfunc IsErrorOfType(err error, targetType reflect.Type) bool {\n\treturn reflect.TypeOf(err) == targetType\n}\n"
    },
    {
        "function": "// IfErrorThenLog checks if an error exists, if so, logs it\nfunc IfErrorThenLog(err error) {\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n}\n"
    },
    {
        "function": "// HandleErrorWithRecovery handles an error and attempts recovery\nfunc HandleErrorWithRecovery(err *error) {\n\tif r := recover(); r != nil {\n\t\t*err = fmt.Errorf(\"recovered error: %v\", r)\n\t\t// Attempt recovery...\n\t}\n}\n"
    },
    {
        "function": "// Define a struct\n\ntype Employee struct {\n\tID int\n\tFirstName string\n\tLastName string\n}\n"
    },
    {
        "function": "// Initialize a struct\n\ne := Employee{\n\tID: 1,\n\tFirstName: \"John\",\n\tLastName: \"Doe\",\n}\n"
    },
    {
        "function": "// Using if-else conditional\n\nif condition {\n\t// execute this block\n} else {\n\t// execute this block\n}\n"
    },
    {
        "function": "// Using for loop\n\nfor i := 0; i < 10; i++ {\n\tfmt.Println(i)\n}\n"
    },
    {
        "function": "// Iterating over a slice\n\nslice := []int{1, 2, 3, 4, 5}\nfor _, value := range slice {\n\tfmt.Println(value)\n}\n"
    },
    {
        "function": "// Iterating over a map\n\nm := map[string]int{\"a\": 1, \"b\": 2}\nfor key, value := range m {\n\tfmt.Println(key, value)\n}\n"
    },
    {
        "function": "// Error handling with if statement\n\nerr := doSomething()\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "// Using a switch statement\n\nswitch variable {\n\tcase value1:\n\t\t// do something\n\tcase value2:\n\t\t// do something else\n\tdefault:\n\t\t// default case\n}\n"
    },
    {
        "function": "// Defining a function\n\nfunc add(a int, b int) int {\n\treturn a + b\n}\n"
    },
    {
        "function": "// Calling a function\n\nresult := add(1, 2)\nfmt.Println(result)\n"
    },
    {
        "function": "// Using defer for cleanup\n\nfile, err := os.Open(\"file.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer file.Close()\n"
    },
    {
        "function": "// Using a pointer\n\nx := 5\nptr := &x\nfmt.Println(*ptr)\n"
    },
    {
        "function": "// Implementing an interface\n\ntype Reader interface {\n\tRead(p []byte) (n int, err error)\n}\ntype MyReader struct{}\nfunc (m MyReader) Read(p []byte) (int, error) {\n\t// implement the method\n}\n"
    },
    {
        "function": "// Spawning a goroutine\n\ngo func() {\n\tfmt.Println(\"Hello from a goroutine\")\n}()\n"
    },
    {
        "function": "// Using a channel\n\nch := make(chan int)\ngo func() {\n\tch <- doSomething()\n}()\nresult := <-ch\n"
    },
    {
        "function": "// Using a select statement\n\nselect {\n\tcase <-ch1:\n\t\t// do something\n\tcase <-ch2:\n\t\t// do something else\n}\n"
    },
    {
        "function": "// Making a HTTP request\n\nresp, err := http.Get(\"http://example.com\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer resp.Body.Close()\n"
    },
    {
        "function": "// Unmarshaling JSON\n\nvar data struct {\n\tField string `json:\"field\"`\n}\nerr := json.Unmarshal(jsonData, &data)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "// Marshaling JSON\n\ndata := struct {\n\tField string `json:\"field\"`\n}{\"value\"}\njsonData, err := json.Marshal(data)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "// Writing to a file\n\nfile, err := os.Create(\"file.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer file.Close()\n_, err = file.WriteString(\"text\")\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "// Reading from a file\n\nfile, err := os.Open(\"file.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer file.Close()\ndata, err := ioutil.ReadAll(file)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "// Creating a custom error\n\nvar ErrCustom = errors.New(\"custom error\")\n"
    },
    {
        "function": "// Implementing a method on a struct\n\ntype MyStruct struct {}\nfunc (m MyStruct) method() {\n\t// implement the method\n}\n"
    },
    {
        "function": "// Making a slice\n\nslice := make([]int, 10)\n"
    },
    {
        "function": "// Making a map\n\nm := make(map[string]int)\n"
    },
    {
        "function": "// Using append to add to a slice\n\nslice := []int{1, 2, 3}\nslice = append(slice, 4)\n"
    },
    {
        "function": "// Using delete to remove from a map\n\nm := map[string]int{\"a\": 1}\ndelete(m, \"a\")\n"
    },
    {
        "function": "// Using the sort package\n\nnumbers := []int{5, 2, 6, 3, 1}\nsort.Ints(numbers)\n"
    },
    {
        "function": "// Using the strconv package\n\ni, err := strconv.Atoi(\"123\")\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "// Using a mutex for synchronization\n\nvar mu sync.Mutex\nmu.Lock()\n// critical section\nmu.Unlock()\n"
    },
    {
        "function": "type Student struct {\n\tName   string\n\tAge    int\n\tGrades []float64\n}\n"
    },
    {
        "function": "student := Student{\n\tName:   \"Alice\",\n\tAge:   20,\n\tGrades: []float64{85.5, 90.3, 88.4},\n}\n"
    },
    {
        "function": "if student.Age > 18 {\n\tfmt.Println(\"Adult student\")\n} else {\n\tfmt.Println(\"Minor student\")\n}\n"
    },
    {
        "function": "for i := 0; i < 5; i++ {\n\tfmt.Println(i)\n}\n"
    },
    {
        "function": "nums := []int{2, 3, 5, 7, 11}\nfor index, num := range nums {\n\tfmt.Printf(\"nums[%d] = %d\\n\", index, num)\n}\n"
    },
    {
        "function": "grades := map[string]int{\"Math\": 90, \"Science\": 85}\nfor subject, grade := range grades {\n\tfmt.Printf(\"Grade in %s: %d\\n\", subject, grade)\n}\n"
    },
    {
        "function": "err := doSomething()\nif err != nil {\n\tlog.Fatalf(\"Error: %v\", err)\n}\n"
    },
    {
        "function": "var i int\nswitch i {\ncase 0:\n\tfmt.Println(\"i is zero\")\ncase 1:\n\tfmt.Println(\"i is one\")\ndefault:\n\tfmt.Println(\"i is not zero or one\")\n}\n"
    },
    {
        "function": "func sum(nums []int) int {\n\ttotal := 0\n\tfor _, num := range nums {\n\t\ttotal += num\n\t}\n\treturn total\n}\n"
    },
    {
        "function": "total := sum([]int{1, 2, 3, 4, 5})\nfmt.Printf(\"Total: %d\\n\", total)\n"
    },
    {
        "function": "file, err := os.Open(\"file.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer file.Close()\n"
    },
    {
        "function": "x := 42\nptr := &x\nfmt.Printf(\"Value of x: %d\\n\", *ptr)\n"
    },
    {
        "function": "type Writer interface {\n\tWrite(p []byte) (n int, err error)\n}\ntype MyWriter struct{}\nfunc (m MyWriter) Write(p []byte) (int, error) {\n\treturn len(p), nil\n}\n"
    },
    {
        "function": "go func() {\n\tfmt.Println(\"Running in a goroutine\")\n}()\n"
    },
    {
        "function": "ch := make(chan int)\ngo func() {\n\tch <- 42\n}()\nvalue := <-ch\nfmt.Printf(\"Received value: %d\\n\", value)\n"
    },
    {
        "function": "select {\ncase <-ch1:\n\tfmt.Println(\"Received from ch1\")\ncase <-ch2:\n\tfmt.Println(\"Received from ch2\")\ndefault:\n\tfmt.Println(\"No data received\")\n}\n"
    },
    {
        "function": "resp, err := http.Get(\"http://example.com\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer resp.Body.Close()\n"
    },
    {
        "function": "var data struct {\n\tField string `json:\"field\"`\n}\nerr := json.Unmarshal(jsonData, &data)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "data := struct {\n\tField string `json:\"field\"`\n}{\"value\"}\njsonData, err := json.Marshal(data)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "file, err := os.Create(\"file.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer file.Close()\n_, err = file.WriteString(\"Hello, World!\")\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "file, err := os.Open(\"file.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer file.Close()\ncontent, err := ioutil.ReadAll(file)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "var ErrNotFound = errors.New(\"not found\")\n"
    },
    {
        "function": "type Rectangle struct {\n\tLength, Width float64\n}\nfunc (r Rectangle) Area() float64 {\n\treturn r.Length * r.Width\n}\n"
    },
    {
        "function": "slice := make([]int, 5)\n"
    },
    {
        "function": "dictionary := make(map[string]string)\n"
    },
    {
        "function": "values := []int{1, 2, 3}\nvalues = append(values, 4, 5)\n"
    },
    {
        "function": "dictionary := map[string]int{\"one\": 1, \"two\": 2}\ndelete(dictionary, \"one\")\n"
    },
    {
        "function": "numbers := []int{3, 1, 4, 1, 5, 9}\nsort.Ints(numbers)\n"
    },
    {
        "function": "i, err := strconv.Atoi(\"123\")\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "var mutex sync.Mutex\nmutex.Lock()\n// do something critical\nmutex.Unlock()\n"
    },
    {
        "function": "type Circle struct {\n\tRadius float64\n}\n"
    },
    {
        "function": "circle := Circle{\n\tRadius: 5.0,\n}\n"
    },
    {
        "function": "if circle.Radius > 0 {\n\tfmt.Println(\"Valid circle\")\n} else {\n\tfmt.Println(\"Invalid circle\")\n}\n"
    },
    {
        "function": "for i := 10; i > 0; i-- {\n\tfmt.Println(i)\n}\n"
    },
    {
        "function": "values := []string{\"Go\", \"Python\", \"Java\"}\nfor idx, val := range values {\n\tfmt.Printf(\"values[%d] = %s\\n\", idx, val)\n}\n"
    },
    {
        "function": "scores := map[string]int{\"Alice\": 90, \"Bob\": 85}\nfor name, score := range scores {\n\tfmt.Printf(\"Score of %s: %d\\n\", name, score)\n}\n"
    },
    {
        "function": "err := doSomethingElse()\nif err != nil {\n\tlog.Fatalf(\"Error: %v\", err)\n}\n"
    },
    {
        "function": "var j int\nswitch j {\ncase 2:\n\tfmt.Println(\"j is two\")\ncase 3:\n\tfmt.Println(\"j is three\")\ndefault:\n\tfmt.Println(\"j is not two or three\")\n}\n"
    },
    {
        "function": "func multiply(nums []int) int {\n\tresult := 1\n\tfor _, num := range nums {\n\t\tresult *= num\n\t}\n\treturn result\n}\n"
    },
    {
        "function": "result := multiply([]int{1, 2, 3, 4, 5})\nfmt.Printf(\"Result: %d\\n\", result)\n"
    },
    {
        "function": "file, err := os.Create(\"newfile.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer file.Close()\n"
    },
    {
        "function": "y := 10\nptr := &y\nfmt.Printf(\"Value of y: %d\\n\", *ptr)\n"
    },
    {
        "function": "type Runner interface {\n\tRun(distance int) error\n}\ntype MyRunner struct{}\nfunc (m MyRunner) Run(distance int) error {\n\treturn nil\n}\n"
    },
    {
        "function": "go func() {\n\tfmt.Println(\"I'm running in a goroutine\")\n}()\n"
    },
    {
        "function": "ch := make(chan string)\ngo func() {\n\tch <- \"Hello, channel!\"\n}()\nmessage := <-ch\nfmt.Printf(\"Received message: %s\\n\", message)\n"
    },
    {
        "function": "select {\ncase <-ch1:\n\tfmt.Println(\"Got data from ch1\")\ncase <-ch2:\n\tfmt.Println(\"Got data from ch2\")\ndefault:\n\tfmt.Println(\"No data received\")\n}\n"
    },
    {
        "function": "resp, err := http.Get(\"http://google.com\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer resp.Body.Close()\n"
    },
    {
        "function": "var person struct {\n\tName string `json:\"name\"`\n}\nerr := json.Unmarshal(jsonData, &person)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "person := struct {\n\tName string `json:\"name\"`\n}{\"John\"}\njsonData, err := json.Marshal(person)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "file, err := os.Create(\"hello.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer file.Close()\n_, err = file.WriteString(\"Hello, Golang!\")\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "file, err := os.Open(\"hello.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer file.Close()\ntext, err := ioutil.ReadAll(file)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "var ErrInvalidInput = errors.New(\"invalid input\")\n"
    },
    {
        "function": "type Square struct {\n\tSide float64\n}\nfunc (s Square) Area() float64 {\n\treturn s.Side * s.Side\n}\n"
    },
    {
        "function": "numbers := make([]int, 5)\n"
    },
    {
        "function": "users := make(map[string]string)\n"
    },
    {
        "function": "items := []int{1, 2, 3}\nitems = append(items, 4, 5)\n"
    },
    {
        "function": "users := map[string]int{\"Alice\": 1, \"Bob\": 2}\ndelete(users, \"Alice\")\n"
    },
    {
        "function": "items := []int{3, 1, 4, 1, 5, 9}\nsort.Ints(items)\n"
    },
    {
        "function": "j, err := strconv.Atoi(\"456\")\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "var rwMutex sync.RWMutex\nrwMutex.Lock()\n// do something critical\nrwMutex.Unlock()\n"
    },
    {
        "function": "file, err := os.Open(\"file.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer file.Close()\n"
    },
    {
        "function": "info, err := os.Stat(\"file.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\nfmt.Println(\"File size:\", info.Size())\n"
    },
    {
        "function": "content, err := ioutil.ReadFile(\"file.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\nfmt.Println(string(content))\n"
    },
    {
        "function": "err = ioutil.WriteFile(\"file.txt\", []byte(\"Hello, World!\"), 0644)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "files, err := ioutil.ReadDir(\".\")\nif err != nil {\n\tlog.Fatal(err)\n}\nfor _, file := range files {\n\tfmt.Println(file.Name())\n}\n"
    },
    {
        "function": "err = os.Rename(\"oldname.txt\", \"newname.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "err = os.Remove(\"file.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "file, err := os.Create(\"file.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer file.Close()\n_, err = file.Write([]byte(\"Hello, World!\"))\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "file, err := os.OpenFile(\"file.txt\", os.O_APPEND|os.O_WRONLY, 0644)\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer file.Close()\n_, err = file.Write([]byte(\"Appending text\\n\"))\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "reader := bufio.NewReader(file)\nline, err := reader.ReadString('\\n')\nif err != nil {\n\tlog.Fatal(err)\n}\nfmt.Println(line)\n"
    },
    {
        "function": "writer := bufio.NewWriter(file)\n_, err = writer.WriteString(\"Writing with bufio\\n\")\nif err != nil {\n\tlog.Fatal(err)\n}\nwriter.Flush()\n"
    },
    {
        "function": "err = os.Mkdir(\"newdir\", 0755)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "err = os.MkdirAll(\"path/to/newdir\", 0755)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "err = os.Chmod(\"file.txt\", 0644)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "err = os.Chown(\"file.txt\", os.Getuid(), os.Getgid())\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "file, err := os.Create(\"file.gz\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer file.Close()\ngzWriter := gzip.NewWriter(file)\ndefer gzWriter.Close()\n_, err = gzWriter.Write([]byte(\"Gzip compression\\n\"))\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "file, err := os.Open(\"file.gz\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer file.Close()\ngzReader, err := gzip.NewReader(file)\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer gzReader.Close()\ncontent, err := ioutil.ReadAll(gzReader)\nif err != nil {\n\tlog.Fatal(err)\n}\nfmt.Println(string(content))\n"
    },
    {
        "function": "encoder := gob.NewEncoder(file)\nerr = encoder.Encode(&data)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "decoder := gob.NewDecoder(file)\nerr = decoder.Decode(&data)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "absPath, err := filepath.Abs(\"file.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\nfmt.Println(\"Absolute path:\", absPath)\n"
    },
    {
        "function": "path := filepath.Join(\"dir\", \"file.txt\")\nfmt.Println(\"Joined path:\", path)\n"
    },
    {
        "function": "base := filepath.Base(absPath)\nfmt.Println(\"Base name:\", base)\n"
    },
    {
        "function": "dir := filepath.Dir(absPath)\nfmt.Println(\"Directory:\", dir)\n"
    },
    {
        "function": "ext := filepath.Ext(absPath)\nfmt.Println(\"Extension:\", ext)\n"
    },
    {
        "function": "matches, err := filepath.Glob(\"*.txt\")\nif err != nil {\n\tlog.Fatal(err)\n}\nfor _, match := range matches {\n\tfmt.Println(match)\n}\n"
    },
    {
        "function": "walker := func(path string, info os.FileInfo, err error) error {\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(path)\n\treturn nil\n}\nfilepath.Walk(\".\", walker)\n"
    },
    {
        "function": "f, err := os.CreateTemp(\"\", \"temp*\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer os.Remove(f.Name())\nfmt.Println(\"Temp file name:\", f.Name())\n"
    },
    {
        "function": "d, err := os.CreateTempDir(\"\", \"tempDir*\")\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer os.RemoveAll(d)\nfmt.Println(\"Temp dir name:\", d)\n"
    },
    {
        "function": "err = os.Truncate(\"file.txt\", 100)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "link := \"symbolic_link\"\nerr = os.Symlink(\"file.txt\", link)\nif err != nil {\n\tlog.Fatal(err)\n}\n"
    },
    {
        "function": "package main\n\n// Open a file\nfunc main() {\n\tfile, err := os.Open(\"file.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer file.Close()\n}\n"
    },
    {
        "function": "package main\n\n// Get file information\nfunc main() {\n\tinfo, err := os.Stat(\"file.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(\"File size:\", info.Size())\n}\n"
    },
    {
        "function": "package main\n\n// Read file content\nfunc main() {\n\tcontent, err := ioutil.ReadFile(\"file.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(string(content))\n}\n"
    },
    {
        "function": "package main\n\n// Write content to file\nfunc main() {\n\terr := ioutil.WriteFile(\"file.txt\", []byte(\"Hello, World!\"), 0644)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// List files in a directory\nfunc main() {\n\tfiles, err := ioutil.ReadDir(\".\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor _, file := range files {\n\t\tfmt.Println(file.Name())\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// Rename a file\nfunc main() {\n\terr := os.Rename(\"oldname.txt\", \"newname.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// Remove a file\nfunc main() {\n\terr := os.Remove(\"file.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// Create and write to a file\nfunc main() {\n\tfile, err := os.Create(\"file.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer file.Close()\n\t_, err = file.Write([]byte(\"Hello, World!\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// Open file in append mode and write to it\nfunc main() {\n\tfile, err := os.OpenFile(\"file.txt\", os.O_APPEND|os.O_WRONLY, 0644)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer file.Close()\n\t_, err = file.Write([]byte(\"Appending text\\n\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// Read a line from a file using a buffered reader\nfunc main() {\n\tfile, _ := os.Open(\"file.txt\")\n\tdefer file.Close()\n\treader := bufio.NewReader(file)\n\tline, err := reader.ReadString('\\n')\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(line)\n}\n"
    },
    {
        "function": "package main\n\n// Write to a file using a buffered writer\nfunc main() {\n\tfile, _ := os.Create(\"file.txt\")\n\tdefer file.Close()\n\twriter := bufio.NewWriter(file)\n\t_, err := writer.WriteString(\"Writing with bufio\\n\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\twriter.Flush()\n}\n"
    },
    {
        "function": "package main\n\n// Create a directory\nfunc main() {\n\terr := os.Mkdir(\"newdir\", 0755)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// Create a directory along with any necessary parents\nfunc main() {\n\terr := os.MkdirAll(\"path/to/newdir\", 0755)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// Change the mode of a file\nfunc main() {\n\terr := os.Chmod(\"file.txt\", 0644)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// Change the owner of a file\nfunc main() {\n\terr := os.Chown(\"file.txt\", os.Getuid(), os.Getgid())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// Write to a gzip file\nfunc main() {\n\tfile, err := os.Create(\"file.gz\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer file.Close()\n\tgzWriter := gzip.NewWriter(file)\n\tdefer gzWriter.Close()\n\t_, err = gzWriter.Write([]byte(\"Gzip compression\\n\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// Read from a gzip file\nfunc main() {\n\tfile, err := os.Open(\"file.gz\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer file.Close()\n\tgzReader, err := gzip.NewReader(file)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer gzReader.Close()\n\tcontent, err := ioutil.ReadAll(gzReader)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(string(content))\n}\n"
    },
    {
        "function": "package main\n\n// Encode data as gob to a file\nfunc main() {\n\tdata := \"Some data\"\n\tfile, _ := os.Create(\"file.gob\")\n\tdefer file.Close()\n\tencoder := gob.NewEncoder(file)\n\terr := encoder.Encode(&data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// Decode gob data from a file\nfunc main() {\n\tdata := \"\"\n\tfile, _ := os.Open(\"file.gob\")\n\tdefer file.Close()\n\tdecoder := gob.NewDecoder(file)\n\terr := decoder.Decode(&data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// Get the absolute path of a file\nfunc main() {\n\tabsPath, err := filepath.Abs(\"file.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(\"Absolute path:\", absPath)\n}\n"
    },
    {
        "function": "package main\n\n// Join elements to form a valid file path\nfunc main() {\n\tpath := filepath.Join(\"dir\", \"file.txt\")\n\tfmt.Println(\"Joined path:\", path)\n}\n"
    },
    {
        "function": "package main\n\n// Get the base name of a file path\nfunc main() {\n\tabsPath, _ := filepath.Abs(\"file.txt\")\n\tbase := filepath.Base(absPath)\n\tfmt.Println(\"Base name:\", base)\n}\n"
    },
    {
        "function": "package main\n\n// Get the directory name of a file path\nfunc main() {\n\tabsPath, _ := filepath.Abs(\"file.txt\")\n\tdir := filepath.Dir(absPath)\n\tfmt.Println(\"Directory:\", dir)\n}\n"
    },
    {
        "function": "package main\n\n// Get the file extension\nfunc main() {\n\tabsPath, _ := filepath.Abs(\"file.txt\")\n\text := filepath.Ext(absPath)\n\tfmt.Println(\"Extension:\", ext)\n}\n"
    },
    {
        "function": "package main\n\n// Globbing for matching files\nfunc main() {\n\tmatches, err := filepath.Glob(\"*.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor _, match := range matches {\n\t\tfmt.Println(match)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// Walking a directory\nfunc main() {\n\twalker := func(path string, info os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(path)\n\t\treturn nil\n\t}\n\tfilepath.Walk(\".\", walker)\n}\n"
    },
    {
        "function": "package main\n\n// Create a temp file\nfunc main() {\n\tf, err := os.CreateTemp(\"\", \"temp*\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer os.Remove(f.Name())\n\tfmt.Println(\"Temp file name:\", f.Name())\n}\n"
    },
    {
        "function": "package main\n\n// Create a temp directory\nfunc main() {\n\td, err := os.CreateTempDir(\"\", \"tempDir*\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer os.RemoveAll(d)\n\tfmt.Println(\"Temp dir name:\", d)\n}\n"
    },
    {
        "function": "package main\n\n// Truncate a file\nfunc main() {\n\terr := os.Truncate(\"file.txt\", 100)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// Create a symbolic link\nfunc main() {\n\terr := os.Symlink(\"file.txt\", \"file_sym.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// This function opens a file\nfunc OpenFile(filename string) (*os.File, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn file, nil\n}\n\n// This function reads from an open file\nfunc ReadFile(file *os.File) ([]byte, error) {\n\tcontent, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn content, nil\n}\n\nfunc main() {\n\tfile, err := OpenFile(\"file.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer file.Close()\n\tcontent, err := ReadFile(file)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(string(content))\n}\n"
    },
    {
        "function": "package main\n\n// This function creates a new file\nfunc CreateFile(filename string) (*os.File, error) {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn file, nil\n}\n\n// This function writes to an open file\nfunc WriteFile(file *os.File, data []byte) error {\n\t_, err := file.Write(data)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc main() {\n\tfile, err := CreateFile(\"newfile.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer file.Close()\n\terr = WriteFile(file, []byte(\"Hello, World!\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// This function renames a file\nfunc RenameFile(oldname, newname string) error {\n\terr := os.Rename(oldname, newname)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\n// This function deletes a file\nfunc DeleteFile(filename string) error {\n\terr := os.Remove(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc main() {\n\terr := RenameFile(\"oldfile.txt\", \"newfile.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\terr = DeleteFile(\"newfile.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// This function returns the size of a file\nfunc GetFileSize(filename string) (int64, error) {\n\tinfo, err := os.Stat(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn info.Size(), nil\n}\n\n// This function prints the size of a file\nfunc PrintFileSize(filename string) error {\n\tsize, err := GetFileSize(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(\"File size:\", size)\n\treturn nil\n}\n\nfunc main() {\n\terr := PrintFileSize(\"file.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// This function changes the mode of a file\nfunc ChangeFileMode(filename string, mode os.FileMode) error {\n\terr := os.Chmod(filename, mode)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\n// This function prints the mode of a file\nfunc PrintFileMode(filename string) error {\n\tinfo, err := os.Stat(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(\"File mode:\", info.Mode())\n\treturn nil\n}\n\nfunc main() {\n\terr := ChangeFileMode(\"file.txt\", 0644)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\terr = PrintFileMode(\"file.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// This function checks if a file exists\nfunc FileExists(filename string) bool {\n\t_, err := os.Stat(filename)\n\treturn !os.IsNotExist(err)\n}\n\n// This function prints if a file exists\nfunc PrintFileExists(filename string) {\n\texists := FileExists(filename)\n\tfmt.Println(\"File exists:\", exists)\n}\n\nfunc main() {\n\tPrintFileExists(\"file.txt\")\n}\n"
    },
    {
        "function": "package main\n\n// This function gets the absolute path of a file\nfunc GetAbsolutePath(filename string) (string, error) {\n\tabsPath, err := filepath.Abs(filename)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn absPath, nil\n}\n\n// This function prints the absolute path of a file\nfunc PrintAbsolutePath(filename string) error {\n\tabsPath, err := GetAbsolutePath(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(\"Absolute path:\", absPath)\n\treturn nil\n}\n\nfunc main() {\n\terr := PrintAbsolutePath(\"file.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// This function reads from a gzip file\nfunc ReadGzipFile(filename string) ([]byte, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\tgzReader, err := gzip.NewReader(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer gzReader.Close()\n\tcontent, err := ioutil.ReadAll(gzReader)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn content, nil\n}\n\n// This function writes to a gzip file\nfunc WriteGzipFile(filename string, data []byte) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\tgzWriter := gzip.NewWriter(file)\n\tdefer gzWriter.Close()\n\t_, err = gzWriter.Write(data)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc main() {\n\terr := WriteGzipFile(\"file.txt.gz\", []byte(\"Hello, World!\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tcontent, err := ReadGzipFile(\"file.txt.gz\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(string(content))\n}\n"
    },
    {
        "function": "package main\n\n// This function reads a line from a bufio.Reader\nfunc ReadLine(reader *bufio.Reader) (string, error) {\n\tline, err := reader.ReadString('\\n')\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn line, nil\n}\n\n// This function reads lines from a file\nfunc ReadLines(filename string) error {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\treader := bufio.NewReader(file)\n\tfor {\n\t\tline, err := ReadLine(reader)\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\treturn err\n\t\t\t}\n\t\tfmt.Println(line)\n\t}\n\treturn nil\n}\n\nfunc main() {\n\terr := ReadLines(\"file.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "package main\n\n// This function walks a directory\nfunc WalkDir(dirname string, walkFn filepath.WalkFunc) error {\n\terr := filepath.Walk(dirname, walkFn)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc main() {\n\twalker := func(path string, info os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(path)\n\t\treturn nil\n\t}\n\terr := WalkDir(\".\", walker)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--batch-size\", argparse.Int, 12, \"Batch size.\")\nparser.AddArgument(\"--lr\", argparse.Float, 3e-4, \"Maximum learning rate\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--input\", argparse.String, \"input.txt\", \"Input file\")\nparser.AddArgument(\"--output\", argparse.String, \"output.txt\", \"Output file\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--bucket\", argparse.String, \"mybucket\", \"S3 bucket name\")\nparser.AddArgument(\"--region\", argparse.String, \"us-west-2\", \"AWS region\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--verbose\", argparse.Bool, false, \"Enable verbose mode\")\nparser.AddArgument(\"--debug\", argparse.Bool, false, \"Enable debug mode\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--num-epochs\", argparse.Int, 10, \"Number of training epochs\")\nparser.AddArgument(\"--lr\", argparse.Float, 0.001, \"Learning rate\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--input-dir\", argparse.String, \".\", \"Input directory\")\nparser.AddArgument(\"--output-dir\", argparse.String, \".\", \"Output directory\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--file\", argparse.String, \"data.txt\", \"Input file\")\nparser.AddArgument(\"--threshold\", argparse.Float, 0.5, \"Threshold value\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--host\", argparse.String, \"localhost\", \"Server host\")\nparser.AddArgument(\"--port\", argparse.Int, 8080, \"Server port\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--input\", argparse.String, \"input.txt\", \"Input file\")\nparser.AddArgument(\"--output\", argparse.String, \"output.txt\", \"Output file\")\nparser.AddArgument(\"--verbose\", argparse.Bool, false, \"Enable verbose mode\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--model\", argparse.String, \"model.pt\", \"Model file\")\nparser.AddArgument(\"--data-dir\", argparse.String, \".\", \"Data directory\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--input\", argparse.String, \"input.txt\", \"Input file\")\nparser.AddArgument(\"--output\", argparse.String, \"output.txt\", \"Output file\")\nparser.AddArgument(\"--mode\", argparse.String, \"default\", \"Execution mode\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--num-threads\", argparse.Int, 4, \"Number of threads\")\nparser.AddArgument(\"--max-iter\", argparse.Int, 1000, \"Maximum number of iterations\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--config\", argparse.String, \"config.json\", \"Config file\")\nparser.AddArgument(\"--verbose\", argparse.Bool, false, \"Enable verbose mode\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--input\", argparse.String, \"input.txt\", \"Input file\")\nparser.AddArgument(\"--output\", argparse.String, \"output.txt\", \"Output file\")\nparser.AddArgument(\"--format\", argparse.String, \"json\", \"Output format\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--input\", argparse.String, \"input.txt\", \"Input file\")\nparser.AddArgument(\"--output\", argparse.String, \"output.txt\", \"Output file\")\nparser.AddArgument(\"--mode\", argparse.String, \"default\", \"Execution mode\")\nparser.AddArgument(\"--verbose\", argparse.Bool, false, \"Enable verbose mode\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--input\", argparse.String, \"input.txt\", \"Input file\")\nparser.AddArgument(\"--output\", argparse.String, \"output.txt\", \"Output file\")\nparser.AddArgument(\"--mode\", argparse.String, \"default\", \"Execution mode\")\nparser.AddArgument(\"--verbose\", argparse.Bool, false, \"Enable verbose mode\")\nparser.AddArgument(\"--debug\", argparse.Bool, false, \"Enable debug mode\")\nparser.AddArgument(\"--num-threads\", argparse.Int, 4, \"Number of threads\")\nparser.AddArgument(\"--max-iter\", argparse.Int, 1000, \"Maximum number of iterations\")\nparser.AddArgument(\"--lr\", argparse.Float, 0.001, \"Learning rate\")\nparser.AddArgument(\"--threshold\", argparse.Float, 0.5, \"Threshold value\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--model\", argparse.String, \"model.pt\", \"Model file\")\nparser.AddArgument(\"--data-dir\", argparse.String, \".\", \"Data directory\")\nparser.AddArgument(\"--batch-size\", argparse.Int, 32, \"Batch size\")\nparser.AddArgument(\"--num-epochs\", argparse.Int, 10, \"Number of epochs\")\nparser.AddArgument(\"--lr\", argparse.Float, 0.001, \"Learning rate\")\nparser.AddArgument(\"--weight-decay\", argparse.Float, 0.001, \"Weight decay\")\nparser.AddArgument(\"--dropout\", argparse.Float, 0.5, \"Dropout rate\")\nparser.AddArgument(\"--mode\", argparse.String, \"train\", \"Execution mode\")\nparser.AddArgument(\"--verbose\", argparse.Bool, false, \"Enable verbose mode\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--input\", argparse.String, \"input.txt\", \"Input file\")\nparser.AddArgument(\"--output\", argparse.String, \"output.txt\", \"Output file\")\nparser.AddArgument(\"--config\", argparse.String, \"config.yaml\", \"Config file\")\nparser.AddArgument(\"--num-threads\", argparse.Int, 4, \"Number of threads\")\nparser.AddArgument(\"--max-iter\", argparse.Int, 1000, \"Maximum number of iterations\")\nparser.AddArgument(\"--lr\", argparse.Float, 0.001, \"Learning rate\")\nparser.AddArgument(\"--batch-size\", argparse.Int, 16, \"Batch size\")\nparser.AddArgument(\"--mode\", argparse.String, \"default\", \"Execution mode\")\nparser.AddArgument(\"--verbose\", argparse.Bool, false, \"Enable verbose mode\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--input\", argparse.String, \"input.txt\", \"Input file\")\nparser.AddArgument(\"--output\", argparse.String, \"output.txt\", \"Output file\")\nparser.AddArgument(\"--batch-size\", argparse.Int, 32, \"Batch size\")\nparser.AddArgument(\"--num-epochs\", argparse.Int, 10, \"Number of epochs\")\nparser.AddArgument(\"--lr\", argparse.Float, 0.001, \"Learning rate\")\nparser.AddArgument(\"--weight-decay\", argparse.Float, 0.001, \"Weight decay\")\nparser.AddArgument(\"--dropout\", argparse.Float, 0.5, \"Dropout rate\")\nparser.AddArgument(\"--mode\", argparse.String, \"train\", \"Execution mode\")\nparser.AddArgument(\"--verbose\", argparse.Bool, false, \"Enable verbose mode\")\nparser.AddArgument(\"--debug\", argparse.Bool, false, \"Enable debug mode\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--input\", argparse.String, \"input.txt\", \"Input file\")\nparser.AddArgument(\"--output\", argparse.String, \"output.txt\", \"Output file\")\nparser.AddArgument(\"--batch-size\", argparse.Int, 32, \"Batch size\")\nparser.AddArgument(\"--num-epochs\", argparse.Int, 10, \"Number of epochs\")\nparser.AddArgument(\"--lr\", argparse.Float, 0.001, \"Learning rate\")\nparser.AddArgument(\"--weight-decay\", argparse.Float, 0.001, \"Weight decay\")\nparser.AddArgument(\"--dropout\", argparse.Float, 0.5, \"Dropout rate\")\nparser.AddArgument(\"--mode\", argparse.String, \"train\", \"Execution mode\")\nparser.AddArgument(\"--verbose\", argparse.Bool, false, \"Enable verbose mode\")\nparser.AddArgument(\"--debug\", argparse.Bool, false, \"Enable debug mode\")\nparser.AddArgument(\"--gpu\", argparse.Bool, true, \"Enable GPU usage\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--input\", argparse.String, \"input.txt\", \"Input file\")\nparser.AddArgument(\"--output\", argparse.String, \"output.txt\", \"Output file\")\nparser.AddArgument(\"--config\", argparse.String, \"config.yaml\", \"Config file\")\nparser.AddArgument(\"--num-threads\", argparse.Int, 4, \"Number of threads\")\nparser.AddArgument(\"--max-iter\", argparse.Int, 1000, \"Maximum number of iterations\")\nparser.AddArgument(\"--lr\", argparse.Float, 0.001, \"Learning rate\")\nparser.AddArgument(\"--batch-size\", argparse.Int, 16, \"Batch size\")\nparser.AddArgument(\"--mode\", argparse.String, \"default\", \"Execution mode\")\nparser.AddArgument(\"--verbose\", argparse.Bool, false, \"Enable verbose mode\")\nparser.AddArgument(\"--debug\", argparse.Bool, false, \"Enable debug mode\")\nparser.AddArgument(\"--gpu\", argparse.Bool, true, \"Enable GPU usage\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--input\", argparse.String, \"input.txt\", \"Input file\")\nparser.AddArgument(\"--output\", argparse.String, \"output.txt\", \"Output file\")\nparser.AddArgument(\"--batch-size\", argparse.Int, 32, \"Batch size\")\nparser.AddArgument(\"--num-epochs\", argparse.Int, 10, \"Number of epochs\")\nparser.AddArgument(\"--lr\", argparse.Float, 0.001, \"Learning rate\")\nparser.AddArgument(\"--weight-decay\", argparse.Float, 0.001, \"Weight decay\")\nparser.AddArgument(\"--dropout\", argparse.Float, 0.5, \"Dropout rate\")\nparser.AddArgument(\"--mode\", argparse.String, \"train\", \"Execution mode\")\nparser.AddArgument(\"--verbose\", argparse.Bool, false, \"Enable verbose mode\")\nparser.AddArgument(\"--debug\", argparse.Bool, false, \"Enable debug mode\")\nparser.AddArgument(\"--gpu\", argparse.Bool, true, \"Enable GPU usage\")\nparser.AddArgument(\"--num-threads\", argparse.Int, 8, \"Number of threads\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--input\", argparse.String, \"input.txt\", \"Input file\")\nparser.AddArgument(\"--output\", argparse.String, \"output.txt\", \"Output file\")\nparser.AddArgument(\"--config\", argparse.String, \"config.yaml\", \"Config file\")\nparser.AddArgument(\"--num-threads\", argparse.Int, 4, \"Number of threads\")\nparser.AddArgument(\"--max-iter\", argparse.Int, 1000, \"Maximum number of iterations\")\nparser.AddArgument(\"--lr\", argparse.Float, 0.001, \"Learning rate\")\nparser.AddArgument(\"--batch-size\", argparse.Int, 16, \"Batch size\")\nparser.AddArgument(\"--mode\", argparse.String, \"default\", \"Execution mode\")\nparser.AddArgument(\"--verbose\", argparse.Bool, false, \"Enable verbose mode\")\nparser.AddArgument(\"--debug\", argparse.Bool, false, \"Enable debug mode\")\nparser.AddArgument(\"--gpu\", argparse.Bool, true, \"Enable GPU usage\")\nparser.AddArgument(\"--num-threads\", argparse.Int, 8, \"Number of threads\")\nparser.AddArgument(\"--log-file\", argparse.String, \"log.txt\", \"Log file\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--input\", argparse.String, \"input.txt\", \"Input file\")\nparser.AddArgument(\"--output\", argparse.String, \"output.txt\", \"Output file\")\nparser.AddArgument(\"--config\", argparse.String, \"config.yaml\", \"Config file\")\nparser.AddArgument(\"--num-threads\", argparse.Int, 4, \"Number of threads\")\nparser.AddArgument(\"--max-iter\", argparse.Int, 1000, \"Maximum number of iterations\")\nparser.AddArgument(\"--lr\", argparse.Float, 0.001, \"Learning rate\")\nparser.AddArgument(\"--batch-size\", argparse.Int, 16, \"Batch size\")\nparser.AddArgument(\"--mode\", argparse.String, \"default\", \"Execution mode\")\nparser.AddArgument(\"--verbose\", argparse.Bool, false, \"Enable verbose mode\")\nparser.AddArgument(\"--debug\", argparse.Bool, false, \"Enable debug mode\")\nparser.AddArgument(\"--gpu\", argparse.Bool, true, \"Enable GPU usage\")\nparser.AddArgument(\"--num-threads\", argparse.Int, 8, \"Number of threads\")\nparser.AddArgument(\"--log-file\", argparse.String, \"log.txt\", \"Log file\")\nparser.AddArgument(\"--timeout\", argparse.Duration, 5*time.Minute, \"Timeout duration\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--input\", argparse.String, \"input.txt\", \"Input file\")\nparser.AddArgument(\"--output\", argparse.String, \"output.txt\", \"Output file\")\nparser.AddArgument(\"--config\", argparse.String, \"config.yaml\", \"Config file\")\nparser.AddArgument(\"--num-threads\", argparse.Int, 4, \"Number of threads\")\nparser.AddArgument(\"--max-iter\", argparse.Int, 1000, \"Maximum number of iterations\")\nparser.AddArgument(\"--lr\", argparse.Float, 0.001, \"Learning rate\")\nparser.AddArgument(\"--batch-size\", argparse.Int, 16, \"Batch size\")\nparser.AddArgument(\"--mode\", argparse.String, \"default\", \"Execution mode\")\nparser.AddArgument(\"--verbose\", argparse.Bool, false, \"Enable verbose mode\")\nparser.AddArgument(\"--debug\", argparse.Bool, false, \"Enable debug mode\")\nparser.AddArgument(\"--gpu\", argparse.Bool, true, \"Enable GPU usage\")\nparser.AddArgument(\"--num-threads\", argparse.Int, 8, \"Number of threads\")\nparser.AddArgument(\"--log-file\", argparse.String, \"log.txt\", \"Log file\")\nparser.AddArgument(\"--timeout\", argparse.Duration, 5*time.Minute, \"Timeout duration\")\nparser.AddArgument(\"--retry\", argparse.Int, 3, \"Number of retries\")\n"
    },
    {
        "function": "parser := argparse.ArgumentParser()\nparser.AddArgument(\"--input\", argparse.String, \"input.txt\", \"Input file\")\nparser.AddArgument(\"--output\", argparse.String, \"output.txt\", \"Output file\")\nparser.AddArgument(\"--config\", argparse.String, \"config.yaml\", \"Config file\")\nparser.AddArgument(\"--num-threads\", argparse.Int, 4, \"Number of threads\")\nparser.AddArgument(\"--max-iter\", argparse.Int, 1000, \"Maximum number of iterations\")\nparser.AddArgument(\"--lr\", argparse.Float, 0.001, \"Learning rate\")\nparser.AddArgument(\"--batch-size\", argparse.Int, 16, \"Batch size\")\nparser.AddArgument(\"--mode\", argparse.String, \"default\", \"Execution mode\")\nparser.AddArgument(\"--verbose\", argparse.Bool, false, \"Enable verbose mode\")\nparser.AddArgument(\"--debug\", argparse.Bool, false, \"Enable debug mode\")\nparser.AddArgument(\"--gpu\", argparse.Bool, true, \"Enable GPU usage\")\nparser.AddArgument(\"--num-threads\", argparse.Int, 8, \"Number of threads\")\nparser.AddArgument(\"--log-file\", argparse.String, \"log.txt\", \"Log file\")\nparser.AddArgument(\"--timeout\", argparse.Duration, 5*time.Minute, \"Timeout duration\")\nparser.AddArgument(\"--retry\", argparse.Int, 3, \"Number of retries\")\nparser.AddArgument(\"--cache-size\", argparse.Int, 1024, \"Cache size\")\n"
    },
    {
        "function": "http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle root endpoint\n\tfmt.Fprint(w, \"Hello, World!\")\n})\n"
    },
    {
        "function": "http.HandleFunc(\"/users\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle users endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get users\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create user\")\n\t} else if r.Method == \"PUT\" {\n\t\t// Handle PUT request\n\t\tfmt.Fprint(w, \"Update user\")\n\t} else if r.Method == \"DELETE\" {\n\t\t// Handle DELETE request\n\t\tfmt.Fprint(w, \"Delete user\")\n\t}\n})\n"
    },
    {
        "function": "http.HandleFunc(\"/products\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle products endpoint\n\tswitch r.Method {\n\tcase \"GET\":\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get products\")\n\tcase \"POST\":\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create product\")\n\tcase \"PUT\":\n\t\t// Handle PUT request\n\t\tfmt.Fprint(w, \"Update product\")\n\tcase \"DELETE\":\n\t\t// Handle DELETE request\n\t\tfmt.Fprint(w, \"Delete product\")\n\t}\n})\n"
    },
    {
        "function": "http.HandleFunc(\"/items\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle items endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get items\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create item\")\n\t}\n})\n"
    },
    {
        "function": "http.HandleFunc(\"/orders\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle orders endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get orders\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create order\")\n\t}\n})\n"
    },
    {
        "function": "http.HandleFunc(\"/books\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle books endpoint\n\tswitch r.Method {\n\tcase \"GET\":\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get books\")\n\tcase \"POST\":\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create book\")\n\tcase \"PUT\":\n\t\t// Handle PUT request\n\t\tfmt.Fprint(w, \"Update book\")\n\tcase \"DELETE\":\n\t\t// Handle DELETE request\n\t\tfmt.Fprint(w, \"Delete book\")\n\t}\n})\n"
    },
    {
        "function": "http.HandleFunc(\"/api\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle API endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"API response\")\n\t}\n})\n"
    },
    {
        "function": "http.HandleFunc(\"/posts\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle posts endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get posts\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create post\")\n\t}\n})\n"
    },
    {
        "function": "http.HandleFunc(\"/messages\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle messages endpoint\n\tswitch r.Method {\n\tcase \"GET\":\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get messages\")\n\tcase \"POST\":\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create message\")\n\t}\n})\n"
    },
    {
        "function": "http.HandleFunc(\"/users\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle users endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get users\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create user\")\n\t}\n})\n"
    },
    {
        "function": "http.HandleFunc(\"/products\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle products endpoint\n\tswitch r.Method {\n\tcase \"GET\":\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get products\")\n\tcase \"POST\":\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create product\")\n\t}\n})\n"
    },
    {
        "function": "http.HandleFunc(\"/api\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle API endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"API response\")\n\t}\n})\n"
    },
    {
        "function": "http.HandleFunc(\"/orders\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle orders endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get orders\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create order\")\n\t}\n})\n"
    },
    {
        "function": "http.HandleFunc(\"/books\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle books endpoint\n\tswitch r.Method {\n\tcase \"GET\":\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get books\")\n\tcase \"POST\":\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create book\")\n\t}\n})\n"
    },
    {
        "function": "http.HandleFunc(\"/items\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle items endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get items\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create item\")\n\t}\n})\n"
    },
    {
        "function": "http.HandleFunc(\"/posts\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle posts endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get posts\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create post\")\n\t}\n})\n"
    },
    {
        "function": "http.HandleFunc(\"/messages\", func(w http.ResponseWriter, r *http.Request) {\n\t// Handle messages endpoint\n\tswitch r.Method {\n\tcase \"GET\":\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get messages\")\n\tcase \"POST\":\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create message\")\n\t}\n})\n"
    },
    {
        "function": "func main() {\n\thttp.HandleFunc(\"/\", handleRoot)\n\thttp.HandleFunc(\"/users\", handleUsers)\n\thttp.HandleFunc(\"/products\", handleProducts)\n\thttp.HandleFunc(\"/items\", handleItems)\n\thttp.HandleFunc(\"/orders\", handleOrders)\n\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc handleRoot(w http.ResponseWriter, r *http.Request) {\n\t// Handle root endpoint\n\tfmt.Fprint(w, \"Hello, World!\")\n}\n\nfunc handleUsers(w http.ResponseWriter, r *http.Request) {\n\t// Handle users endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get users\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create user\")\n\t}\n}\n\nfunc handleProducts(w http.ResponseWriter, r *http.Request) {\n\t// Handle products endpoint\n\tswitch r.Method {\n\tcase \"GET\":\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get products\")\n\tcase \"POST\":\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create product\")\n\t}\n}\n\nfunc handleItems(w http.ResponseWriter, r *http.Request) {\n\t// Handle items endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get items\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create item\")\n\t}\n}\n\nfunc handleOrders(w http.ResponseWriter, r *http.Request) {\n\t// Handle orders endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get orders\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create order\")\n\t}\n}\n"
    },
    {
        "function": "func main() {\n\thttp.HandleFunc(\"/\", handleRoot)\n\thttp.HandleFunc(\"/users\", handleUsers)\n\thttp.HandleFunc(\"/products\", handleProducts)\n\thttp.HandleFunc(\"/items\", handleItems)\n\thttp.HandleFunc(\"/orders\", handleOrders)\n\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc handleRoot(w http.ResponseWriter, r *http.Request) {\n\t// Handle root endpoint\n\tfmt.Fprint(w, \"Hello, World!\")\n}\n\nfunc handleUsers(w http.ResponseWriter, r *http.Request) {\n\t// Handle users endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get users\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create user\")\n\t} else {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n\nfunc handleProducts(w http.ResponseWriter, r *http.Request) {\n\t// Handle products endpoint\n\tswitch r.Method {\n\tcase \"GET\":\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get products\")\n\tcase \"POST\":\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create product\")\n\tdefault:\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n\nfunc handleItems(w http.ResponseWriter, r *http.Request) {\n\t// Handle items endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get items\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create item\")\n\t} else {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n\nfunc handleOrders(w http.ResponseWriter, r *http.Request) {\n\t// Handle orders endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get orders\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create order\")\n\t} else {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n"
    },
    {
        "function": "func main() {\n\thttp.HandleFunc(\"/\", handleRoot)\n\thttp.HandleFunc(\"/users\", handleUsers)\n\thttp.HandleFunc(\"/products\", handleProducts)\n\thttp.HandleFunc(\"/items\", handleItems)\n\thttp.HandleFunc(\"/orders\", handleOrders)\n\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc handleRoot(w http.ResponseWriter, r *http.Request) {\n\t// Handle root endpoint\n\tfmt.Fprint(w, \"Hello, World!\")\n}\n\nfunc handleUsers(w http.ResponseWriter, r *http.Request) {\n\t// Handle users endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get users\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create user\")\n\t} else {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n\nfunc handleProducts(w http.ResponseWriter, r *http.Request) {\n\t// Handle products endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get products\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create product\")\n\t} else {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n\nfunc handleItems(w http.ResponseWriter, r *http.Request) {\n\t// Handle items endpoint\n\tswitch r.Method {\n\tcase \"GET\":\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get items\")\n\tcase \"POST\":\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create item\")\n\tdefault:\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n\nfunc handleOrders(w http.ResponseWriter, r *http.Request) {\n\t// Handle orders endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get orders\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create order\")\n\t} else {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n"
    },
    {
        "function": "func main() {\n\thttp.HandleFunc(\"/\", handleRoot)\n\thttp.HandleFunc(\"/users\", handleUsers)\n\thttp.HandleFunc(\"/products\", handleProducts)\n\thttp.HandleFunc(\"/items\", handleItems)\n\thttp.HandleFunc(\"/orders\", handleOrders)\n\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc handleRoot(w http.ResponseWriter, r *http.Request) {\n\t// Handle root endpoint\n\tfmt.Fprint(w, \"Hello, World!\")\n}\n\nfunc handleUsers(w http.ResponseWriter, r *http.Request) {\n\t// Handle users endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get users\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create user\")\n\t} else {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n\nfunc handleProducts(w http.ResponseWriter, r *http.Request) {\n\t// Handle products endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get products\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create product\")\n\t} else {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n\nfunc handleItems(w http.ResponseWriter, r *http.Request) {\n\t// Handle items endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get items\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create item\")\n\t} else {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n\nfunc handleOrders(w http.ResponseWriter, r *http.Request) {\n\t// Handle orders endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get orders\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create order\")\n\t} else {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n"
    },
    {
        "function": "func main() {\n\thttp.HandleFunc(\"/\", handleRoot)\n\thttp.HandleFunc(\"/users\", handleUsers)\n\thttp.HandleFunc(\"/products\", handleProducts)\n\thttp.HandleFunc(\"/items\", handleItems)\n\thttp.HandleFunc(\"/orders\", handleOrders)\n\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc handleRoot(w http.ResponseWriter, r *http.Request) {\n\t// Handle root endpoint\n\tfmt.Fprint(w, \"Hello, World!\")\n}\n\nfunc handleUsers(w http.ResponseWriter, r *http.Request) {\n\t// Handle users endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get users\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create user\")\n\t} else {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n\nfunc handleProducts(w http.ResponseWriter, r *http.Request) {\n\t// Handle products endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get products\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create product\")\n\t} else {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n\nfunc handleItems(w http.ResponseWriter, r *http.Request) {\n\t// Handle items endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get items\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create item\")\n\t} else {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n\nfunc handleOrders(w http.ResponseWriter, r *http.Request) {\n\t// Handle orders endpoint\n\tif r.Method == \"GET\" {\n\t\t// Handle GET request\n\t\tfmt.Fprint(w, \"Get orders\")\n\t} else if r.Method == \"POST\" {\n\t\t// Handle POST request\n\t\tfmt.Fprint(w, \"Create order\")\n\t} else {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n"
    },
    {
        "function": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\ntype Book struct {\n\tID     string `json:\"id,omitempty\"`\n\tTitle  string `json:\"title,omitempty\"`\n\tAuthor string `json:\"author,omitempty\"`\n}\n\nvar books []Book\n\nfunc main() {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"/books\", GetBooks).Methods(\"GET\")\n\trouter.HandleFunc(\"/books/{id}\", GetBook).Methods(\"GET\")\n\thttp.ListenAndServe(\":8000\", router)\n}\n\nfunc GetBooks(w http.ResponseWriter, r *http.Request) {\n\tjson.NewEncoder(w).Encode(books)\n}\n\nfunc GetBook(w http.ResponseWriter, r *http.Request) {\n\tparams := mux.Vars(r)\n\tfor _, item := range books {\n\t\tif item.ID == params[\"id\"] {\n\t\t\tjson.NewEncoder(w).Encode(item)\n\t\t\treturn\n\t\t}\n\t}\n\tjson.NewEncoder(w).Encode(&Book{})\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"encoding/json\"\n\t\"github.com/gorilla/mux\"\n)\n\ntype Item struct {\n\tID   string `json:\"id,omitempty\"`\n\tName string `json:\"name,omitempty\"`\n}\n\nvar items []Item\n\nfunc main() {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"/items\", GetItems).Methods(\"GET\")\n\trouter.HandleFunc(\"/items/{id}\", GetItem).Methods(\"GET\")\n\trouter.HandleFunc(\"/items\", CreateItem).Methods(\"POST\")\n\trouter.HandleFunc(\"/items/{id}\", DeleteItem).Methods(\"DELETE\")\n\tlog.Fatal(http.ListenAndServe(\":8000\", router))\n}\n\nfunc GetItems(w http.ResponseWriter, r *http.Request) {\n\tjson.NewEncoder(w).Encode(items)\n}\n\nfunc GetItem(w http.ResponseWriter, r *http.Request) {\n\tparams := mux.Vars(r)\n\tfor _, item := range items {\n\t\tif item.ID == params[\"id\"] {\n\t\t\tjson.NewEncoder(w).Encode(item)\n\t\t\treturn\n\t\t}\n\t}\n\tjson.NewEncoder(w).Encode(&Item{})\n}\n\nfunc CreateItem(w http.ResponseWriter, r *http.Request) {\n\tvar item Item\n\t_ = json.NewDecoder(r.Body).Decode(&item)\n\titems = append(items, item)\n\tjson.NewEncoder(w).Encode(items)\n}\n\nfunc DeleteItem(w http.ResponseWriter, r *http.Request) {\n\tparams := mux.Vars(r)\n\tfor index, item := range items {\n\t\tif item.ID == params[\"id\"] {\n\t\t\titems = append(items[:index], items[index+1:]...)\n\t\t\tbreak\n\t\t}\n\t}\n\tjson.NewEncoder(w).Encode(items)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\ntype User struct {\n\tID   string `json:\"id,omitempty\"`\n\tName string `json:\"name,omitempty\"`\n}\n\nfunc main() {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"/users\", GetUsers).Methods(\"GET\")\n\thttp.ListenAndServe(\":8000\", router)\n}\n\nfunc GetUsers(w http.ResponseWriter, r *http.Request) {\n\tusers := []User{{ID: \"1\", Name: \"John Doe\"}}\n\tjson.NewEncoder(w).Encode(users)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\ntype Product struct {\n\tID    string `json:\"id,omitempty\"`\n\tName  string `json:\"name,omitempty\"`\n\tPrice float64 `json:\"price,omitempty\"`\n}\n\nfunc main() {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"/products\", GetProducts).Methods(\"GET\")\n\thttp.ListenAndServe(\":8000\", router)\n}\n\nfunc GetProducts(w http.ResponseWriter, r *http.Request) {\n\tproducts := []Product{{ID: \"1\", Name: \"Product1\", Price: 19.99}}\n\tjson.NewEncoder(w).Encode(products)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\ntype Task struct {\n\tID   string `json:\"id,omitempty\"`\n\tName string `json:\"name,omitempty\"`\n}\n\nfunc main() {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"/tasks\", GetTasks).Methods(\"GET\")\n\thttp.ListenAndServe(\":8000\", router)\n}\n\nfunc GetTasks(w http.ResponseWriter, r *http.Request) {\n\ttasks := []Task{{ID: \"1\", Name: \"Task1\"}}\n\tjson.NewEncoder(w).Encode(tasks)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\ntype User struct {\n\tID   string `json:\"id,omitempty\"`\n\tName string `json:\"name,omitempty\"`\n}\n\nfunc main() {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"/users\", GetUsers).Methods(\"GET\")\n\thttp.ListenAndServe(\":8000\", router)\n}\n\nfunc GetUsers(w http.ResponseWriter, r *http.Request) {\n\tusers := []User{{ID: \"1\", Name: \"John Doe\"}}\n\tjson.NewEncoder(w).Encode(users)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\ntype Product struct {\n\tID    string `json:\"id,omitempty\"`\n\tName  string `json:\"name,omitempty\"`\n\tPrice float64 `json:\"price,omitempty\"`\n}\n\nfunc main() {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"/products\", GetProducts).Methods(\"GET\")\n\thttp.ListenAndServe(\":8000\", router)\n}\n\nfunc GetProducts(w http.ResponseWriter, r *http.Request) {\n\tproducts := []Product{{ID: \"1\", Name: \"Product1\", Price: 19.99}}\n\tjson.NewEncoder(w).Encode(products)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\ntype Task struct {\n\tID   string `json:\"id,omitempty\"`\n\tName string `json:\"name,omitempty\"`\n}\n\nfunc main() {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"/tasks\", GetTasks).Methods(\"GET\")\n\thttp.ListenAndServe(\":8000\", router)\n}\n\nfunc GetTasks(w http.ResponseWriter, r *http.Request) {\n\ttasks := []Task{{ID: \"1\", Name: \"Task1\"}}\n\tjson.NewEncoder(w).Encode(tasks)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\ntype Order struct {\n\tID    string `json:\"id,omitempty\"`\n\tTotal float64 `json:\"total,omitempty\"`\n}\n\nfunc main() {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"/orders\", GetOrders).Methods(\"GET\")\n\thttp.ListenAndServe(\":8000\", router)\n}\n\nfunc GetOrders(w http.ResponseWriter, r *http.Request) {\n\torders := []Order{{ID: \"1\", Total: 59.99}}\n\tjson.NewEncoder(w).Encode(orders)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\ntype Customer struct {\n\tID   string `json:\"id,omitempty\"`\n\tName string `json:\"name,omitempty\"`\n}\n\nfunc main() {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"/customers\", GetCustomers).Methods(\"GET\")\n\thttp.ListenAndServe(\":8000\", router)\n}\n\nfunc GetCustomers(w http.ResponseWriter, r *http.Request) {\n\tcustomers := []Customer{{ID: \"1\", Name: \"Jane Doe\"}}\n\tjson.NewEncoder(w).Encode(customers)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\ntype Book struct {\n\tID     string `json:\"id,omitempty\"`\n\tTitle  string `json:\"title,omitempty\"`\n\tAuthor string `json:\"author,omitempty\"`\n}\n\nfunc main() {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"/books\", GetBooks).Methods(\"GET\")\n\thttp.ListenAndServe(\":8000\", router)\n}\n\nfunc GetBooks(w http.ResponseWriter, r *http.Request) {\n\tbooks := []Book{{ID: \"1\", Title: \"Book1\", Author: \"Author1\"}}\n\tjson.NewEncoder(w).Encode(books)\n}"
    },
    {
      "function": "package main\n\nimport \"math/rand\"\n\nfunc main() {\n\tfmt.Println(RandomInt())\n}\n\nfunc RandomInt() int {\n\treturn rand.Intn(100)\n}"
  },
  {
      "function": "package main\n\nfunc main() {\n\tresult := AddNumbers(5, 7)\n\tfmt.Println(result)\n}\n\nfunc AddNumbers(a, b int) int {\n\treturn a + b\n}"
  },
  {
      "function": "package main\n\nimport \"time\"\n\nfunc main() {\n\tPrintTime()\n}\n\nfunc PrintTime() {\n\tfmt.Println(time.Now())\n}"
  },
  {
      "function": "package main\n\nfunc main() {\n\tstr := \"Hello, World\"\n\tPrintLength(str)\n}\n\nfunc PrintLength(s string) {\n\tfmt.Println(len(s))\n}"
  },
  {
      "function": "package main\n\nimport \"os\"\n\nfunc main() {\n\targs := os.Args\n\tPrintArgs(args)\n}\n\nfunc PrintArgs(args []string) {\n\tfor i := range args {\n\t\tfmt.Println(args[i])\n\t}\n}"
  },
  {
      "function": "package main\n\nfunc main() {\n\tdata := []byte(\"Hello, World!\")\n\tWriteFile(data, \"example.txt\")\n}\n\nfunc WriteFile(data []byte, filename string) {\n\tioutil.WriteFile(filename, data, 0644)\n}"
  },
  {
      "function": "package main\n\nimport \"os\"\n\nfunc main() {\n\tPrintEnv()\n}\n\nfunc PrintEnv() {\n\tfor _, env := range os.Environ() {\n\t\tfmt.Println(env)\n\t}\n}"
  },
  {
      "function": "package main\n\nimport \"net/http\"\n\nfunc main() {\n\tresp, _ := http.Get(\"http://example.com\")\n\tPrintStatusCode(resp)\n}\n\nfunc PrintStatusCode(resp *http.Response) {\n\tfmt.Println(resp.StatusCode)\n}"
  },
  {
      "function": "package main\n\nimport \"sync\"\n\nvar wg sync.WaitGroup\n\nfunc main() {\n\twg.Add(2)\n\tgo PrintHi()\n\tgo PrintBye()\n\twg.Wait()\n}\n\nfunc PrintHi() {\n\tfmt.Println(\"Hi!\")\n\twg.Done()\n}\n\nfunc PrintBye() {\n\tfmt.Println(\"Bye!\")\n\twg.Done()\n}"
  },
  {
      "function": "package main\n\nimport \"sort\"\n\nfunc main() {\n\tlist := []string{\"banana\", \"apple\", \"kiwi\"}\n\tSortStrings(list)\n\tfmt.Println(list)\n}\n\nfunc SortStrings(s []string) {\n\tsort.Strings(s)\n}"
  },
  {
      "function": "package main\n\nimport \"strconv\"\n\nfunc main() {\n\tstr := \"42\"\n\tresult, _ := ParseInt(str)\n\tfmt.Println(result)\n}\n\nfunc ParseInt(s string) (int, error) {\n\treturn strconv.Atoi(s)\n}"
  },
  {
      "function": "package main\n\nimport \"io/ioutil\"\n\nfunc main() {\n\tcontent, _ := ReadFile(\"example.txt\")\n\tfmt.Println(content)\n}\n\nfunc ReadFile(filename string) ([]byte, error) {\n\treturn ioutil.ReadFile(filename)\n}"
  },
  {
      "function": "package main\n\nfunc main() {\n\tstr := \"Hello, World!\"\n\tReverseString(str)\n}\n\nfunc ReverseString(s string) string {\n\treturn string([]rune(s))\n}"
  },
  {
      "function": "package main\n\nfunc main() {\n\tStartGoroutine()\n\ttime.Sleep(2 * time.Second)\n}\n\nfunc StartGoroutine() {\n\tgo func() {\n\t\tfmt.Println(\"Hello from goroutine\")\n\t}()\n}"
  },
  {
      "function": "package main\n\nimport \"sort\"\n\nfunc main() {\n\tnumbers := []int{5, 3, 8, 1}\n\tSortInts(numbers)\n\tfmt.Println(numbers)\n}\n\nfunc SortInts(nums []int) {\n\tsort.Ints(nums)\n}"
  },
  {
      "function": "package main\n\nfunc main() {\n\tnumbers := []int{5, 8, 3, 1}\n\tSum := SumNumbers(numbers)\n\tfmt.Println(Sum)\n}\n\nfunc SumNumbers(numbers []int) int {\n\tsum := 0\n\tfor _, num := range numbers {\n\t\tsum += num\n\t}\n\treturn sum\n}"
  },
  {
      "function": "package main\n\nimport \"os\"\n\nfunc main() {\n\tos.Exit(1)\n}"
  },
  {
      "function": "package main\n\nimport \"strconv\"\n\nfunc main() {\n\tnum := 42\n\tstr := IntToString(num)\n\tfmt.Println(str)\n}\n\nfunc IntToString(num int) string {\n\treturn strconv.Itoa(num)\n}"
  },
  {
      "function": "package main\n\nimport \"path/filepath\"\n\nfunc main() {\n\tfiles, _ := filepath.Glob(\"*.txt\")\n\tfmt.Println(files)\n}"
  },
  {
      "function": "package main\n\nimport \"time\"\n\nfunc main() {\n\tstart := time.Now()\n\ttime.Sleep(2 * time.Second)\n\telapsed := time.Since(start)\n\tfmt.Println(elapsed)\n}"
  },
  {
      "function": "package main\n\nimport \"os\"\n\nfunc main() {\n\tfilename := \"example.txt\"\n\tos.Remove(filename)\n}"
  },
  {
      "function": "package main\n\nfunc main() {\n\tc := make(chan string)\n\tgo SayHello(c)\n\tmessage := <-c\n\tfmt.Println(message)\n}\n\nfunc SayHello(c chan string) {\n\tc <- \"Hello, World!\"\n}"
  },
  {
      "function": "package main\n\nimport \"os\"\n\nfunc main() {\n\tfmt.Println(os.Getwd())\n}"
  },
  {
      "function": "package main\n\nimport \"strings\"\n\nfunc main() {\n\tstr := \"Hello, World!\"\n\tfmt.Println(strings.Contains(str, \"World\"))\n}"
  },
  {
      "function": "package main\n\nfunc main() {\n\tm := make(map[string]int)\n\tm[\"Answer\"] = 42\n\tfmt.Println(m[\"Answer\"])\n}"
  },
  {
      "function": "package main\n\nfunc main() {\n\tfmt.Println(isEqual(2, 2))\n}\n\nfunc isEqual(x, y int) bool {\n\treturn x == y\n}"
  },
  {
      "function": "package main\n\nfunc main() {\n\tfmt.Println(GetGreatest(4, 7, 2))\n}\n\nfunc GetGreatest(nums ...int) int {\n\tgreatest := nums[0]\n\tfor _, num := range nums {\n\t\tif num > greatest {\n\t\t\tgreatest = num\n\t\t}\n\t}\n\treturn greatest\n}"
  },
  {
      "function": "package main\n\nfunc main() {\n\tswitchDemo(1)\n}\n\nfunc switchDemo(i int) {\n\tswitch i {\n\tcase 0:\n\t\tfmt.Println(\"Zero\")\n\tcase 1:\n\t\tfmt.Println(\"One\")\n\tdefault:\n\t\tfmt.Println(\"Unknown\")\n\t}\n}"
  },
  {
      "function": "package main\n\nfunc main() {\n\tlist := []int{1, 2, 3, 4, 5}\n\tprintSlice(list)\n}\n\nfunc printSlice(s []int) {\n\tfor _, v := range s {\n\t\tfmt.Println(v)\n\t}\n}"
  },
  {
      "function": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tresult := Fibonacci(5)\n\tfmt.Println(result)\n}\n\nfunc Fibonacci(n int) int {\n\tif n <= 1 {\n\t\treturn n\n\t}\n\treturn Fibonacci(n-1) + Fibonacci(n-2)\n}"
  },
  {
      "function": "package main\n\nimport \"strings\"\n\nfunc main() {\n\tstr := \"Hello, World!\"\n\tresult := CountWords(str)\n\tfmt.Println(result)\n}\n\nfunc CountWords(s string) int {\n\treturn len(strings.Fields(s))\n}"
  },
  {
      "function": "package main\n\nfunc main() {\n\tresult := Average([]float64{1.2, 2.3, 3.4, 4.5, 5.6})\n\tfmt.Println(result)\n}\n\nfunc Average(xs []float64) float64 {\n\ttotal := 0.0\n\tfor _, v := range xs {\n\t\ttotal += v\n\t}\n\treturn total / float64(len(xs))\n}"
  },
  {
      "function": "package main\n\nfunc main() {\n\tresult := Factorial(5)\n\tfmt.Println(result)\n}\n\nfunc Factorial(n int) int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n * Factorial(n-1)\n}"
  },
  {
      "function": "package main\n\nimport \"os\"\n\nfunc main() {\n\tuser := os.Getenv(\"USER\")\n\tfmt.Println(user)\n}"
  },
  {
      "function": "package main\n\nimport \"math\"\n\nfunc main() {\n\tfmt.Println(Power(2, 3))\n}\n\nfunc Power(x, n float64) float64 {\n\treturn math.Pow(x, n)\n}"
  },
  {
      "function": "package main\n\nfunc main() {\n\tfmt.Println(IsEven(4))\n}\n\nfunc IsEven(n int) bool {\n\treturn n%2 == 0\n}"
  },
  {
      "function": "package main\n\nimport \"math/rand\"\n\nfunc main() {\n\tPrintRandomNumber()\n}\n\nfunc PrintRandomNumber() {\n\tfmt.Println(rand.Intn(100))\n}"
  },
  {
      "function": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tresult := Max(4, 7)\n\tfmt.Println(result)\n}\n\nfunc Max(x, y int) int {\n\tif x > y {\n\t\treturn x\n\t}\n\treturn y\n}"
  },
  {
      "function": "package main\n\nimport \"time\"\n\nfunc main() {\n\tfmt.Println(FormatTime(time.Now()))\n}\n\nfunc FormatTime(t time.Time) string {\n\treturn t.Format(time.RFC3339)\n}"
  },
  {
      "function": "package main\n\nimport \"os\"\n\nfunc main() {\n\tCheckFileExists(\"example.txt\")\n}\n\nfunc CheckFileExists(path string) bool {\n\t_, err := os.Stat(path)\n\treturn !os.IsNotExist(err)\n}"
  },
  {
      "function": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tPrintSquare(5)\n}\n\nfunc PrintSquare(n int) {\n\tfmt.Println(n * n)\n}"
  },
  {
      "function": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tPrintPrimeNumbers(20)\n}\n\nfunc PrintPrimeNumbers(n int) {\n\tnext:\n\tfor i := 2; i <= n; i++ {\n\t\tfor j := 2; j < i; j++ {\n\t\t\tif i%j == 0 {\n\t\t\t\tcontinue next\n\t\t\t}\n\t\t}\n\t\tfmt.Println(i)\n\t}\n}"
  },
  {
      "function": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tresult := Sum(1, 2, 3, 4, 5)\n\tfmt.Println(result)\n}\n\nfunc Sum(nums ...int) int {\n\ttotal := 0\n\tfor _, num := range nums {\n\t\ttotal += num\n\t}\n\treturn total\n}"
  },
  {
      "function": "package main\n\nimport \"time\"\n\nfunc main() {\n\tfmt.Println(CurrentTime())\n}\n\nfunc CurrentTime() string {\n\treturn time.Now().Format(\"2006-01-02 15:04:05\")\n}"
  },
  {
      "function": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tPrintDivisors(100)\n}\n\nfunc PrintDivisors(n int) {\n\tfor i := 1; i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\tfmt.Println(i)\n\t\t}\n\t}\n}"
  },
  {
      "function": "package main\n\nfunc main() {\n\tresult := Cube(5)\n\tfmt.Println(result)\n}\n\nfunc Cube(n int) int {\n\treturn n * n * n\n}"
  },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tfmt.Println(\"Hello, World!\")\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintHelloWorld()\n}\n\n// Function to print hello world\nfunc PrintHelloWorld() {\n\tfmt.Println(\"Hello, World!\")\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tfmt.Println(AddTwoNumbers(2, 3))\n}\n\n// Function to add two numbers\nfunc AddTwoNumbers(a, b int) int {\n\treturn a + b\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tfmt.Println(MultiplyTwoNumbers(4, 5))\n}\n\n// Function to multiply two numbers\nfunc MultiplyTwoNumbers(a, b int) int {\n\treturn a * b\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintFibonacciSeries(10)\n}\n\n// Function to print Fibonacci series\nfunc PrintFibonacciSeries(n int) {\n\ta, b := 0, 1\n\tfor i := 0; i < n; i++ {\n\t\tfmt.Println(a)\n\t\ta, b = b, a+b\n\t}\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tfmt.Println(GenerateFactorial(5))\n}\n\n// Function to generate factorial of a number\nfunc GenerateFactorial(n int) int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n * GenerateFactorial(n-1)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintEvenNumbersUpToN(20)\n}\n\n// Function to print even numbers up to n\nfunc PrintEvenNumbersUpToN(n int) {\n\tfor i := 0; i <= n; i += 2 {\n\t\tfmt.Println(i)\n\t}\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tfmt.Println(IsPrime(29))\n}\n\n// Function to check if a number is prime\nfunc IsPrime(n int) bool {\n\tfor i := 2; i < n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tfmt.Println(FindGCD(48, 18))\n}\n\n// Function to find the Greatest Common Divisor (GCD)\nfunc FindGCD(a, b int) int {\n\tfor b != 0 {\n\t\ta, b = b, a%b\n\t}\n\treturn a\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintHello(\"Go\")\n}\n\n// Function to print hello followed by a string\nfunc PrintHello(s string) {\n\tfmt.Println(\"Hello\", s)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tfmt.Println(ComputePower(2, 3))\n}\n\n// Function to compute power of a number\nfunc ComputePower(base, exponent int) int {\n\tresult := 1\n\tfor i := 0; i < exponent; i++ {\n\t\tresult *= base\n\t}\n\treturn result\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintTriangle(5)\n}\n\n// Function to print a triangle of '*'\nfunc PrintTriangle(n int) {\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j <= i; j++ {\n\t\t\tfmt.Print(\"*\")\n\t\t}\n\t\tfmt.Println()\n\t}\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tfmt.Println(AreNumbersEqual(5, 5))\n}\n\n// Function to check if two numbers are equal\nfunc AreNumbersEqual(a, b int) bool {\n\treturn a == b\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintTableOfNumber(5)\n}\n\n// Function to print the multiplication table of a number\nfunc PrintTableOfNumber(n int) {\n\tfor i := 1; i <= 10; i++ {\n\t\tfmt.Printf(\"%d * %d = %d\\n\", n, i, n*i)\n\t}\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tfmt.Println(IsLeapYear(2020))\n}\n\n// Function to check if a year is leap or not\nfunc IsLeapYear(year int) bool {\n\treturn year%4 == 0 && (year%100 != 0 || year%400 == 0)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintSumOfArray([]int{1, 2, 3, 4, 5})\n}\n\n// Function to print the sum of elements in an array\nfunc PrintSumOfArray(arr []int) {\n\tsum := 0\n\tfor _, value := range arr {\n\t\tsum += value\n\t}\n\tfmt.Println(sum)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintArrayInReverse([]int{1, 2, 3, 4, 5})\n}\n\n// Function to print the array in reverse order\nfunc PrintArrayInReverse(arr []int) {\n\tfor i := len(arr) - 1; i >= 0; i-- {\n\t\tfmt.Println(arr[i])\n\t}\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintSquareOfNumber(5)\n}\n\n// Function to print the square of a number\nfunc PrintSquareOfNumber(n int) {\n\tfmt.Println(n * n)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintCubeOfNumber(3)\n}\n\n// Function to print the cube of a number\nfunc PrintCubeOfNumber(n int) {\n\tfmt.Println(n * n * n)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tfmt.Println(ConcatenateStrings(\"Hello, \", \"World!\"))\n}\n\n// Function to concatenate two strings\nfunc ConcatenateStrings(s1, s2 string) string {\n\treturn s1 + s2\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintDiamond(5)\n}\n\n// Function to print a diamond of '*'\nfunc PrintDiamond(n int) {\n\tfor i := 1; i <= n; i++ {\n\t\tfor j := 1; j <= n-i; j++ {\n\t\t\tfmt.Print(\" \")\n\t\t}\n\t\tfor k := 1; k <= 2*i-1; k++ {\n\t\t\tfmt.Print(\"*\")\n\t\t}\n\t\tfmt.Println()\n\t}\n\tfor i := n-1; i >= 1; i-- {\n\t\tfor j := 1; j <= n-i; j++ {\n\t\t\tfmt.Print(\" \")\n\t\t}\n\t\tfor k := 1; k <= 2*i-1; k++ {\n\t\t\tfmt.Print(\"*\")\n\t\t}\n\t\tfmt.Println()\n\t}\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tfmt.Println(ComputeAverage([]float64{1.2, 2.3, 3.4, 4.5, 5.6}))\n}\n\n// Function to compute average of an array\nfunc ComputeAverage(arr []float64) float64 {\n\tsum := 0.0\n\tfor _, value := range arr {\n\t\tsum += value\n\t}\n\treturn sum / float64(len(arr))\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintHelloNtimes(\"Hello, World!\", 5)\n}\n\n// Function to print a string n times\nfunc PrintHelloNtimes(s string, n int) {\n\tfor i := 0; i < n; i++ {\n\t\tfmt.Println(s)\n\t}\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tfmt.Println(CountDigits(12345))\n}\n\n// Function to count the number of digits in a number\nfunc CountDigits(n int) int {\n\tcount := 0\n\tfor n != 0 {\n\t\tn /= 10\n\t\tcount++\n\t}\n\treturn count\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tSwapTwoNumbers(5, 10)\n}\n\n// Function to swap two numbers\nfunc SwapTwoNumbers(a, b int) {\n\tfmt.Printf(\"Before swapping: a = %d, b = %d\\n\", a, b)\n\ta, b = b, a\n\tfmt.Printf(\"After swapping: a = %d, b = %d\\n\", a, b)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintRectangle(5, 3)\n}\n\n// Function to print a rectangle of '*'\nfunc PrintRectangle(width, height int) {\n\tfor i := 0; i < height; i++ {\n\t\tfor j := 0; j < width; j++ {\n\t\t\tfmt.Print(\"*\")\n\t\t}\n\t\tfmt.Println()\n\t}\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintSquareRoot(25)\n}\n\n// Function to print the square root of a number\nfunc PrintSquareRoot(n float64) {\n\tfmt.Println(math.Sqrt(n))\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintCubeRoot(27)\n}\n\n// Function to print the cube root of a number\nfunc PrintCubeRoot(n float64) {\n\tfmt.Println(math.Cbrt(n))\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintStringLength(\"Hello, World!\")\n}\n\n// Function to print the length of a string\nfunc PrintStringLength(s string) {\n\tfmt.Println(len(s))\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintNumberInBinary(10)\n}\n\n// Function to print the binary representation of a number\nfunc PrintNumberInBinary(n int) {\n\tfmt.Printf(\"%b\\n\", n)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintNumberInHexadecimal(255)\n}\n\n// Function to print the hexadecimal representation of a number\nfunc PrintNumberInHexadecimal(n int) {\n\tfmt.Printf(\"%x\\n\", n)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintNumberInOctal(8)\n}\n\n// Function to print the octal representation of a number\nfunc PrintNumberInOctal(n int) {\n\tfmt.Printf(\"%o\\n\", n)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintNumbersInAscendingOrder([]int{5, 2, 8, 6, 1, 9, 3, 7, 4})\n}\n\n// Function to print numbers in ascending order\nfunc PrintNumbersInAscendingOrder(arr []int) {\n\tsort.Ints(arr)\n\tfmt.Println(arr)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintNumbersInDescendingOrder([]int{5, 2, 8, 6, 1, 9, 3, 7, 4})\n}\n\n// Function to print numbers in descending order\nfunc PrintNumbersInDescendingOrder(arr []int) {\n\tsort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\tfmt.Println(arr)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintSumOfDigits(12345)\n}\n\n// Function to print the sum of digits in a number\nfunc PrintSumOfDigits(n int) {\n\tsum := 0\n\tfor n != 0 {\n\t\tsum += n % 10\n\t\tn /= 10\n\t}\n\tfmt.Println(sum)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintPalindromeCheck(\"madam\")\n}\n\n// Function to check if a string is palindrome or not\nfunc PrintPalindromeCheck(s string) {\n\tfmt.Println(s == ReverseString(s))\n}\n\n// Helper function to reverse a string\nfunc ReverseString(s string) string {\n\tchars := []rune(s)\n\tfor i, j := 0, len(chars)-1; i < j; i, j = i+1, j-1 {\n\t\tchars[i], chars[j] = chars[j], chars[i]\n\t}\n\treturn string(chars)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintCharacterCount(\"Hello, World!\")\n}\n\n// Function to print the count of each character in a string\nfunc PrintCharacterCount(s string) {\n\tcount := make(map[rune]int)\n\tfor _, char := range s {\n\t\tcount[char]++\n\t}\n\tfor char, count := range count {\n\t\tfmt.Printf(\"%c: %d\\n\", char, count)\n\t}\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintAreaOfCircle(5)\n}\n\n// Function to print the area of a circle\nfunc PrintAreaOfCircle(radius float64) {\n\tfmt.Println(math.Pi * radius * radius)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintPerimeterOfRectangle(5, 10)\n}\n\n// Function to print the perimeter of a rectangle\nfunc PrintPerimeterOfRectangle(length, width float64) {\n\tfmt.Println(2 * (length + width))\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintAreaOfRectangle(5, 10)\n}\n\n// Function to print the area of a rectangle\nfunc PrintAreaOfRectangle(length, width float64) {\n\tfmt.Println(length * width)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintPerimeterOfSquare(5)\n}\n\n// Function to print the perimeter of a square\nfunc PrintPerimeterOfSquare(side float64) {\n\tfmt.Println(4 * side)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintAreaOfSquare(5)\n}\n\n// Function to print the area of a square\nfunc PrintAreaOfSquare(side float64) {\n\tfmt.Println(side * side)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintPerimeterOfCircle(5)\n}\n\n// Function to print the perimeter of a circle\nfunc PrintPerimeterOfCircle(radius float64) {\n\tfmt.Println(2 * math.Pi * radius)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintFibonacciSeries(10)\n}\n\n// Function to print the Fibonacci series\nfunc PrintFibonacciSeries(n int) {\n\tfirst, second := 0, 1\n\tfor i := 0; i < n; i++ {\n\t\tfmt.Println(first)\n\t\tfirst, second = second, first+second\n\t}\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintIsNumberEven(10)\n}\n\n// Function to check if a number is even\nfunc PrintIsNumberEven(n int) {\n\tfmt.Println(n%2 == 0)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintIsNumberOdd(11)\n}\n\n// Function to check if a number is odd\nfunc PrintIsNumberOdd(n int) {\n\tfmt.Println(n%2 != 0)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintIsNumberPrime(7)\n}\n\n// Function to check if a number is prime\nfunc PrintIsNumberPrime(n int) {\n\tif n <= 1 {\n\t\tfmt.Println(false)\n\t\treturn\n\t}\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\tfmt.Println(false)\n\t\t\treturn\n\t\t}\n\t}\n\tfmt.Println(true)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintIsNumberDivisibleBy(10, 5)\n}\n\n// Function to check if a number is divisible by another number\nfunc PrintIsNumberDivisibleBy(n, m int) {\n\tfmt.Println(n%m == 0)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintFactorial(5)\n}\n\n// Function to print the factorial of a number\nfunc PrintFactorial(n int) {\n\tresult := 1\n\tfor i := 2; i <= n; i++ {\n\t\tresult *= i\n\t}\n\tfmt.Println(result)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintSumOfArray([]int{1, 2, 3, 4, 5})\n}\n\n// Function to print the sum of elements in an array\nfunc PrintSumOfArray(arr []int) {\n\tsum := 0\n\tfor _, value := range arr {\n\t\tsum += value\n\t}\n\tfmt.Println(sum)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintSumOfSquaresOfArray([]int{1, 2, 3, 4, 5})\n}\n\n// Function to print the sum of squares of elements in an array\nfunc PrintSumOfSquaresOfArray(arr []int) {\n\tsum := 0\n\tfor _, value := range arr {\n\t\tsum += value * value\n\t}\n\tfmt.Println(sum)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintSumOfCubesOfArray([]int{1, 2, 3, 4, 5})\n}\n\n// Function to print the sum of cubes of elements in an array\nfunc PrintSumOfCubesOfArray(arr []int) {\n\tsum := 0\n\tfor _, value := range arr {\n\t\tsum += value * value * value\n\t}\n\tfmt.Println(sum)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintSumOfEvenNumbersInArray([]int{1, 2, 3, 4, 5})\n}\n\n// Function to print the sum of even numbers in an array\nfunc PrintSumOfEvenNumbersInArray(arr []int) {\n\tsum := 0\n\tfor _, value := range arr {\n\t\tif value%2 == 0 {\n\t\t\tsum += value\n\t\t}\n\t}\n\tfmt.Println(sum)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintSumOfOddNumbersInArray([]int{1, 2, 3, 4, 5})\n}\n\n// Function to print the sum of odd numbers in an array\nfunc PrintSumOfOddNumbersInArray(arr []int) {\n\tsum := 0\n\tfor _, value := range arr {\n\t\tif value%2 != 0 {\n\t\t\tsum += value\n\t\t}\n\t}\n\tfmt.Println(sum)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintMaxOfArray([]int{1, 2, 3, 4, 5})\n}\n\n// Function to print the maximum element in an array\nfunc PrintMaxOfArray(arr []int) {\n\tmax := arr[0]\n\tfor _, value := range arr {\n\t\tif value > max {\n\t\t\tmax = value\n\t\t}\n\t}\n\tfmt.Println(max)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintMinOfArray([]int{1, 2, 3, 4, 5})\n}\n\n// Function to print the minimum element in an array\nfunc PrintMinOfArray(arr []int) {\n\tmin := arr[0]\n\tfor _, value := range arr {\n\t\tif value < min {\n\t\t\tmin = value\n\t\t}\n\t}\n\tfmt.Println(min)\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintAverageOfArray([]int{1, 2, 3, 4, 5})\n}\n\n// Function to print the average of elements in an array\nfunc PrintAverageOfArray(arr []int) {\n\tsum := 0\n\tfor _, value := range arr {\n\t\tsum += value\n\t}\n\tfmt.Println(float64(sum) / float64(len(arr)))\n}"
    },
    {
        "function": "package main\n\nimport \"fmt\"\n\n// Main function\nfunc main() {\n\tPrintIsArraySorted([]int{1, 2, 3, 4, 5})\n}\n\n// Function to check if an array is sorted in ascending order\nfunc PrintIsArraySorted(arr []int) {\n\tfor i := 0; i < len(arr)-1; i++ {\n\t\tif arr[i] > arr[i+1] {\n\t\t\tfmt.Println(false)\n\t\t\treturn\n\t\t}\n\t}\n\tfmt.Println(true)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\n// homePage is a handler function for the home page\nfunc homePage(w http.ResponseWriter, r *http.Request){\n\tfmt.Fprintf(w, \"Welcome to the HomePage!\")\n\tfmt.Println(\"Endpoint Hit: homePage\")\n}\n\n// aboutPage is a handler function for the about page\nfunc aboutPage(w http.ResponseWriter, r *http.Request){\n\tfmt.Fprintf(w, \"Welcome to the AboutPage!\")\n\tfmt.Println(\"Endpoint Hit: aboutPage\")\n}\n\n// handleRequests binds URLs to handler functions\nfunc handleRequests() {\n\thttp.HandleFunc(\"/\", homePage)\n\thttp.HandleFunc(\"/about\", aboutPage)\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n\nfunc main() {\n\thandleRequests()\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\nfunc homeHandler(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"Hello, World!\"))\n}\n\nfunc usersHandler(w http.ResponseWriter, r *http.Request) {\n\tvars := mux.Vars(r)\n\tusername := vars[\"username\"]\n\tfmt.Fprintf(w, \"Hello %s!\", username)\n}\n\nfunc main() {\n\tr := mux.NewRouter()\n\tr.HandleFunc(\"/\", homeHandler)\n\tr.HandleFunc(\"/users/{username}\", usersHandler)\n\n\thttp.ListenAndServe(\":8080\", r)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"encoding/json\"\n)\n\ntype person struct {\n\tName string\n\tAge  int\n}\n\nfunc personHandler(w http.ResponseWriter, r *http.Request) {\n\tp := person{Name: \"John Doe\", Age: 30}\n\tjson.NewEncoder(w).Encode(p)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/person\", personHandler)\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"database/sql\"\n\t_ \"github.com/lib/pq\"\n\t\"log\"\n)\n\nconst (\n\tdbUser     = \"postgres\"\n\tdbPassword = \"password\"\n\tdbName     = \"test\"\n)\n\nfunc main() {\n\tdbinfo := fmt.Sprintf(\"user=%s password=%s dbname=%s sslmode=disable\",\n\t\t   dbUser, dbPassword, dbName)\n\n\tdb, err := sql.Open(\"postgres\", dbinfo)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer db.Close()\n\n\trows, err := db.Query(\"SELECT * FROM users\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar id int\n\t\tvar name string\n\t\terr := rows.Scan(&id, &name)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tfmt.Println(id, name)\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"log\"\n\t\"github.com/streadway/amqp\"\n)\n\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Fatalf(\"%s: %s\", msg, err)\n\t}\n}\n\nfunc main() {\n\tconn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\tq, err := ch.QueueDeclare(\n\t\t\"hello\",\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tfailOnError(err, \"Failed to declare a queue\")\n\n\tbody := \"Hello World!\"\n\terr = ch.Publish(\n\t\t\"\",\n\t\tq.Name,\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        []byte(body),\n\t\t},\n\t)\n\tfailOnError(err, \"Failed to publish a message\")\n\tlog.Printf(\" [x] Sent %s\", body)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/go-redis/redis/v8\"\n)\n\nfunc main() {\n\toptions := &redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tPassword: \"\",\n\t\tDB:       0,\n\t}\n\n\tclient := redis.NewClient(options)\n\n\tpingResult, err := client.Ping(context.Background()).Result()\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to Redis:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Connected to Redis. Ping result:\", pingResult)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tresp, err := http.Get(\"https://jsonplaceholder.typicode.com/posts\")\n\tif err != nil {\n\t\tfmt.Println(\"Error making HTTP request:\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading response body:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(body))\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/smtp\"\n)\n\nfunc main() {\n\tfrom := \"sender@example.com\"\n\tpassword := \"password\"\n\tto := \"recipient@example.com\"\n\n\tmsg := []byte(\"Subject: Hello\\n\\nThis is the email body.\")\n\n\tauth := smtp.PlainAuth(\"\", from, password, \"smtp.example.com\")\n\terr := smtp.SendMail(\"smtp.example.com:587\", auth, from, []string{to}, msg)\n\tif err != nil {\n\t\tfmt.Println(\"Error sending email:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Email sent successfully\")\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"encoding/csv\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfile, err := os.Create(\"data.csv\")\n\tif err != nil {\n\t\tfmt.Println(\"Error creating file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\twriter := csv.NewWriter(file)\n\tdefer writer.Flush()\n\n\theader := []string{\"Name\", \"Age\", \"Email\"}\n\twriter.Write(header)\n\n\trow := []string{\"John Doe\", \"30\", \"johndoe@example.com\"}\n\twriter.Write(row)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\n\treq, err := http.NewRequest(\"GET\", \"https://api.example.com/resource\", nil)\n\tif err != nil {\n\t\tfmt.Println(\"Error creating HTTP request:\", err)\n\t\treturn\n\t}\n\n\treq.Header.Add(\"Authorization\", \"Bearer <token>\")\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tfmt.Println(\"Error making HTTP request:\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading response body:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(body))\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"html/template\"\n\t\"net/http\"\n)\n\nfunc homeHandler(w http.ResponseWriter, r *http.Request) {\n\ttmpl, err := template.ParseFiles(\"home.html\")\n\tif err != nil {\n\t\tfmt.Println(\"Error parsing template:\", err)\n\t\treturn\n\t}\n\terr = tmpl.Execute(w, nil)\n\tif err != nil {\n\t\tfmt.Println(\"Error executing template:\", err)\n\t\treturn\n\t}\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", homeHandler)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Hello, World!\"})\n\t})\n\n\tr.GET(\"/users/:id\", func(c *gin.Context) {\n\t\tid := c.Param(\"id\")\n\t\tc.JSON(http.StatusOK, gin.H{\"user_id\": id})\n\t})\n\n\tr.Run(\":8080\")\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/file\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfile, err := os.Open(\"file.txt\")\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error opening file:\", err)\n\t\t\treturn\n\t\t}\n\t\tdefer file.Close()\n\n\t\t_, err = io.Copy(w, file)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error copying file contents to response writer:\", err)\n\t\t\treturn\n\t\t}\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gomodule/redigo/redis\"\n)\n\nfunc main() {\n\tconn, err := redis.Dial(\"tcp\", \"localhost:6379\")\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to Redis:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\t_, err = conn.Do(\"SET\", \"key\", \"value\")\n\tif err != nil {\n\t\tfmt.Println(\"Error setting Redis key:\", err)\n\t\treturn\n\t}\n\n\tvalue, err := redis.String(conn.Do(\"GET\", \"key\"))\n\tif err != nil {\n\t\tfmt.Println(\"Error getting Redis key:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Redis value:\", value)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"index.html\", gin.H{\"title\": \"Home\"})\n\t})\n\n\tr.Run(\":8080\")\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/websocket\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/echo\", func(w http.ResponseWriter, r *http.Request) {\n\t\tupgrader := websocket.Upgrader{}\n\t\tconn, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error upgrading to WebSocket connection:\", err)\n\t\t\treturn\n\t\t}\n\t\tdefer conn.Close()\n\n\t\tfor {\n\t\t\tmessageType, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Error reading message from WebSocket connection:\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tfmt.Println(\"Received message:\", string(message))\n\n\t\t\terr = conn.WriteMessage(messageType, message)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Error writing message to WebSocket connection:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"encoding/json\"\n)\n\nfunc main() {\n\tresp, err := http.Get(\"https://api.example.com/data\")\n\tif err != nil {\n\t\tfmt.Println(\"Error making HTTP request:\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading response body:\", err)\n\t\treturn\n\t}\n\n\tvar data map[string]interface{}\n\terr = json.Unmarshal(body, &data)\n\tif err != nil {\n\t\tfmt.Println(\"Error unmarshaling JSON response:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(data)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc main() {\n\tdb, err := sql.Open(\"sqlite3\", \"test.db\")\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to SQLite database:\", err)\n\t\treturn\n\t}\n\tdefer db.Close()\n\n\t_, err = db.Exec(\"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL)\")\n\tif err != nil {\n\t\tfmt.Println(\"Error creating table:\", err)\n\t\treturn\n\t}\n\n\t_, err = db.Exec(\"INSERT INTO users (name) VALUES ('John Doe')\")\n\tif err != nil {\n\t\tfmt.Println(\"Error inserting into table:\", err)\n\t\treturn\n\t}\n\n\trows, err := db.Query(\"SELECT id, name FROM users\")\n\tif err != nil {\n\t\tfmt.Println(\"Error querying table:\", err)\n\t\treturn\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar id int\n\t\tvar name string\n\t\terr = rows.Scan(&id, &name)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error scanning row:\", err)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Println(id, name)\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfile, err := os.Create(\"output.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error creating file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tfmt.Fprintln(file, \"Hello, World!\")\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"bufio\"\n)\n\nfunc main() {\n\tfile, err := os.Open(\"input.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error opening file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tfmt.Println(scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\tfmt.Println(\"Error scanning file:\", err)\n\t\treturn\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\nfunc main() {\n\tr := mux.NewRouter()\n\n\tr.HandleFunc(\"/users\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"List of users\")\n\t}).Methods(\"GET\")\n\n\tr.HandleFunc(\"/users\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Create user\")\n\t}).Methods(\"POST\")\n\n\tr.HandleFunc(\"/users/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tvars := mux.Vars(r)\n\t\tid := vars[\"id\"]\n\t\tfmt.Fprintln(w, \"Get user by ID\", id)\n\t}).Methods(\"GET\")\n\n\tr.HandleFunc(\"/users/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tvars := mux.Vars(r)\n\t\tid := vars[\"id\"]\n\t\tfmt.Fprintln(w, \"Update user\", id)\n\t}).Methods(\"PUT\")\n\n\tr.HandleFunc(\"/users/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tvars := mux.Vars(r)\n\t\tid := vars[\"id\"]\n\t\tfmt.Fprintln(w, \"Delete user\", id)\n\t}).Methods(\"DELETE\")\n\n\thttp.Handle(\"/\", r)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os/exec\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"ls\", \"-l\")\n\toutput, err := cmd.Output()\n\tif err != nil {\n\t\tfmt.Println(\"Error running command:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(output))\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\turls := []string{\"https://example.com\", \"https://google.com\", \"https://github.com\"}\n\tresults := make(chan string, len(urls))\n\tvar wg sync.WaitGroup\n\n\tfor _, url := range urls {\n\t\twg.Add(1)\n\t\tgo func(u string) {\n\t\t\tdefer wg.Done()\n\t\t\tresp, err := http.Get(u)\n\t\t\tif err != nil {\n\t\t\t\tresults <- fmt.Sprintf(\"Error fetching %s: %s\", u, err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer resp.Body.Close()\n\n\t\t\tbody, err := ioutil.ReadAll(resp.Body)\n\t\t\tif err != nil {\n\t\t\t\tresults <- fmt.Sprintf(\"Error reading response body for %s: %s\", u, err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t\tresults <- string(body)\n\t\t}(url)\n\t}\n\n\twg.Wait()\n\tclose(results)\n\n\tfor result := range results {\n\t\tfmt.Println(result)\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"encoding/json\"\n\t\"os\"\n)\n\n// Person represents a person entity\n\ntype Person struct {\n\tName string `json:\"name\"`\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\tperson := Person{Name: \"John Doe\", Age: 30}\n\n\tfile, err := os.Create(\"person.json\")\n\tif err != nil {\n\t\tfmt.Println(\"Error creating file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tencoder := json.NewEncoder(file)\n\terr = encoder.Encode(person)\n\tif err != nil {\n\t\tfmt.Println(\"Error encoding JSON:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Person encoded and written to file\")\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/hello\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Hello, World!\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/go-chi/chi\"\n)\n\nfunc main() {\n\tr := chi.NewRouter()\n\n\tr.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Welcome to the home page\")\n\t})\n\n\tr.Get(\"/users\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"List of users\")\n\t})\n\n\tr.Post(\"/users\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Create user\")\n\t})\n\n\tr.Put(\"/users/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tid := chi.URLParam(r, \"id\")\n\t\tfmt.Fprintf(w, \"Update user with ID %s\", id)\n\t})\n\n\tr.Delete(\"/users/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tid := chi.URLParam(r, \"id\")\n\t\tfmt.Fprintf(w, \"Delete user with ID %s\", id)\n\t})\n\n\thttp.ListenAndServe(\":8080\", r)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc main() {\n\tcurrentDir, err := os.Getwd()\n\tif err != nil {\n\t\tfmt.Println(\"Error getting current directory:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Current directory:\", currentDir)\n\n\tfiles, err := filepath.Glob(\"*.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error matching file patterns:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Matching files:\", files)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\nfunc main() {\n\tr := mux.NewRouter()\n\n\tr.HandleFunc(\"/users\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"List of users\")\n\t}).Methods(\"GET\")\n\n\tr.HandleFunc(\"/users\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Create user\")\n\t}).Methods(\"POST\")\n\n\tr.HandleFunc(\"/users/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tid := mux.Vars(r)[\"id\"]\n\t\tfmt.Fprintf(w, \"Get user with ID: %s\", id)\n\t}).Methods(\"GET\")\n\n\tr.HandleFunc(\"/users/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tid := mux.Vars(r)[\"id\"]\n\t\tfmt.Fprintf(w, \"Update user with ID: %s\", id)\n\t}).Methods(\"PUT\")\n\n\tr.HandleFunc(\"/users/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tid := mux.Vars(r)[\"id\"]\n\t\tfmt.Fprintf(w, \"Delete user with ID: %s\", id)\n\t}).Methods(\"DELETE\")\n\n\thttp.Handle(\"/\", r)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/unrolled/render\"\n)\n\nfunc main() {\n\trenderer := render.New()\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\trenderer.Text(w, http.StatusOK, \"Hello, World!\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"log\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Hello, World!\")\n\t})\n\n\thttp.HandleFunc(\"/about\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"About page\")\n\t})\n\n\thttp.HandleFunc(\"/contact\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Contact page\")\n\t})\n\n\thttp.HandleFunc(\"/api/users\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"API endpoint: Get all users\")\n\t})\n\n\thttp.HandleFunc(\"/api/users/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"API endpoint: Get user by ID: %s\", http.Vars(r)[\"id\"])\n\t})\n\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(\"Error starting server: \", err)\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\te.GET(\"/users\", func(c echo.Context) error {\n\t\treturn c.JSON(http.StatusOK, []string{\"Alice\", \"Bob\", \"Charlie\"})\n\t})\n\n\te.POST(\"/users\", func(c echo.Context) error {\n\t\tuser := new(User)\n\t\tif err := c.Bind(user); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn c.JSON(http.StatusCreated, user)\n\t})\n\n\te.Start(\":8080\")\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\targs := os.Args[1:]\n\tfmt.Println(\"Command-line arguments:\", args)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\tfile, err := os.Open(\"input.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error opening file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading file:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(content))\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tticker := time.NewTicker(time.Second)\n\tdefer ticker.Stop()\n\n\tfor range ticker.C {\n\t\tfmt.Println(\"Tick\")\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Hello, World!\")\n\t})\n\n\tsrv := &http.Server{\n\t\tAddr: \":8080\",\n\t}\n\n\tsrv.ListenAndServe()\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\nfunc main() {\n\tfile, err := os.OpenFile(\"file.txt\", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)\n\tif err != nil {\n\t\tfmt.Println(\"Error opening file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tcontent := []byte(\"Hello, World!\")\n\t_, err = file.Write(content)\n\tif err != nil {\n\t\tfmt.Println(\"Error writing to file:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Data written to file\")\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\tresp, err := http.Get(\"https://api.example.com/data\")\n\tif err != nil {\n\t\tfmt.Println(\"Error making HTTP request:\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading response body:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(body))\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/go-redis/redis/v8\"\n)\n\nfunc main() {\n\toptions := &redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tPassword: \"\",\n\t\tDB:       0,\n\t}\n\n\tclient := redis.NewClient(options)\n\n\tpingResult, err := client.Ping(context.Background()).Result()\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to Redis:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Connected to Redis. Ping result:\", pingResult)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/go-redis/redis/v8\"\n)\n\nfunc main() {\n\toptions := &redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tPassword: \"\",\n\t\tDB:       0,\n\t}\n\n\tclient := redis.NewClient(options)\n\n\tpong, err := client.Ping().Result()\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to Redis:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Connected to Redis. PING: \", pong)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"database/sql\"\n\t_ \"github.com/lib/pq\"\n)\n\nfunc main() {\n\tdb, err := sql.Open(\"postgres\", \"postgres://username:password@localhost/mydb?sslmode=disable\")\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to PostgreSQL:\", err)\n\t\treturn\n\t}\n\tdefer db.Close()\n\n\t_, err = db.Exec(\"CREATE TABLE IF NOT EXISTS users (id SERIAL PRIMARY KEY, name TEXT)\")\n\tif err != nil {\n\t\tfmt.Println(\"Error creating table:\", err)\n\t\treturn\n\t}\n\n\t_, err = db.Exec(\"INSERT INTO users (name) VALUES ('John Doe')\")\n\tif err != nil {\n\t\tfmt.Println(\"Error inserting into table:\", err)\n\t\treturn\n\t}\n\n\trows, err := db.Query(\"SELECT id, name FROM users\")\n\tif err != nil {\n\t\tfmt.Println(\"Error querying table:\", err)\n\t\treturn\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar id int\n\t\tvar name string\n\t\terr = rows.Scan(&id, &name)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error scanning row:\", err)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Println(id, name)\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gofrs/uuid\"\n)\n\nfunc main() {\n\tid, err := uuid.NewV4()\n\tif err != nil {\n\t\tfmt.Println(\"Error generating UUID:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"UUID:\", id.String())\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tstartTime := time.Now()\n\n\t// Run some time-consuming operation\n\ttime.Sleep(2 * time.Second)\n\n\tendTime := time.Now()\n\tduration := endTime.Sub(startTime)\n\n\tfmt.Println(\"Operation took\", duration)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\thttp.ServeFile(w, r, \"index.html\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"html/template\"\n)\n\nfunc main() {\n\ttmpl, err := template.ParseFiles(\"template.html\")\n\tif err != nil {\n\t\tfmt.Println(\"Error parsing template:\", err)\n\t\treturn\n\t}\n\n\tdata := struct{\n\t\tName string\n\t\tAge  int\n\t}{\n\t\tName: \"John Doe\",\n\t\tAge:  30,\n\t}\n\n\terr = tmpl.Execute(os.Stdout, data)\n\tif err != nil {\n\t\tfmt.Println(\"Error executing template:\", err)\n\t\treturn\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/smtp\"\n)\n\nfunc main() {\n\tto := []string{\"recipient@example.com\"}\n\tsubject := \"Hello\"\n\tbody := \"Hello, World!\"\n\n\tmsg := fmt.Sprintf(\"To: %s\\r\\nSubject: %s\\r\\n\\r\\n%s\", strings.Join(to, \", \"), subject, body)\n\n\terr := smtp.SendMail(\"smtp.example.com:587\", smtp.PlainAuth(\"\", \"sender@example.com\", \"password\", \"smtp.example.com\"), \"sender@example.com\", to, []byte(msg))\n\tif err != nil {\n\t\tfmt.Println(\"Error sending email:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Email sent\")\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"encoding/csv\"\n\t\"os\"\n)\n\nfunc main() {\n\tdata := [][]string{{\"Name\", \"Age\"}, {\"John Doe\", \"30\"}, {\"Jane Smith\", \"25\"}}\n\n\tfile, err := os.Create(\"data.csv\")\n\tif err != nil {\n\t\tfmt.Println(\"Error creating file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\twriter := csv.NewWriter(file)\n\tdefer writer.Flush()\n\n\tfor _, record := range data {\n\t\twriter.Write(record)\n\t}\n\n\tfmt.Println(\"Data written to CSV file\")\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\n\treq, err := http.NewRequest(\"GET\", \"https://api.example.com/data\", nil)\n\tif err != nil {\n\t\tfmt.Println(\"Error creating request:\", err)\n\t\treturn\n\t}\n\n\treq.Header.Set(\"Authorization\", \"Bearer YOUR_API_TOKEN\")\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tfmt.Println(\"Error making request:\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading response body:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(body))\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"database/sql\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\tdb, err := sql.Open(\"mysql\", \"user:password@tcp(localhost:3306)/mydb\")\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to MySQL:\", err)\n\t\treturn\n\t}\n\tdefer db.Close()\n\n\t_, err = db.Exec(\"CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255))\")\n\tif err != nil {\n\t\tfmt.Println(\"Error creating table:\", err)\n\t\treturn\n\t}\n\n\t_, err = db.Exec(\"INSERT INTO users (name) VALUES ('John Doe')\")\n\tif err != nil {\n\t\tfmt.Println(\"Error inserting into table:\", err)\n\t\treturn\n\t}\n\n\trows, err := db.Query(\"SELECT id, name FROM users\")\n\tif err != nil {\n\t\tfmt.Println(\"Error querying table:\", err)\n\t\treturn\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar id int\n\t\tvar name string\n\t\terr = rows.Scan(&id, &name)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error scanning row:\", err)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Println(id, name)\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfile, err := os.Create(\"output.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error creating file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tfmt.Fprintln(file, \"Hello, World!\")\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\nfunc main() {\n\tfile, err := os.Open(\"input.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error opening file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tfmt.Println(scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\tfmt.Println(\"Error scanning file:\", err)\n\t\treturn\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"encoding/json\"\n\t\"os\"\n)\n\n// Configuration represents the application configuration\n\ntype Configuration struct {\n\tName   string `json:\"name\"`\n\tServer string `json:\"server\"`\n}\n\nfunc main() {\n\tconfig := Configuration{}\n\n\tfile, err := os.Open(\"config.json\")\n\tif err != nil {\n\t\tfmt.Println(\"Error opening config file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tdecoder := json.NewDecoder(file)\n\terr = decoder.Decode(&config)\n\tif err != nil {\n\t\tfmt.Println(\"Error decoding JSON:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Config:\", config)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\nfunc main() {\n\tr := mux.NewRouter()\n\n\tr.HandleFunc(\"/products\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"List of products\")\n\t}).Methods(\"GET\")\n\n\tr.HandleFunc(\"/products\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Create product\")\n\t}).Methods(\"POST\")\n\n\tr.HandleFunc(\"/products/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tid := mux.Vars(r)[\"id\"]\n\t\tfmt.Fprintf(w, \"Get product with ID: %s\", id)\n\t}).Methods(\"GET\")\n\n\tr.HandleFunc(\"/products/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tid := mux.Vars(r)[\"id\"]\n\t\tfmt.Fprintf(w, \"Update product with ID: %s\", id)\n\t}).Methods(\"PUT\")\n\n\tr.HandleFunc(\"/products/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tid := mux.Vars(r)[\"id\"]\n\t\tfmt.Fprintf(w, \"Delete product with ID: %s\", id)\n\t}).Methods(\"DELETE\")\n\n\thttp.Handle(\"/\", r)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/go-chi/chi\"\n)\n\nfunc main() {\n\tr := chi.NewRouter()\n\n\tr.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Welcome to the home page\")\n\t})\n\n\tr.Get(\"/users\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"List of users\")\n\t})\n\n\tr.Post(\"/users\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Create user\")\n\t})\n\n\tr.Get(\"/users/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Get user with ID: %s\", chi.URLParam(r, \"id\"))\n\t})\n\n\tr.Put(\"/users/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Update user with ID: %s\", chi.URLParam(r, \"id\"))\n\t})\n\n\tr.Delete(\"/users/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Delete user with ID: %s\", chi.URLParam(r, \"id\"))\n\t})\n\n\thttp.ListenAndServe(\":8080\", r)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"encoding/json\"\n)\n\n// Post represents a post entity\n\ntype Post struct {\n\tID    int    `json:\"id\"`\n\tTitle string `json:\"title\"`\n\tBody  string `json:\"body\"`\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/posts\", func(w http.ResponseWriter, r *http.Request) {\n\t\tposts := []Post{\n\t\t\t{ID: 1, Title: \"Post 1\", Body: \"Lorem ipsum\"},\n\t\t\t{ID: 2, Title: \"Post 2\", Body: \"Dolor sit amet\"},\n\t\t}\n\n\t\tjson.NewEncoder(w).Encode(posts)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os/exec\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"ls\", \"-l\")\n\toutput, err := cmd.Output()\n\tif err != nil {\n\t\tfmt.Println(\"Error running command:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(output))\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tgo func() {\n\t\ttime.Sleep(2 * time.Second)\n\t\tfmt.Println(\"Goroutine executed\")\n\t}()\n\n\tfmt.Println(\"Main goroutine\")\n\n\ttime.Sleep(3 * time.Second)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Hello, World!\")\n\t})\n\n\thttp.HandleFunc(\"/about\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"About page\")\n\t})\n\n\thttp.HandleFunc(\"/contact\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Contact page\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tch := make(chan string)\n\n\tgo func() {\n\t\ttime.Sleep(2 * time.Second)\n\t\tch <- \"Hello from goroutine\"\n\t}()\n\n\tfmt.Println(<-ch)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tdone := make(chan bool)\n\n\tgo func() {\n\t\ttime.Sleep(2 * time.Second)\n\t\tfmt.Println(\"Goroutine executed\")\n\t\tdone <- true\n\t}()\n\n\tfmt.Println(\"Main goroutine\")\n\n\t<-done\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfile, err := os.Open(\"data.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error opening file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tstat, err := file.Stat()\n\tif err != nil {\n\t\tfmt.Println(\"Error getting file information:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"File size:\", stat.Size(), \"bytes\")\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"io\"\n)\n\nfunc main() {\n\tfile, err := os.Open(\"input.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error opening file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\treader := bufio.NewReader(file)\n\n\tfor {\n\t\tline, err := reader.ReadString('\\n')\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tfmt.Println(\"Error reading line:\", err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(line)\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\tfileNames, err := ioutil.ReadDir(\".\")\n\tif err != nil {\n\t\tfmt.Println(\"Error reading directory:\", err)\n\t\treturn\n\t}\n\n\tfor _, file := range fileNames {\n\t\tfmt.Println(file.Name())\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc main() {\n\tpath := \"/path/to/directory\"\n\n\terr := filepath.Walk(path, func(path string, info os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error walking path:\", err)\n\t\t\treturn err\n\t\t}\n\n\t\tfmt.Println(path)\n\t\treturn nil\n\t})\n\n\tif err != nil {\n\t\tfmt.Println(\"Error walking path:\", err)\n\t\treturn\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Hello, World!\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\tresp, err := http.Get(\"https://api.example.com/data\")\n\tif err != nil {\n\t\tfmt.Println(\"Error making HTTP request:\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading response body:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(body))\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"encoding/json\"\n\t\"os\"\n)\n\n// Configuration represents the application configuration\n\ntype Configuration struct {\n\tName   string `json:\"name\"`\n\tServer string `json:\"server\"`\n}\n\nfunc main() {\n\tconfig := Configuration{}\n\n\tfile, err := os.Open(\"config.json\")\n\tif err != nil {\n\t\tfmt.Println(\"Error opening config file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tdecoder := json.NewDecoder(file)\n\terr = decoder.Decode(&config)\n\tif err != nil {\n\t\tfmt.Println(\"Error decoding JSON:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Config:\", config)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"database/sql\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\tdb, err := sql.Open(\"mysql\", \"user:password@tcp(localhost:3306)/mydb\")\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to MySQL:\", err)\n\t\treturn\n\t}\n\tdefer db.Close()\n\n\t_, err = db.Exec(\"CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255))\")\n\tif err != nil {\n\t\tfmt.Println(\"Error creating table:\", err)\n\t\treturn\n\t}\n\n\t_, err = db.Exec(\"INSERT INTO users (name) VALUES ('John Doe')\")\n\tif err != nil {\n\t\tfmt.Println(\"Error inserting into table:\", err)\n\t\treturn\n\t}\n\n\trows, err := db.Query(\"SELECT id, name FROM users\")\n\tif err != nil {\n\t\tfmt.Println(\"Error querying table:\", err)\n\t\treturn\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar id int\n\t\tvar name string\n\t\terr = rows.Scan(&id, &name)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error scanning row:\", err)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Println(id, name)\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/go-redis/redis/v8\"\n)\n\nfunc main() {\n\toptions := &redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tPassword: \"\",\n\t\tDB:       0,\n\t}\n\n\tclient := redis.NewClient(options)\n\n\tpingResult, err := client.Ping(context.Background()).Result()\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to Redis:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Connected to Redis. Ping result:\", pingResult)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/go-chi/chi\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := chi.NewRouter()\n\n\tr.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Welcome to the home page\")\n\t})\n\n\tr.Get(\"/users\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"List of users\")\n\t})\n\n\tr.Get(\"/users/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tid := chi.URLParam(r, \"id\")\n\t\tfmt.Fprintf(w, \"Get user with ID: %s\", id)\n\t})\n\n\thttp.ListenAndServe(\":8080\", r)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os/exec\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"ls\", \"-l\")\n\toutput, err := cmd.Output()\n\tif err != nil {\n\t\tfmt.Println(\"Error running command:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(output))\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tgo func() {\n\t\ttime.Sleep(2 * time.Second)\n\t\tfmt.Println(\"Goroutine executed\")\n\t}()\n\n\tfmt.Println(\"Main goroutine\")\n\n\ttime.Sleep(3 * time.Second)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"io\"\n)\n\nfunc main() {\n\tfile, err := os.Open(\"input.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error opening file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\treader := bufio.NewReader(file)\n\n\tfor {\n\t\tline, err := reader.ReadString('\\n')\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tfmt.Println(\"Error reading line:\", err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(line)\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"html/template\"\n)\n\nfunc main() {\n\ttmpl, err := template.ParseFiles(\"template.html\")\n\tif err != nil {\n\t\tfmt.Println(\"Error parsing template:\", err)\n\t\treturn\n\t}\n\n\tdata := struct{\n\t\tName string\n\t\tAge  int\n\t}{\n\t\tName: \"John Doe\",\n\t\tAge:  30,\n\t}\n\n\terr = tmpl.Execute(os.Stdout, data)\n\tif err != nil {\n\t\tfmt.Println(\"Error executing template:\", err)\n\t\treturn\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/smtp\"\n)\n\nfunc main() {\n\tto := []string{\"recipient@example.com\"}\n\tsubject := \"Hello\"\n\tbody := \"Hello, World!\"\n\n\tmsg := fmt.Sprintf(\"To: %s\\r\\nSubject: %s\\r\\n\\r\\n%s\", strings.Join(to, \", \"), subject, body)\n\n\terr := smtp.SendMail(\"smtp.example.com:587\", smtp.PlainAuth(\"\", \"sender@example.com\", \"password\", \"smtp.example.com\"), \"sender@example.com\", to, []byte(msg))\n\tif err != nil {\n\t\tfmt.Println(\"Error sending email:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Email sent\")\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"encoding/csv\"\n\t\"os\"\n)\n\nfunc main() {\n\tdata := [][]string{{\"Name\", \"Age\"}, {\"John Doe\", \"30\"}, {\"Jane Smith\", \"25\"}}\n\n\tfile, err := os.Create(\"data.csv\")\n\tif err != nil {\n\t\tfmt.Println(\"Error creating file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\twriter := csv.NewWriter(file)\n\tdefer writer.Flush()\n\n\tfor _, record := range data {\n\t\twriter.Write(record)\n\t}\n\n\tfmt.Println(\"Data written to CSV file\")\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\n\treq, err := http.NewRequest(\"GET\", \"https://api.example.com/data\", nil)\n\tif err != nil {\n\t\tfmt.Println(\"Error creating request:\", err)\n\t\treturn\n\t}\n\n\treq.Header.Set(\"Authorization\", \"Bearer YOUR_API_TOKEN\")\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tfmt.Println(\"Error making request:\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading response body:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(body))\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"database/sql\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc main() {\n\tdb, err := sql.Open(\"sqlite3\", \"mydb.db\")\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to SQLite:\", err)\n\t\treturn\n\t}\n\tdefer db.Close()\n\n\t_, err = db.Exec(\"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)\")\n\tif err != nil {\n\t\tfmt.Println(\"Error creating table:\", err)\n\t\treturn\n\t}\n\n\t_, err = db.Exec(\"INSERT INTO users (name) VALUES ('John Doe')\")\n\tif err != nil {\n\t\tfmt.Println(\"Error inserting into table:\", err)\n\t\treturn\n\t}\n\n\trows, err := db.Query(\"SELECT id, name FROM users\")\n\tif err != nil {\n\t\tfmt.Println(\"Error querying table:\", err)\n\t\treturn\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar id int\n\t\tvar name string\n\t\terr = rows.Scan(&id, &name)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error scanning row:\", err)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Println(id, name)\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n)\n\nfunc main() {\n\tdata, err := ioutil.ReadFile(\"file.txt\")\n\tif err != nil {\n\t\tlog.Fatal(\"Error reading file:\", err)\n\t}\n\n\tfmt.Println(string(data))\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"path/filepath\"\n)\n\nfunc main() {\n\tfiles, err := filepath.Glob(\"*.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error finding files:\", err)\n\t\treturn\n\t}\n\n\tfor _, file := range files {\n\t\tfmt.Println(file)\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\n\tnum := rand.Intn(100)\n\tfmt.Println(num)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc main() {\n\tnumStr := \"42\"\n\tnum, err := strconv.Atoi(numStr)\n\tif err != nil {\n\t\tfmt.Println(\"Error converting string to int:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(num)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() {\n\tstr := \"hello world\"\n\twords := strings.Fields(str)\n\n\tfor _, word := range words {\n\t\tfmt.Println(word)\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() {\n\tstr := \"Hello, World!\"\n\tupper := strings.ToUpper(str)\n\n\tfmt.Println(upper)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() {\n\tstr := \"hello world\"\n\tcontains := strings.Contains(str, \"world\")\n\n\tfmt.Println(contains)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc main() {\n\tvar num int\n\tnumStr := \"42\"\n\n\terr := strconv.UnmarshalText([]byte(numStr), &num)\n\tif err != nil {\n\t\tfmt.Println(\"Error unmarshaling text:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(num)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tstart := time.Now()\n\n\ttime.Sleep(2 * time.Second)\n\n\tduration := time.Since(start)\n\tfmt.Println(duration)\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tticker := time.NewTicker(1 * time.Second)\n\tdefer ticker.Stop()\n\n\tfor range ticker.C {\n\t\tfmt.Println(\"Tick\")\n\t}\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\ttimer := time.NewTimer(2 * time.Second)\n\tdefer timer.Stop()\n\n\t<-timer.C\n\tfmt.Println(\"Timer expired\")\n}"
    },
    {
        "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\nfunc main() {\n\tvar wg sync.WaitGroup\n\n\twg.Add(2)\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\ttime.Sleep(2 * time.Second)\n\t\tfmt.Println(\"Goroutine 1 executed\")\n\t}()\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\ttime.Sleep(3 * time.Second)\n\t\tfmt.Println(\"Goroutine 2 executed\")\n\t}()\n\n\twg.Wait()\n}"
    },
    {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tselect {\n\tcase <-time.After(2 * time.Second):\n\t\tfmt.Println(\"Timeout\")\n\tcase <-time.After(3 * time.Second):\n\t\tfmt.Println(\"Another timeout\")\n\t}\n}"
  },
  {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tc := make(chan os.Signal, 1)\n\tsignal.Notify(c, syscall.SIGINT, syscall.SIGTERM)\n\n\tfmt.Println(\"Waiting for signal...\")\n\ts := <-c\n\n\tfmt.Println(\"Received signal:\", s)\n}"
  },
  {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tnum := 4.5\n\n\tfmt.Println(\"Floor:\", math.Floor(num))\n\tfmt.Println(\"Ceil:\", math.Ceil(num))\n\tfmt.Println(\"Round:\", math.Round(num))\n\tfmt.Println(\"Sqrt:\", math.Sqrt(num))\n}"
  },
  {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tpath, err := os.Executable()\n\tif err != nil {\n\t\tfmt.Println(\"Error getting executable path:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Executable path:\", path)\n}"
  },
  {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"html/template\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\ttmpl, err := template.ParseFiles(\"index.html\")\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error parsing template:\", err)\n\t\t\treturn\n\t\t}\n\n\t\tdata := struct{\n\t\t\tTitle string\n\t\t\tBody  string\n\t\t}{\n\t\t\tTitle: \"Hello\",\n\t\t\tBody:  \"Welcome to the home page\",\n\t\t}\n\n\t\ttmpl.Execute(w, data)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"encoding/json\"\n)\n\n// User represents a user entity\n\ntype User struct {\n\tID   int    `json:\"id\"`\n\tName string `json:\"name\"`\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/users\", func(w http.ResponseWriter, r *http.Request) {\n\t\tusers := []User{\n\t\t\t{ID: 1, Name: \"John Doe\"},\n\t\t\t{ID: 2, Name: \"Jane Smith\"},\n\t\t}\n\n\t\tjson.NewEncoder(w).Encode(users)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tvar num float64 = 4.5\n\n\tfmt.Println(\"Floor:\", math.Floor(num))\n\tfmt.Println(\"Ceil:\", math.Ceil(num))\n\tfmt.Println(\"Round:\", math.Round(num))\n\tfmt.Println(\"Sqrt:\", math.Sqrt(num))\n}"
  },
  {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tch := make(chan string)\n\n\tgo func() {\n\t\ttime.Sleep(2 * time.Second)\n\t\tch <- \"Hello from goroutine\"\n\t}()\n\n\tfmt.Println(<-ch)\n}"
  },
  {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\tr.GET(\"/users\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"List of users\")\n\t})\n\n\tr.GET(\"/users/:id\", func(c *gin.Context) {\n\t\tid := c.Param(\"id\")\n\t\tc.String(http.StatusOK, \"Get user with ID: %s\", id)\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"encoding/json\"\n)\n\n// Person represents a person entity\n\ntype Person struct {\n\tName string `json:\"name\"`\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\tperson := Person{Name: \"John Doe\", Age: 30}\n\n\tdata, err := json.Marshal(person)\n\tif err != nil {\n\t\tfmt.Println(\"Error marshaling JSON:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(data))\n}"
  },
  {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\n\tvar nums []int\n\n\tfor i := 0; i < 5; i++ {\n\t\tnum := rand.Intn(100)\n\t\tnums = append(nums, num)\n\t}\n\n\tfmt.Println(nums)\n}"
  },
  {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\tfiles, err := ioutil.ReadDir(\".\")\n\tif err != nil {\n\t\tfmt.Println(\"Error reading directory:\", err)\n\t\treturn\n\t}\n\n\tfor _, file := range files {\n\t\tfmt.Println(file.Name())\n\t}\n}"
  },
  {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tquit := make(chan os.Signal)\n\tsignal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)\n\n\tgo func() {\n\t\t<-quit\n\t\tfmt.Println(\"Received termination signal\")\n\t\tos.Exit(0)\n\t}()\n\n\tfmt.Println(\"Waiting for termination signal\")\n\tselect {}\n}"
  },
  {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"ls\", \"-l\")\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\terr := cmd.Run()\n\tif err != nil {\n\t\tfmt.Println(\"Error running command:\", err)\n\t\treturn\n\t}\n}"
  },
  {
      "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tstart := time.Now()\n\n\ttime.Sleep(2 * time.Second)\n\n\tduration := time.Since(start)\n\tfmt.Println(duration)\n}"
  },
    {
        "function": "func main() {\n\tfileNames, err := ioutil.ReadDir(\".\")\n\tif err != nil {\n\t\tfmt.Println(\"Error reading directory:\", err)\n\t\treturn\n\t}\n\n\tfor _, file := range fileNames {\n\t\tfmt.Println(file.Name())\n\t}\n}"
    },
    {
        "function": "func main() {\n\tpath := \"/path/to/directory\"\n\n\terr := filepath.Walk(path, func(path string, info os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error walking path:\", err)\n\t\t\treturn err\n\t\t}\n\n\t\tfmt.Println(path)\n\t\treturn nil\n\t})\n\n\tif err != nil {\n\t\tfmt.Println(\"Error walking path:\", err)\n\t\treturn\n\t}\n}"
    },
    {
        "function": "func main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Hello, World!\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
    },
    {
        "function": "func main() {\n\tresp, err := http.Get(\"https://api.example.com/data\")\n\tif err != nil {\n\t\tfmt.Println(\"Error making HTTP request:\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading response body:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(body))\n}"
    },
    {
        "function": "type Configuration struct {\n\tName   string `json:\"name\"`\n\tServer string `json:\"server\"`\n}\n\nfunc main() {\n\tconfig := Configuration{}\n\n\tfile, err := os.Open(\"config.json\")\n\tif err != nil {\n\t\tfmt.Println(\"Error opening config file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tdecoder := json.NewDecoder(file)\n\terr = decoder.Decode(&config)\n\tif err != nil {\n\t\tfmt.Println(\"Error decoding JSON:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Config:\", config)\n}"
    },
    {
        "function": "db, err := sql.Open(\"mysql\", \"user:password@tcp(localhost:3306)/mydb\")\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to MySQL:\", err)\n\t\treturn\n\t}\n\tdefer db.Close()\n\n\t_, err = db.Exec(\"CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255))\")\n\tif err != nil {\n\t\tfmt.Println(\"Error creating table:\", err)\n\t\treturn\n\t}\n\n\t_, err = db.Exec(\"INSERT INTO users (name) VALUES ('John Doe')\")\n\tif err != nil {\n\t\tfmt.Println(\"Error inserting into table:\", err)\n\t\treturn\n\t}\n\n\trows, err := db.Query(\"SELECT id, name FROM users\")\n\tif err != nil {\n\t\tfmt.Println(\"Error querying table:\", err)\n\t\treturn\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar id int\n\t\tvar name string\n\t\terr = rows.Scan(&id, &name)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error scanning row:\", err)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Println(id, name)\n\t}\n}"
    },
    {
        "function": "func main() {\n\tcmd := exec.Command(\"ls\", \"-l\")\n\toutput, err := cmd.Output()\n\tif err != nil {\n\t\tfmt.Println(\"Error running command:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(output))\n}"
    },
    {
        "function": "func main() {\n\tvar wg sync.WaitGroup\n\n\twg.Add(2)\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\ttime.Sleep(2 * time.Second)\n\t\tfmt.Println(\"Goroutine 1 executed\")\n\t}()\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\ttime.Sleep(3 * time.Second)\n\t\tfmt.Println(\"Goroutine 2 executed\")\n\t}()\n\n\twg.Wait()\n}"
    },
    {
        "function": "func main() {\n\tfile, err := os.Open(\"input.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error opening file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\treader := bufio.NewReader(file)\n\n\tfor {\n\t\tline, err := reader.ReadString('\\n')\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tfmt.Println(\"Error reading line:\", err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(line)\n\t}\n}"
    },
    {
        "function": "func main() {\n\ttmpl, err := template.ParseFiles(\"template.html\")\n\tif err != nil {\n\t\tfmt.Println(\"Error parsing template:\", err)\n\t\treturn\n\t}\n\n\tdata := struct{\n\t\tName string\n\t\tAge  int\n\t}{\n\t\tName: \"John Doe\",\n\t\tAge:  30,\n\t}\n\n\terr = tmpl.Execute(os.Stdout, data)\n\tif err != nil {\n\t\tfmt.Println(\"Error executing template:\", err)\n\t\treturn\n\t}\n}"
    },
    {
        "function": "func main() {\n\tto := []string{\"recipient@example.com\"}\n\tsubject := \"Hello\"\n\tbody := \"Hello, World!\"\n\n\tmsg := fmt.Sprintf(\"To: %s\\r\\nSubject: %s\\r\\n\\r\\n%s\", strings.Join(to, \", \"), subject, body)\n\n\terr := smtp.SendMail(\"smtp.example.com:587\", smtp.PlainAuth(\"\", \"sender@example.com\", \"password\", \"smtp.example.com\"), \"sender@example.com\", to, []byte(msg))\n\tif err != nil {\n\t\tfmt.Println(\"Error sending email:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Email sent\")\n}"
    },
    {
        "function": "func main() {\n\tdata := [][]string{{\"Name\", \"Age\"}, {\"John Doe\", \"30\"}, {\"Jane Smith\", \"25\"}}\n\n\tfile, err := os.Create(\"data.csv\")\n\tif err != nil {\n\t\tfmt.Println(\"Error creating file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\twriter := csv.NewWriter(file)\n\tdefer writer.Flush()\n\n\tfor _, record := range data {\n\t\twriter.Write(record)\n\t}\n\n\tfmt.Println(\"Data written to CSV file\")\n}"
    },
    {
        "function": "func main() {\n\tclient := &http.Client{}\n\n\treq, err := http.NewRequest(\"GET\", \"https://api.example.com/data\", nil)\n\tif err != nil {\n\t\tfmt.Println(\"Error creating request:\", err)\n\t\treturn\n\t}\n\n\treq.Header.Set(\"Authorization\", \"Bearer YOUR_API_TOKEN\")\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tfmt.Println(\"Error making request:\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading response body:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(body))\n}"
    },
    {
        "function": "func main() {\n\tnumStr := \"42\"\n\tnum, err := strconv.Atoi(numStr)\n\tif err != nil {\n\t\tfmt.Println(\"Error converting string to int:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(num)\n}"
    },
    {
        "function": "func main() {\n\tstr := \"hello world\"\n\twords := strings.Fields(str)\n\n\tfor _, word := range words {\n\t\tfmt.Println(word)\n\t}\n}"
    },
    {
        "function": "func main() {\n\tstr := \"Hello, World!\"\n\tupper := strings.ToUpper(str)\n\n\tfmt.Println(upper)\n}"
    },
    {
        "function": "func main() {\n\tstr := \"hello world\"\n\tcontains := strings.Contains(str, \"world\")\n\n\tfmt.Println(contains)\n}"
    },
    {
        "function": "func main() {\n\tvar num int\n\tnumStr := \"42\"\n\n\terr := strconv.UnmarshalText([]byte(numStr), &num)\n\tif err != nil {\n\t\tfmt.Println(\"Error unmarshaling text:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(num)\n}"
    },
    {
        "function": "func main() {\n\tstart := time.Now()\n\n\ttime.Sleep(2 * time.Second)\n\n\tduration := time.Since(start)\n\tfmt.Println(duration)\n}"
    },
    {
        "function": "func main() {\n\tticker := time.NewTicker(1 * time.Second)\n\tdefer ticker.Stop()\n\n\tfor range ticker.C {\n\t\tfmt.Println(\"Tick\")\n\t}\n}"
    },
    {
        "function": "func main() {\n\ttimer := time.NewTimer(2 * time.Second)\n\tdefer timer.Stop()\n\n\t<-timer.C\n\tfmt.Println(\"Timer expired\")\n}"
    },
    {
        "function": "func main() {\n\tvar wg sync.WaitGroup\n\n\twg.Add(2)\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\ttime.Sleep(2 * time.Second)\n\t\tfmt.Println(\"Goroutine 1 executed\")\n\t}()\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\ttime.Sleep(3 * time.Second)\n\t\tfmt.Println(\"Goroutine 2 executed\")\n\t}()\n\n\twg.Wait()\n}"
    },
    {
        "function": "func main() {\n\tvar mu sync.Mutex\n\tvar counter int\n\n\tfor i := 0; i < 10; i++ {\n\t\tgo func() {\n\t\t\tmu.Lock()\n\t\t\tcounter++\n\t\t\tmu.Unlock()\n\t\t}()\n\t}\n\n\ttime.Sleep(1 * time.Second)\n\n\tmu.Lock()\n\tfmt.Println(\"Counter:\", counter)\n\tmu.Unlock()\n}"
    },
    {
        "function": "func main() {\n\tselect {\n\tcase <-time.After(2 * time.Second):\n\t\tfmt.Println(\"Timeout\")\n\tcase <-time.After(3 * time.Second):\n\t\tfmt.Println(\"Another timeout\")\n\t}\n}"
    },
    {
        "function": "func main() {\n\tc := make(chan os.Signal, 1)\n\tsignal.Notify(c, syscall.SIGINT, syscall.SIGTERM)\n\n\tfmt.Println(\"Waiting for signal...\")\n\ts := <-c\n\n\tfmt.Println(\"Received signal:\", s)\n}"
    },
    {
        "function": "func main() {\n\tnum := 4.5\n\n\tfmt.Println(\"Floor:\", math.Floor(num))\n\tfmt.Println(\"Ceil:\", math.Ceil(num))\n\tfmt.Println(\"Round:\", math.Round(num))\n\tfmt.Println(\"Sqrt:\", math.Sqrt(num))\n}"
    },
    {
        "function": "func main() {\n\tpath, err := os.Executable()\n\tif err != nil {\n\t\tfmt.Println(\"Error getting executable path:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Executable path:\", path)\n}"
    },
    {
        "function": "func main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\ttmpl, err := template.ParseFiles(\"index.html\")\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error parsing template:\", err)\n\t\t\treturn\n\t\t}\n\n\t\tdata := struct{\n\t\t\tTitle string\n\t\t\tBody  string\n\t\t}{\n\t\t\tTitle: \"Hello\",\n\t\t\tBody:  \"Welcome to the home page\",\n\t\t}\n\n\t\ttmpl.Execute(w, data)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
    },
    {
        "function": "func main() {\n\tusers := []User{\n\t\t{ID: 1, Name: \"John Doe\"},\n\t\t{ID: 2, Name: \"Jane Smith\"},\n\t}\n\n\tjson.NewEncoder(w).Encode(users)\n}"
    },
    {
        "function": "func main() {\n\tvar num float64 = 4.5\n\n\tfmt.Println(\"Floor:\", math.Floor(num))\n\tfmt.Println(\"Ceil:\", math.Ceil(num))\n\tfmt.Println(\"Round:\", math.Round(num))\n\tfmt.Println(\"Sqrt:\", math.Sqrt(num))\n}"
    },
    {
        "function": "func main() {\n\tch := make(chan string)\n\n\tgo func() {\n\t\ttime.Sleep(2 * time.Second)\n\t\tch <- \"Hello from goroutine\"\n\t}()\n\n\tfmt.Println(<-ch)\n}"
    },
    {
        "function": "func main() {\n\tr := gin.Default()\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\tr.GET(\"/users\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"List of users\")\n\t})\n\n\tr.GET(\"/users/:id\", func(c *gin.Context) {\n\t\tid := c.Param(\"id\")\n\t\tc.String(http.StatusOK, \"Get user with ID: %s\", id)\n\t})\n\n\tr.Run(\":8080\")\n}"
    },
    {
        "function": "func main() {\n\tperson := Person{Name: \"John Doe\", Age: 30}\n\n\tdata, err := json.Marshal(person)\n\tif err != nil {\n\t\tfmt.Println(\"Error marshaling JSON:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(data))\n}"
    },
    {
        "function": "func main() {\n\trand.Seed(time.Now().UnixNano())\n\n\tvar nums []int\n\n\tfor i := 0; i < 5; i++ {\n\t\tnum := rand.Intn(100)\n\t\tnums = append(nums, num)\n\t}\n\n\tfmt.Println(nums)\n}"
    },
    {
        "function": "func main() {\n\tfiles, err := ioutil.ReadDir(\".\")\n\tif err != nil {\n\t\tfmt.Println(\"Error reading directory:\", err)\n\t\treturn\n\t}\n\n\tfor _, file := range files {\n\t\tfmt.Println(file.Name())\n\t}\n}"
    },
    {
        "function": "func main() {\n\tquit := make(chan os.Signal)\n\tsignal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)\n\n\tgo func() {\n\t\t<-quit\n\t\tfmt.Println(\"Received termination signal\")\n\t\tos.Exit(0)\n\t}()\n\n\tfmt.Println(\"Waiting for termination signal\")\n\tselect {}\n}"
    },
    {
        "function": "func main() {\n\tcmd := exec.Command(\"ls\", \"-l\")\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\terr := cmd.Run()\n\tif err != nil {\n\t\tfmt.Println(\"Error running command:\", err)\n\t\treturn\n\t}\n}"
    },
    {
        "function": "func main() {\n\tstart := time.Now()\n\n\ttime.Sleep(2 * time.Second)\n\n\tduration := time.Since(start)\n\tfmt.Println(duration)\n}"
    },
    {
        "function": "func main() {\n\tdb, err := sql.Open(\"mysql\", \"user:password@tcp(localhost:3306)/mydb\")\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to MySQL:\", err)\n\t\treturn\n\t}\n\tdefer db.Close()\n\n\t_, err = db.Exec(\"CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255))\")\n\tif err != nil {\n\t\tfmt.Println(\"Error creating table:\", err)\n\t\treturn\n\t}\n\n\t_, err = db.Exec(\"INSERT INTO users (name) VALUES ('John Doe')\")\n\tif err != nil {\n\t\tfmt.Println(\"Error inserting into table:\", err)\n\t\treturn\n\t}\n\n\trows, err := db.Query(\"SELECT id, name FROM users\")\n\tif err != nil {\n\t\tfmt.Println(\"Error querying table:\", err)\n\t\treturn\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar id int\n\t\tvar name string\n\t\terr = rows.Scan(&id, &name)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error scanning row:\", err)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Println(id, name)\n\t}\n}"
    },
    {
        "function": "func main() {\n\tclient := redis.NewClient(options)\n\n\tpingResult, err := client.Ping(context.Background()).Result()\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to Redis:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Connected to Redis. Ping result:\", pingResult)\n}"
    },
    {
        "function": "func main() {\n\tr := gin.Default()\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello, World!\")\n\t})\n\n\tr.Run()\n}"
    },
    {
        "function": "func main() {\n\tr := chi.NewRouter()\n\n\tr.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Welcome to the home page\")\n\t})\n\n\tr.Get(\"/users\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"List of users\")\n\t})\n\n\tr.Get(\"/users/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tid := chi.URLParam(r, \"id\")\n\t\tfmt.Fprintf(w, \"Get user with ID: %s\", id)\n\t})\n\n\thttp.ListenAndServe(\":8080\", r)\n}"
    },
    {
        "function": "func main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Hello, World!\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
    },
    {
        "function": "func main() {\n\tresp, err := http.Get(\"https://api.example.com/data\")\n\tif err != nil {\n\t\tfmt.Println(\"Error making HTTP request:\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading response body:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(body))\n}"
    },
    {
        "function": "func main() {\n\tconfig := Configuration{}\n\n\tfile, err := os.Open(\"config.json\")\n\tif err != nil {\n\t\tfmt.Println(\"Error opening config file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tdecoder := json.NewDecoder(file)\n\terr = decoder.Decode(&config)\n\tif err != nil {\n\t\tfmt.Println(\"Error decoding JSON:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Config:\", config)\n}"
    },
    {
        "function": "func main() {\n\tvar nums []int\n\n\tfor i := 0; i < 5; i++ {\n\t\tnum := rand.Intn(100)\n\t\tnums = append(nums, num)\n\t}\n\n\tfmt.Println(nums)\n}"
    },
    {
        "function": "func main() {\n\tfileNames, err := ioutil.ReadDir(\".\")\n\tif err != nil {\n\t\tfmt.Println(\"Error reading directory:\", err)\n\t\treturn\n\t}\n\n\tfor _, file := range fileNames {\n\t\tfmt.Println(file.Name())\n\t}\n}"
    },
    {
        "function": "func main() {\n\tquit := make(chan os.Signal)\n\tsignal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)\n\n\tgo func() {\n\t\t<-quit\n\t\tfmt.Println(\"Received termination signal\")\n\t\tos.Exit(0)\n\t}()\n\n\tfmt.Println(\"Waiting for termination signal\")\n\tselect {}\n}"
    },
    {
        "function": "func main() {\n\tcmd := exec.Command(\"ls\", \"-l\")\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\terr := cmd.Run()\n\tif err != nil {\n\t\tfmt.Println(\"Error running command:\", err)\n\t\treturn\n\t}\n}"
    },
    {
        "function": "func main() {\n\tstart := time.Now()\n\n\ttime.Sleep(2 * time.Second)\n\n\tduration := time.Since(start)\n\tfmt.Println(duration)\n}"
    },
    {
        "function": "func main() {\n\tdb, err := sql.Open(\"mysql\", \"user:password@tcp(localhost:3306)/mydb\")\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to MySQL:\", err)\n\t\treturn\n\t}\n\tdefer db.Close()\n\n\t_, err = db.Exec(\"CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255))\")\n\tif err != nil {\n\t\tfmt.Println(\"Error creating table:\", err)\n\t\treturn\n\t}\n\n\t_, err = db.Exec(\"INSERT INTO users (name) VALUES ('John Doe')\")\n\tif err != nil {\n\t\tfmt.Println(\"Error inserting into table:\", err)\n\t\treturn\n\t}\n\n\trows, err := db.Query(\"SELECT id, name FROM users\")\n\tif err != nil {\n\t\tfmt.Println(\"Error querying table:\", err)\n\t\treturn\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar id int\n\t\tvar name string\n\t\terr = rows.Scan(&id, &name)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error scanning row:\", err)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Println(id, name)\n\t}\n}"
    },
    {
        "function": "func main() {\n\toptions := &redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tPassword: \"\",\n\t\tDB:       0,\n\t}\n\n\tclient := redis.NewClient(options)\n\n\tpingResult, err := client.Ping(context.Background()).Result()\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to Redis:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Connected to Redis. Ping result:\", pingResult)\n}"
    },
    {
        "function": "func main() {\n\tr := gin.Default()\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello, World!\")\n\t})\n\n\tr.Run()\n}"
    },
    {
        "function": "func main() {\n\tr := chi.NewRouter()\n\n\tr.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Welcome to the home page\")\n\t})\n\n\tr.Get(\"/users\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"List of users\")\n\t})\n\n\tr.Get(\"/users/{id}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tid := chi.URLParam(r, \"id\")\n\t\tfmt.Fprintf(w, \"Get user with ID: %s\", id)\n\t})\n\n\thttp.ListenAndServe(\":8080\", r)\n}"
    },
    {
        "function": "func main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Hello, World!\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
    },
    {
        "function": "func main() {\n\tresp, err := http.Get(\"https://api.example.com/data\")\n\tif err != nil {\n\t\tfmt.Println(\"Error making HTTP request:\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading response body:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(body))\n}"
    },
    {
        "function": "func main() {\n\tfile, err := os.Open(\"input.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error opening file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\treader := bufio.NewReader(file)\n\n\tfor {\n\t\tline, err := reader.ReadString('\\n')\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tfmt.Println(\"Error reading line:\", err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(line)\n\t}\n}"
    },
    {
        "function": "func main() {\n\ttmpl, err := template.ParseFiles(\"template.html\")\n\tif err != nil {\n\t\tfmt.Println(\"Error parsing template:\", err)\n\t\treturn\n\t}\n\n\tdata := struct{\n\t\tName string\n\t\tAge  int\n\t}{\n\t\tName: \"John Doe\",\n\t\tAge:  30,\n\t}\n\n\terr = tmpl.Execute(os.Stdout, data)\n\tif err != nil {\n\t\tfmt.Println(\"Error executing template:\", err)\n\t\treturn\n\t}\n}"
    },
    {
        "function": "func main() {\n\tto := []string{\"recipient@example.com\"}\n\tsubject := \"Hello\"\n\tbody := \"Hello, World!\"\n\n\tmsg := fmt.Sprintf(\"To: %s\\r\\nSubject: %s\\r\\n\\r\\n%s\", strings.Join(to, \", \"), subject, body)\n\n\terr := smtp.SendMail(\"smtp.example.com:587\", smtp.PlainAuth(\"\", \"sender@example.com\", \"password\", \"smtp.example.com\"), \"sender@example.com\", to, []byte(msg))\n\tif err != nil {\n\t\tfmt.Println(\"Error sending email:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Email sent\")\n}"
    },
    {
        "function": "func main() {\n\tdata := [][]string{{\"Name\", \"Age\"}, {\"John Doe\", \"30\"}, {\"Jane Smith\", \"25\"}}\n\n\tfile, err := os.Create(\"data.csv\")\n\tif err != nil {\n\t\tfmt.Println(\"Error creating file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\twriter := csv.NewWriter(file)\n\tdefer writer.Flush()\n\n\tfor _, record := range data {\n\t\twriter.Write(record)\n\t}\n\n\tfmt.Println(\"Data written to CSV file\")\n}"
    },
    {
        "function": "func main() {\n\tclient := &http.Client{}\n\n\treq, err := http.NewRequest(\"GET\", \"https://api.example.com/data\", nil)\n\tif err != nil {\n\t\tfmt.Println(\"Error creating request:\", err)\n\t\treturn\n\t}\n\n\treq.Header.Set(\"Authorization\", \"Bearer YOUR_API_TOKEN\")\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tfmt.Println(\"Error making request:\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading response body:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(string(body))\n}"
    },
    {
        "function": "func main() {\n\tstr := \"hello world\"\n\tcontains := strings.Contains(str, \"world\")\n\n\tfmt.Println(contains)\n}"
    },
    {
        "function": "func main() {\n\tnumStr := \"42\"\n\tnum, err := strconv.Atoi(numStr)\n\tif err != nil {\n\t\tfmt.Println(\"Error converting string to int:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(num)\n}"
    },
    {
        "function": "func main() {\n\tstr := \"hello world\"\n\twords := strings.Fields(str)\n\n\tfor _, word := range words {\n\t\tfmt.Println(word)\n\t}\n}"
    },
    {
        "function": "func main() {\n\tstr := \"Hello, World!\"\n\tupper := strings.ToUpper(str)\n\n\tfmt.Println(upper)\n}"
    },
    {
        "function": "func main() {\n\tvar num int\n\tnumStr := \"42\"\n\n\terr := strconv.UnmarshalText([]byte(numStr), &num)\n\tif err != nil {\n\t\tfmt.Println(\"Error unmarshaling text:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(num)\n}"
    },
    {
        "function": "func main() {\n\tstart := time.Now()\n\n\ttime.Sleep(2 * time.Second)\n\n\tduration := time.Since(start)\n\tfmt.Println(duration)\n}"
    },
    {
        "function": "func main() {\n\tticker := time.NewTicker(1 * time.Second)\n\tdefer ticker.Stop()\n\n\tfor range ticker.C {\n\t\tfmt.Println(\"Tick\")\n\t}\n}"
    },
    {
        "function": "func main() {\n\ttimer := time.NewTimer(2 * time.Second)\n\tdefer timer.Stop()\n\n\t<-timer.C\n\tfmt.Println(\"Timer expired\")\n}"
    },
    {
        "function": "func main() {\n\tvar wg sync.WaitGroup\n\n\twg.Add(2)\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\ttime.Sleep(2 * time.Second)\n\t\tfmt.Println(\"Goroutine 1 executed\")\n\t}()\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\ttime.Sleep(3 * time.Second)\n\t\tfmt.Println(\"Goroutine 2 executed\")\n\t}()\n\n\twg.Wait()\n}"
    },
  {
    "function": "type Employee struct {\n\tID int\n\tName string\n\tAge int\n\tPosition string\n}\n\nfunc (e *Employee) UpdateAge(newAge int) {\n\te.Age = newAge\n}\n\nfunc (e *Employee) UpdatePosition(newPosition string) {\n\te.Position = newPosition\n}"
  },
  {
    "function": "type Stack struct {\n\titems []int\n}\n\nfunc (s *Stack) Push(item int) {\n\ts.items = append(s.items, item)\n}\n\nfunc (s *Stack) Pop() int {\n\tlength := len(s.items)\n\tremoved := s.items[length-1]\n\ts.items = s.items[:length-1]\n\treturn removed\n}"
  },
  {
    "function": "func (s *Stack) Peek() (int, error) {\n\tif len(s.items) == 0 {\n\t\treturn 0, errors.New(\"Empty Stack\")\n\t}\n\treturn s.items[len(s.items)-1], nil\n}"
  },
  {
    "function": "type Queue struct {\n\titems []int\n}\n\nfunc (q *Queue) Enqueue(item int) {\n\tq.items = append(q.items, item)\n}\n\nfunc (q *Queue) Dequeue() int {\n\tremoved := q.items[0]\n\tq.items = q.items[1:]\n\treturn removed\n}"
  },
  {
    "function": "type Node struct {\n\tData int\n\tNext *Node\n}\n\ntype LinkedList struct {\n\tHead *Node\n}\n\nfunc (l *LinkedList) InsertFirst(data int) {\n\tl.Head = &Node{Data: data, Next: l.Head}\n}\n\nfunc (l *LinkedList) RemoveFirst() {\n\tif l.Head != nil {\n\t\tl.Head = l.Head.Next\n\t}\n}"
  },
  {
    "function": "func (l *LinkedList) Find(data int) *Node {\n\tcurrent := l.Head\n\tfor current != nil {\n\t\tif current.Data == data {\n\t\t\treturn current\n\t\t}\n\t\tcurrent = current.Next\n\t}\n\treturn nil\n}"
  },
  {
    "function": "type TreeNode struct {\n\tData  int\n\tLeft  *TreeNode\n\tRight *TreeNode\n}\n\ntype BinaryTree struct {\n\tRoot *TreeNode\n}\n\nfunc (t *BinaryTree) Insert(data int) {\n\tt.Root = insert(t.Root, data)\n}\n\nfunc insert(node *TreeNode, data int) *TreeNode {\n\tif node == nil {\n\t\treturn &TreeNode{Data: data}\n\t}\n\tif data < node.Data {\n\t\tnode.Left = insert(node.Left, data)\n\t} else {\n\t\tnode.Right = insert(node.Right, data)\n\t}\n\treturn node\n}"
  },
  {
    "function": "func (t *BinaryTree) InOrderTraversal(fn func(int)) {\n\tinOrderTraversal(t.Root, fn)\n}\n\nfunc inOrderTraversal(node *TreeNode, fn func(int)) {\n\tif node != nil {\n\t\tinOrderTraversal(node.Left, fn)\n\t\tfn(node.Data)\n\t\tinOrderTraversal(node.Right, fn)\n\t}\n}"
  },
  {
    "function": "func BinarySearch(arr []int, target int) int {\n\treturn binarySearch(arr, target, 0, len(arr)-1)\n}\n\nfunc binarySearch(arr []int, target int, low int, high int) int {\n\tif high >= low {\n\t\tmid := low + (high-low)/2\n\t\tif arr[mid] == target {\n\t\t\treturn mid\n\t\t}\n\t\tif arr[mid] > target {\n\t\t\treturn binarySearch(arr, target, low, mid-1)\n\t\t}\n\t\treturn binarySearch(arr, target, mid+1, high)\n\t}\n\treturn -1\n}"
  },
  {
    "function": "type HTTPHandler struct {\n\tClient *http.Client\n}\n\nfunc (h *HTTPHandler) Get(url string) (*http.Response, error) {\n\treq, err := http.NewRequest(http.MethodGet, url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tresp, err := h.Client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp, nil\n}"
  },
  {
    "function": "func (h *HTTPHandler) Post(url string, contentType string, body io.Reader) (*http.Response, error) {\n\treq, err := http.NewRequest(http.MethodPost, url, body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Add(\"Content-Type\", contentType)\n\tresp, err := h.Client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp, nil\n}"
  },
  {
    "function": "func MergeSort(arr []int) []int {\n\tif len(arr) <= 1 {\n\t\treturn arr\n\t}\n\tmid := len(arr) / 2\n\tleft := MergeSort(arr[:mid])\n\tright := MergeSort(arr[mid:])\n\treturn merge(left, right)\n}\n\nfunc merge(left, right []int) []int {\n\tmerged := make([]int, 0, len(left)+len(right))\n\ti, j := 0, 0\n\tfor i < len(left) && j < len(right) {\n\t\tif left[i] <= right[j] {\n\t\t\tmerged = append(merged, left[i])\n\t\t\ti++\n\t\t} else {\n\t\t\tmerged = append(merged, right[j])\n\t\t\tj++\n\t\t}\n\t}\n\tfor ; i < len(left); i++ {\n\t\tmerged = append(merged, left[i])\n\t}\n\tfor ; j < len(right); j++ {\n\t\tmerged = append(merged, right[j])\n\t}\n\treturn merged\n}"
  },
  {
    "function": "type Cache struct {\n\tcache map[string]string\n\tmu    sync.RWMutex\n}\n\nfunc (c *Cache) Get(key string) (string, bool) {\n\tc.mu.RLock()\n\tdefer c.mu.RUnlock()\n\tval, ok := c.cache[key]\n\treturn val, ok\n}\n\nfunc (c *Cache) Set(key string, value string) {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\tc.cache[key] = value\n}"
  },
  {
    "function": "type Task struct {\n\tID    int\n\tTitle string\n\tDone  bool\n}\n\ntype TaskList struct {\n\tTasks []*Task\n\tmu    sync.Mutex\n}\n\nfunc (tl *TaskList) AddTask(task *Task) {\n\ttl.mu.Lock()\n\tdefer tl.mu.Unlock()\n\ttl.Tasks = append(tl.Tasks, task)\n}\n\nfunc (tl *TaskList) MarkTaskAsDone(id int) {\n\ttl.mu.Lock()\n\tdefer tl.mu.Unlock()\n\tfor _, task := range tl.Tasks {\n\t\tif task.ID == id {\n\t\t\ttask.Done = true\n\t\t\treturn\n\t\t}\n\t}\n}"
  },
  {
    "function": "type Counter struct {\n\tcount int\n\tmu    sync.Mutex\n}\n\nfunc (c *Counter) Increment() {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\tc.count++\n}\n\nfunc (c *Counter) Value() int {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\treturn c.count\n}"
  },
  {
    "function": "func QuickSort(arr []int) []int {\n\tif len(arr) <= 1 {\n\t\treturn arr\n\t}\n\tpivot := arr[len(arr)/2]\n\tvar left, right, middle []int\n\tfor _, v := range arr {\n\t\tif v < pivot {\n\t\t\tleft = append(left, v)\n\t\t} else if v > pivot {\n\t\t\tright = append(right, v)\n\t\t} else {\n\t\t\tmiddle = append(middle, v)\n\t\t}\n\t}\n\treturn append(append(QuickSort(left), middle...), QuickSort(right)...) \n}"
  },
  {
    "function": "type FileHandler struct {\n\tfilePath string\n}\n\nfunc (f *FileHandler) ReadFile() ([]byte, error) {\n\tfile, err := os.Open(f.filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\tbytes, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn bytes, nil\n}\n\nfunc (f *FileHandler) WriteFile(data []byte) error {\n\tfile, err := os.Create(f.filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\t_, err = file.Write(data)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "function": "type Customer struct {\n\tID int\n\tName string\n\tBalance float64\n}\n\ntype Bank struct {\n\tCustomers []*Customer\n\tmu sync.Mutex\n}\n\nfunc (b *Bank) AddCustomer(c *Customer) {\n\tb.mu.Lock()\n\tdefer b.mu.Unlock()\n\tb.Customers = append(b.Customers, c)\n}\n\nfunc (b *Bank) UpdateBalance(id int, newBalance float64) {\n\tb.mu.Lock()\n\tdefer b.mu.Unlock()\n\tfor _, c := range b.Customers {\n\t\tif c.ID == id {\n\t\t\tc.Balance = newBalance\n\t\t\treturn\n\t\t}\n\t}\n}"
  },
  {
    "function": "func BubbleSort(arr []int) {\n\tfor i := 0; i < len(arr); i++ {\n\t\tfor j := 0; j < len(arr)-i-1; j++ {\n\t\t\tif arr[j] > arr[j+1] {\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "function": "type Logger struct {\n\tmu    sync.Mutex\n\tLevel int\n}\n\nfunc (l *Logger) Log(level int, msg string) {\n\tl.mu.Lock()\n\tdefer l.mu.Unlock()\n\tif level >= l.Level {\n\t\tfmt.Println(msg)\n\t}\n}"
  },
  {
    "function": "type Server struct {\n\tAddr     string\n\tHandlers map[string]http.HandlerFunc\n}\n\nfunc (s *Server) Handle(pattern string, handler http.HandlerFunc) {\n\ts.Handlers[pattern] = handler\n}\n\nfunc (s *Server) ListenAndServe() error {\n\tfor pattern, handler := range s.Handlers {\n\t\thttp.HandleFunc(pattern, handler)\n\t}\n\treturn http.ListenAndServe(s.Addr, nil)\n}"
  },
  {
    "function": "type Message struct {\n\tSender    string\n\tRecipient string\n\tContent   string\n}\n\ntype Messenger struct {\n\tMessages []*Message\n\tmu       sync.Mutex\n}\n\nfunc (m *Messenger) Send(msg *Message) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.Messages = append(m.Messages, msg)\n}"
  },
  {
    "function": "func ShellSort(arr []int) []int {\n\tgap := len(arr) / 2\n\tfor gap > 0 {\n\t\tfor i := gap; i < len(arr); i++ {\n\t\t\ttemp := arr[i]\n\t\t\tj := i\n\t\t\tfor ; j >= gap && arr[j-gap] > temp; j -= gap {\n\t\t\t\tarr[j] = arr[j-gap]\n\t\t\t}\n\t\t\tarr[j] = temp\n\t\t}\n\t\tgap /= 2\n\t}\n\treturn arr\n}"
  },
  {
    "function": "func GCD(a, b int) int {\n\tfor b != 0 {\n\t\ttemp := b\n\t\tb = a % b\n\t\ta = temp\n\t}\n\treturn a\n}\n\nfunc LCM(a, b int) int {\n\treturn a * b / GCD(a, b)\n}"
  },
  {
    "function": "type Publisher struct {\n\tSubscribers map[string][]func(string)\n\tmu sync.Mutex\n}\n\nfunc (p *Publisher) Subscribe(topic string, fn func(string)) {\n\tp.mu.Lock()\n\tdefer p.mu.Unlock()\n\tp.Subscribers[topic] = append(p.Subscribers[topic], fn)\n}\n\nfunc (p *Publisher) Publish(topic string, message string) {\n\tp.mu.Lock()\n\tdefer p.mu.Unlock()\n\tfor _, fn := range p.Subscribers[topic] {\n\t\tgo fn(message)\n\t}\n}"
  },
  {
    "function": "func IsPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tif n <= 3 {\n\t\treturn true\n\t}\n\tif n%2 == 0 || n%3 == 0 {\n\t\treturn false\n\t}\n\ti := 5\n\tfor i*i <= n {\n\t\tif n%i == 0 || n%(i+2) == 0 {\n\t\t\treturn false\n\t\t}\n\t\ti += 6\n\t}\n\treturn true\n}"
  },
  {
    "function": "func Permutations(arr []int) [][]int {\n\tif len(arr) == 1 {\n\t\treturn [][]int{arr}\n\t}\n\tvar result [][]int\n\tfor i := 0; i < len(arr); i++ {\n\t\trest := make([]int, len(arr))\n\t\tcopy(rest, arr)\n\t\trest = append(rest[:i], rest[i+1:]...)\n\t\tfor _, perm := range Permutations(rest) {\n\t\t\tresult = append(result, append([]int{arr[i]}, perm...))\n\t\t}\n\t}\n\treturn result\n}"
  },
  {
    "function": "type Stack struct {\n\tstack []interface{}\n\tmu    sync.Mutex\n}\n\nfunc (s *Stack) Push(value interface{}) {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\ts.stack = append(s.stack, value)\n}\n\nfunc (s *Stack) Pop() (interface{}, error) {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\tif len(s.stack) == 0 {\n\t\treturn nil, errors.New(\"stack is empty\")\n\t}\n\tvalue := s.stack[len(s.stack)-1]\n\ts.stack = s.stack[:len(s.stack)-1]\n\treturn value, nil\n}"
  },
  {
    "function": "type Queue struct {\n\tqueue []interface{}\n\tmu    sync.Mutex\n}\n\nfunc (q *Queue) Enqueue(value interface{}) {\n\tq.mu.Lock()\n\tdefer q.mu.Unlock()\n\tq.queue = append(q.queue, value)\n}\n\nfunc (q *Queue) Dequeue() (interface{}, error) {\n\tq.mu.Lock()\n\tdefer q.mu.Unlock()\n\tif len(q.queue) == 0 {\n\t\treturn nil, errors.New(\"queue is empty\")\n\t}\n\tvalue := q.queue[0]\n\tq.queue = q.queue[1:]\n\treturn value, nil\n}"
  },
  {
    "function": "func SelectionSort(arr []int) {\n\tfor i := 0; i < len(arr); i++ {\n\t\tminIndex := i\n\t\tfor j := i + 1; j < len(arr); j++ {\n\t\t\tif arr[j] < arr[minIndex] {\n\t\t\t\tminIndex = j\n\t\t\t}\n\t\t}\n\t\tarr[i], arr[minIndex] = arr[minIndex], arr[i]\n\t}\n}"
  },
  {
    "function": "func Fibonacci(n int) int {\n\tif n <= 1 {\n\t\treturn n\n\t}\n\tvar n1, n2, fib int = 0, 1, 0\n\tfor i := 2; i <= n; i++ {\n\t\tfib = n1 + n2\n\t\tn1 = n2\n\t\tn2 = fib\n\t}\n\treturn fib\n}"
  },
  {
    "function": "func Factorial(n int) int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n * Factorial(n-1)\n}"
  },
  {
    "function": "func ReverseString(s string) string {\n\trunes := []rune(s)\n\tfor i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n\t\trunes[i], runes[j] = runes[j], runes[i]\n\t}\n\treturn string(runes)\n}"
  },
  {
    "function": "type BinarySearchTree struct {\n\tRoot *Node\n}\n\ntype Node struct {\n\tValue int\n\tLeft  *Node\n\tRight *Node\n}\n\nfunc (t *BinarySearchTree) Insert(value int) {\n\tt.Root = insertNode(t.Root, value)\n}\n\nfunc insertNode(node *Node, value int) *Node {\n\tif node == nil {\n\t\treturn &Node{Value: value}\n\t}\n\tif value < node.Value {\n\t\tnode.Left = insertNode(node.Left, value)\n\t} else if value > node.Value {\n\t\tnode.Right = insertNode(node.Right, value)\n\t}\n\treturn node\n}"
  },
  {
    "function": "type HTTPClient interface {\n\tDo(req *http.Request) (*http.Response, error)\n}\n\nfunc NewRequest(client HTTPClient, method, url string, body io.Reader) (*http.Response, error) {\n\treq, err := http.NewRequest(method, url, body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp, nil\n}"
  },
  {
    "function": "func BinarySearch(arr []int, target int) int {\n\tleft, right := 0, len(arr)-1\n\tfor left <= right {\n\t\tmid := (left + right) / 2\n\t\tif arr[mid] == target {\n\t\t\treturn mid\n\t\t}\n\t\tif arr[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else {\n\t\t\tright = mid - 1\n\t\t}\n\t}\n\treturn -1\n}"
  },
  {
    "function": "type Producer struct {\n\tbuffer chan int\n}\n\nfunc NewProducer(size int) *Producer {\n\treturn &Producer{buffer: make(chan int, size)}\n}\n\nfunc (p *Producer) Produce(value int) {\n\tp.buffer <- value\n}\n\nfunc (p *Producer) Consume() int {\n\treturn <-p.buffer\n}"
  },
  {
    "function": "type StringSet struct {\n\tset map[string]struct{}\n\tmu  sync.Mutex\n}\n\nfunc (s *StringSet) Add(value string) {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\ts.set[value] = struct{}{}\n}\n\nfunc (s *StringSet) Contains(value string) bool {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\t_, exists := s.set[value]\n\treturn exists\n}"
  },
  {
    "function": "type Config struct {\n\tDatabaseURL string\n\tPort        int\n}\n\nfunc LoadConfigFromFile(path string) (*Config, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tconfig := &Config{}\n\terr = json.NewDecoder(file).Decode(config)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn config, nil\n}"
  },
  {
    "function": "func QuickSort(arr []int, low, high int) {\n\tif low < high {\n\t\tpivot := partition(arr, low, high)\n\t\tQuickSort(arr, low, pivot-1)\n\t\tQuickSort(arr, pivot+1, high)\n\t}\n}\n\nfunc partition(arr []int, low, high int) int {\n\tpivot := arr[high]\n\ti := low - 1\n\tfor j := low; j <= high-1; j++ {\n\t\tif arr[j] < pivot {\n\t\t\ti++\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\t}\n\t}\n\tarr[i+1], arr[high] = arr[high], arr[i+1]\n\treturn i + 1\n}"
  },
  {
    "function": "type Cacher interface {\n\tGet(key string) (interface{}, error)\n\tSet(key string, value interface{}) error\n}\n\nfunc CacheMiddleware(cacher Cacher, next http.HandlerFunc) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tkey := r.URL.Path\n\t\tif value, err := cacher.Get(key); err == nil && value != nil {\n\t\t\tfmt.Fprint(w, value)\n\t\t\treturn\n\t\t}\n\n\t\trecorder := httptest.NewRecorder()\n\t\tnext(recorder, r)\n\n\t\tres := recorder.Result()\n\t\tbody, _ := ioutil.ReadAll(res.Body)\n\t\tcacher.Set(key, string(body))\n\n\t\tw.WriteHeader(res.StatusCode)\n\t\tw.Write(body)\n\t}\n}"
  },
  {
    "function": "type WorkerPool struct {\n\tjobs chan Job\n\twg   sync.WaitGroup\n}\n\ntype Job func()\n\nfunc NewWorkerPool(concurrency int) *WorkerPool {\n\twp := &WorkerPool{\n\t\tjobs: make(chan Job),\n\t}\n\n\twp.wg.Add(concurrency)\n\tfor i := 0; i < concurrency; i++ {\n\t\tgo wp.worker()\n\t}\n\n\treturn wp\n}\n\nfunc (wp *WorkerPool) worker() {\n\tdefer wp.wg.Done()\n\tfor job := range wp.jobs {\n\t\tjob()\n\t}\n}"
  },
  {
    "function": "func MergeSort(arr []int) []int {\n\tif len(arr) <= 1 {\n\t\treturn arr\n\t}\n\tmid := len(arr) / 2\n\tleft := MergeSort(arr[:mid])\n\tright := MergeSort(arr[mid:])\n\treturn Merge(left, right)\n}\n\nfunc Merge(left, right []int) []int {\n\tresult := make([]int, 0, len(left)+len(right))\n\tfor len(left) > 0 || len(right) > 0 {\n\t\tif len(left) == 0 {\n\t\t\treturn append(result, right...)\n\t\t}\n\t\tif len(right) == 0 {\n\t\t\treturn append(result, left...)\n\t\t}\n\t\tif left[0] <= right[0] {\n\t\t\tresult = append(result, left[0])\n\t\t\tleft = left[1:]\n\t\t} else {\n\t\t\tresult = append(result, right[0])\n\t\t\tright = right[1:]\n\t\t}\n\t}\n\treturn result\n}"
  },
  {
    "function": "type Job interface {\n\tProcess() error\n}\n\ntype Worker struct {\n\tJobQueue chan Job\n}\n\nfunc NewWorker() *Worker {\n\treturn &Worker{JobQueue: make(chan Job)}\n}\n\nfunc (w *Worker) Start() {\n\tgo func() {\n\t\tfor job := range w.JobQueue {\n\t\t\tif err := job.Process(); err != nil {\n\t\t\t\tlog.Printf(\"Error processing job: %v\", err)\n\t\t\t}\n\t\t}\n\t}()\n}"
  },
  {
    "function": "type Counter struct {\n\tcount int\n\tmu    sync.Mutex\n}\n\nfunc (c *Counter) Increment() {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\tc.count++\n}\n\nfunc (c *Counter) Value() int {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\treturn c.count\n}"
  },
  {
    "function": "func BubbleSort(arr []int) {\n\tfor i := 0; i < len(arr); i++ {\n\t\tfor j := 0; j < len(arr)-1-i; j++ {\n\t\t\tif arr[j] > arr[j+1] {\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "function": "type Node struct {\n\tValue int\n\tNext  *Node\n}\n\ntype LinkedList struct {\n\tHead *Node\n}\n\nfunc (l *LinkedList) Insert(value int) {\n\tif l.Head == nil {\n\t\tl.Head = &Node{Value: value}\n\t\treturn\n\t}\n\tcurrent := l.Head\n\tfor current.Next != nil {\n\t\tcurrent = current.Next\n\t}\n\tcurrent.Next = &Node{Value: value}\n}"
  },
  {
    "function": "type API struct {\n\tclient *http.Client\n\tbaseURL string\n}\n\nfunc (api *API) GetEndpoint(endpoint string) (*http.Response, error) {\n\treq, err := http.NewRequest(http.MethodGet, api.baseURL+endpoint, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn api.client.Do(req)\n}"
  },
  {
    "function": "type Semaphore struct {\n\tchannel chan struct{}\n}\n\nfunc NewSemaphore(n int) *Semaphore {\n\treturn &Semaphore{\n\t\tchannel: make(chan struct{}, n),\n\t}\n}\n\nfunc (s *Semaphore) Acquire() {\n\ts.channel <- struct{}{}\n}\n\nfunc (s *Semaphore) Release() {\n\t<-s.channel\n}"
  },
    {
      "function": "func OpenFile(filename string) (*os.File, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to open file: %v\", err)\n\t}\n\treturn file, nil\n}\n\nfunc ReadFile(file *os.File) ([]byte, error) {\n\tbytes, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read file: %v\", err)\n\t}\n\treturn bytes, nil\n}\n\nfunc CloseFile(file *os.File) error {\n\tif err := file.Close(); err != nil {\n\t\treturn fmt.Errorf(\"failed to close file: %v\", err)\n\t}\n\treturn nil\n}"
    },
    {
      "function": "func HandleRequest(w http.ResponseWriter, r *http.Request) {\n\tswitch r.Method {\n\tcase http.MethodGet:\n\t\tHandleGet(w, r)\n\tcase http.MethodPost:\n\t\tHandlePost(w, r)\n\tdefault:\n\t\tw.WriteHeader(http.StatusMethodNotAllowed)\n\t}\n}\n\nfunc HandleGet(w http.ResponseWriter, r *http.Request) {\n\t// Handle GET request\n}\n\nfunc HandlePost(w http.ResponseWriter, r *http.Request) {\n\t// Handle POST request\n}"
    },
    {
      "function": "type MongoDB struct {\n\tclient *mongo.Client\n}\n\nfunc ConnectToMongoDB(uri string) (*MongoDB, error) {\n\tclient, err := mongo.NewClient(options.Client().ApplyURI(uri))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &MongoDB{client: client}, nil\n}\n\nfunc (db *MongoDB) GetCollection(database, collection string) *mongo.Collection {\n\treturn db.client.Database(database).Collection(collection)\n}"
    },
    {
      "function": "func DownloadFileFromS3(svc *s3.S3, bucket, key string) (*s3.GetObjectOutput, error) {\n\tinput := &s3.GetObjectInput{\n\t\tBucket: aws.String(bucket),\n\t\tKey:    aws.String(key),\n\t}\n\tresult, err := svc.GetObject(input)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn result, nil\n}\n\nfunc UploadFileToS3(svc *s3.S3, bucket, key string, file *os.File) error {\n\t_, err := svc.PutObject(&s3.PutObjectInput{\n\t\tBucket: aws.String(bucket),\n\t\tKey:    aws.String(key),\n\t\tBody:   file,\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
    },
    {
      "function": "type API struct {\n\tclient *http.Client\n}\n\nfunc (api *API) SendRequest(method, url string, body io.Reader) (*http.Response, error) {\n\treq, err := http.NewRequest(method, url, body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tresp, err := api.client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp, nil\n}\n\nfunc (api *API) ParseResponse(resp *http.Response) ([]byte, error) {\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tresp.Body.Close()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn body, nil\n}"
    },
    {
      "function": "func WriteToFile(filename string, data []byte) error {\n\tf, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer f.Close()\n\t_, err = f.Write(data)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc AppendToFile(filename string, data []byte) error {\n\tf, err := os.OpenFile(filename, os.O_APPEND|os.O_WRONLY, 0644)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer f.Close()\n\t_, err = f.Write(data)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
    },
    {
      "function": "type Database struct {\n\tDB *sql.DB\n}\n\nfunc ConnectToDB(driverName, dataSourceName string) (*Database, error) {\n\tDB, err := sql.Open(driverName, dataSourceName)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &Database{DB: DB}, nil\n}\n\nfunc (db *Database) Query(query string, args ...interface{}) (*sql.Rows, error) {\n\trows, err := db.DB.Query(query, args...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn rows, nil\n}"
    },
    {
      "function": "func ReadFileLineByLine(filename string) error {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tfmt.Println(scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
    },
    {
      "function": "type Cache struct {\n\tmutex  sync.Mutex\n\tvalues map[string]interface{}\n}\n\nfunc NewCache() *Cache {\n\treturn &Cache{\n\t\tvalues: make(map[string]interface{}),\n\t}\n}\n\nfunc (c *Cache) Get(key string) (interface{}, bool) {\n\tc.mutex.Lock()\n\tdefer c.mutex.Unlock()\n\tvalue, ok := c.values[key]\n\treturn value, ok\n}\n\nfunc (c *Cache) Set(key string, value interface{}) {\n\tc.mutex.Lock()\n\tc.values[key] = value\n\tc.mutex.Unlock()\n}"
    },
    {
      "function": "func ExtractHeaders(r *http.Request) map[string]string {\n\theaders := make(map[string]string)\n\tfor name, values := range r.Header {\n\t\tfor _, value := range values {\n\t\t\theaders[name] = value\n\t\t}\n\t}\n\treturn headers\n}\n\nfunc AddHeaders(w http.ResponseWriter, headers map[string]string) {\n\tfor name, value := range headers {\n\t\tw.Header().Set(name, value)\n\t}\n}"
    },
    {
      "function": "func HandleNotFound(w http.ResponseWriter, r *http.Request) {\n\tw.WriteHeader(http.StatusNotFound)\n\tfmt.Fprintln(w, \"Not Found\")\n}\n\nfunc HandleBadRequest(w http.ResponseWriter, r *http.Request) {\n\tw.WriteHeader(http.StatusBadRequest)\n\tfmt.Fprintln(w, \"Bad Request\")\n}\n\nfunc HandleInternalServerError(w http.ResponseWriter, r *http.Request) {\n\tw.WriteHeader(http.StatusInternalServerError)\n\tfmt.Fprintln(w, \"Internal Server Error\")\n}"
    },
    {
      "function": "func DeleteFile(filename string) error {\n\treturn os.Remove(filename)\n}\n\nfunc RenameFile(oldName, newName string) error {\n\treturn os.Rename(oldName, newName)\n}\n\nfunc MoveFile(src, dst string) error {\n\treturn os.Rename(src, dst)\n}"
    },
    {
      "function": "type API struct {\n\tclient *http.Client\n}\n\nfunc (api *API) GetJSON(url string) (map[string]interface{}, error) {\n\tresp, err := api.client.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar result map[string]interface{}\n\tjson.NewDecoder(resp.Body).Decode(&result)\n\treturn result, nil\n}"
    },
    {
      "function": "func ParseJSON(r io.Reader) (map[string]interface{}, error) {\n\tvar result map[string]interface{}\n\terr := json.NewDecoder(r).Decode(&result)\n\treturn result, err\n}\n\nfunc WriteJSON(w io.Writer, data map[string]interface{}) error {\n\treturn json.NewEncoder(w).Encode(data)\n}"
    },
    {
      "function": "func CreateDirectory(path string) error {\n\treturn os.Mkdir(path, 0755)\n}\n\nfunc RemoveDirectory(path string) error {\n\treturn os.RemoveAll(path)\n}\n\nfunc ListDirectory(path string) ([]string, error) {\n\tfiles, err := ioutil.ReadDir(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar fileNames []string\n\tfor _, file := range files {\n\t\tfileNames = append(fileNames, file.Name())\n\t}\n\treturn fileNames, nil\n}"
    },
    {
      "function": "func ReadConfigFile(filename string) (*viper.Viper, error) {\n\tv := viper.New()\n\tv.SetConfigFile(filename)\n\terr := v.ReadInConfig()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn v, nil\n}\n\nfunc GetConfigValue(v *viper.Viper, key string) interface{} {\n\treturn v.Get(key)\n}\n\nfunc SetConfigValue(v *viper.Viper, key string, value interface{}) {\n\tv.Set(key, value)\n}"
    },
    {
      "function": "type Router struct {\n\troutes map[string]http.HandlerFunc\n}\n\nfunc NewRouter() *Router {\n\treturn &Router{routes: make(map[string]http.HandlerFunc)}\n}\n\nfunc (r *Router) AddRoute(path string, handler http.HandlerFunc) {\n\tr.routes[path] = handler\n}\n\nfunc (r *Router) HandleRequests() {\n\tfor path, handler := range r.routes {\n\t\thttp.HandleFunc(path, handler)\n\t}\n}"
    },
    {
      "function": "func CreateFile(filename string) (*os.File, error) {\n\treturn os.Create(filename)\n}\n\nfunc WriteStringToFile(f *os.File, s string) (int, error) {\n\treturn f.WriteString(s)\n}\n\nfunc CloseFile(f *os.File) error {\n\treturn f.Close()\n}"
    },
    {
      "function": "func DecodeJSONBody(w http.ResponseWriter, r *http.Request, dst interface{}) error {\n\tdecoder := json.NewDecoder(r.Body)\n\terr := decoder.Decode(dst)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc EncodeJSONBody(w http.ResponseWriter, body interface{}) error {\n\tencoder := json.NewEncoder(w)\n\terr := encoder.Encode(body)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
    },
    {
      "function": "func ProcessUploadedFile(r *http.Request, fieldName string) (string, error) {\n\tfile, handler, err := r.FormFile(fieldName)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\tfilename := handler.Filename\n\treturn filename, nil\n}"
    },
    {
      "function": "func SendResponse(w http.ResponseWriter, statusCode int, message string) {\n\tw.WriteHeader(statusCode)\n\tw.Write([]byte(message))\n}\n\nfunc SendJSONResponse(w http.ResponseWriter, statusCode int, data interface{}) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.WriteHeader(statusCode)\n\tjson.NewEncoder(w).Encode(data)\n}"
    },
    {
      "function": "func ParseForm(r *http.Request) error {\n\treturn r.ParseForm()\n}\n\nfunc GetFormValue(r *http.Request, fieldName string) string {\n\treturn r.FormValue(fieldName)\n}"
    },
    {
      "function": "func WriteToResponseWriter(w http.ResponseWriter, data []byte) (int, error) {\n\treturn w.Write(data)\n}\n\nfunc ReadFromRequestBody(r *http.Request) ([]byte, error) {\n\treturn ioutil.ReadAll(r.Body)\n}"
    },
    {
      "function": "func CreateBucket(svc *s3.S3, bucketName string) error {\n\t_, err := svc.CreateBucket(&s3.CreateBucketInput{\n\t\tBucket: aws.String(bucketName),\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc ListBuckets(svc *s3.S3) ([]*s3.Bucket, error) {\n\tresult, err := svc.ListBuckets(nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn result.Buckets, nil\n}"
    },
    {
      "function": "func CreateClient() *http.Client {\n\treturn &http.Client{}\n}\n\nfunc GetRequest(client *http.Client, url string) (*http.Response, error) {\n\treturn client.Get(url)\n}\n\nfunc PostRequest(client *http.Client, url string, contentType string, body io.Reader) (*http.Response, error) {\n\treturn client.Post(url, contentType, body)\n}"
    },
    {
      "function": "func SetCookie(w http.ResponseWriter, name, value string, maxAge int) {\n\thttp.SetCookie(w, &http.Cookie{\n\t\tName:   name,\n\t\tValue:  value,\n\t\tMaxAge: maxAge,\n\t})\n}\n\nfunc GetCookie(r *http.Request, name string) (*http.Cookie, error) {\n\treturn r.Cookie(name)\n}"
    },
    {
      "function": "func Redirect(w http.ResponseWriter, r *http.Request, url string, code int) {\n\thttp.Redirect(w, r, url, code)\n}\n\nfunc NotFound(w http.ResponseWriter, r *http.Request) {\n\thttp.NotFound(w, r)\n}\n\nfunc Error(w http.ResponseWriter, error string, code int) {\n\thttp.Error(w, error, code)\n}"
    },
    {
      "function": "func ListFilesInBucket(svc *s3.S3, bucketName string) ([]string, error) {\n\tinput := &s3.ListObjectsV2Input{\n\t\tBucket:  aws.String(bucketName),\n\t}\n\n\tresult, err := svc.ListObjectsV2(input)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar filenames []string\n\tfor _, item := range result.Contents {\n\t\tfilenames = append(filenames, *item.Key)\n\t}\n\n\treturn filenames, nil\n}\n\nfunc DeleteFileFromBucket(svc *s3.S3, bucketName, itemName string) error {\n\tinput := &s3.DeleteObjectInput{\n\t\tBucket: aws.String(bucketName),\n\t\tKey:    aws.String(itemName),\n\t}\n\n\t_, err := svc.DeleteObject(input)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}"
    },
    {
      "function": "func ExecuteSQLQuery(db *sql.DB, query string, args ...interface{}) (*sql.Rows, error) {\n\treturn db.Query(query, args...)\n}\n\nfunc ExecuteSQLStatement(db *sql.DB, stmt string, args ...interface{}) (sql.Result, error) {\n\treturn db.Exec(stmt, args...)\n}\n\nfunc CloseDB(db *sql.DB) error {\n\treturn db.Close()\n}"
    },
    {
      "function": "type API struct {\n\tclient *http.Client\n}\n\nfunc NewAPI() *API {\n\treturn &API{client: &http.Client{}}\n}\n\nfunc (api *API) Call(url, method string, body io.Reader) (*http.Response, error) {\n\treq, err := http.NewRequest(method, url, body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tresp, err := api.client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp, nil\n}"
    },
    {
      "function": "func GetEnvironmentVariable(key string) string {\n\treturn os.Getenv(key)\n}\n\nfunc SetEnvironmentVariable(key, value string) error {\n\treturn os.Setenv(key, value)\n}\n\nfunc UnsetEnvironmentVariable(key string) error {\n\treturn os.Unsetenv(key)\n}"
    },
    {
      "function": "func ParseURL(u string) (*url.URL, error) {\n\treturn url.Parse(u)\n}\n\nfunc GetURLPath(u *url.URL) string {\n\treturn u.Path\n}\n\nfunc GetURLQuery(u *url.URL) url.Values {\n\treturn u.Query()\n}"
    },
    {
      "function": "type Server struct {\n\tserver *http.Server\n}\n\nfunc NewServer(addr string, handler http.Handler) *Server {\n\treturn &Server{\n\t\tserver: &http.Server{\n\t\t\tAddr:    addr,\n\t\t\tHandler: handler,\n\t\t},\n\t}\n}\n\nfunc (s *Server) Start() error {\n\treturn s.server.ListenAndServe()\n}\n\nfunc (s *Server) Stop(ctx context.Context) error {\n\treturn s.server.Shutdown(ctx)\n}"
    },
    {
      "function": "func GetRequestBody(r *http.Request) ([]byte, error) {\n\tbody, err := ioutil.ReadAll(r.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn body, nil\n}\n\nfunc SetResponseBody(w http.ResponseWriter, body []byte) (int, error) {\n\treturn w.Write(body)\n}\n\nfunc RespondWithJSON(w http.ResponseWriter, statusCode int, data interface{}) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.WriteHeader(statusCode)\n\tjson.NewEncoder(w).Encode(data)\n}"
    },
    {
      "function": "type Queue struct {\n\titems []interface{}\n}\n\nfunc (q *Queue) Enqueue(item interface{}) {\n\tq.items = append(q.items, item)\n}\n\nfunc (q *Queue) Dequeue() interface{} {\n\titem := q.items[0]\n\tq.items = q.items[1:]\n\treturn item\n}\n\nfunc (q *Queue) IsEmpty() bool {\n\treturn len(q.items) == 0\n}"
    },
    {
      "function": "func DownloadFile(URL, fileName string) error {\n\tresponse, err := http.Get(URL)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer response.Body.Close()\n\n\tout, err := os.Create(fileName)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer out.Close()\n\n\t_, err = io.Copy(out, response.Body)\n\treturn err\n}\n\nfunc FileExists(filePath string) bool {\n\t_, err := os.Stat(filePath)\n\treturn !os.IsNotExist(err)\n}"
    },
    {
      "function": "type MyHandler struct{}\n\nfunc (h *MyHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World\")\n}\n\nfunc StartServer(addr string) {\n\tmyHandler := &MyHandler{}\n\thttp.ListenAndServe(addr, myHandler)\n}\n\nfunc RedirectRequest(w http.ResponseWriter, r *http.Request, newURL string) {\n\thttp.Redirect(w, r, newURL, http.StatusSeeOther)\n}"
    },
  {
    "function": "type Stack struct {\n\titems []interface{}\n}\n\nfunc (s *Stack) Push(item interface{}) {\n\ts.items = append(s.items, item)\n}\n\nfunc (s *Stack) Pop() interface{} {\n\tlastIndex := len(s.items) - 1\n\titem := s.items[lastIndex]\n\ts.items = s.items[:lastIndex]\n\treturn item\n}"
  },
  {
    "function": "func ConnectToDatabase(connectionString string) (*sql.DB, error) {\n\treturn sql.Open(\"postgres\", connectionString)\n}\n\nfunc ExecuteQuery(db *sql.DB, query string) (*sql.Rows, error) {\n\treturn db.Query(query)\n}\n\nfunc CloseDatabaseConnection(db *sql.DB) error {\n\treturn db.Close()\n}"
  },
  {
    "function": "func CreateGzipFile(inputFile, outputFile string) error {\n\treader, err := os.Open(inputFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer reader.Close()\n\n\twriter, err := os.Create(outputFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer writer.Close()\n\n\tgzipWriter := gzip.NewWriter(writer)\n\tdefer gzipWriter.Close()\n\n\t_, err = io.Copy(gzipWriter, reader)\n\treturn err\n}"
  },
  {
    "function": "func ExtractTarGz(gzPath, dest string) error {\n\tgzFile, err := os.Open(gzPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer gzFile.Close()\n\n\tgzReader, err := gzip.NewReader(gzFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer gzReader.Close()\n\n\ttarReader := tar.NewReader(gzReader)\n\n\tfor {\n\t\theader, err := tarReader.Next()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif header.Typeflag == tar.TypeDir {\n\t\t\tcontinue\n\t\t}\n\t\toutFilePath := filepath.Join(dest, header.Name)\n\t\toutFile, err := os.OpenFile(outFilePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, header.Mode)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif _, err := io.Copy(outFile, tarReader); err != nil {\n\t\t\treturn err\n\t\t}\n\t\toutFile.Close()\n\t}\n\n\treturn nil\n}"
  },
  {
    "function": "func CreateZipFile(outputFile string, inputFiles []string) error {\n\tzipFile, err := os.Create(outputFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer zipFile.Close()\n\n\tzipWriter := zip.NewWriter(zipFile)\n\tdefer zipWriter.Close()\n\n\tfor _, file := range inputFiles {\n\t\tf, err := os.Open(file)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer f.Close()\n\n\t\tinfo, err := f.Stat()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\theader, err := zip.FileInfoHeader(info)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\theader.Method = zip.Deflate\n\n\t\twriter, err := zipWriter.CreateHeader(header)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t_, err = io.Copy(writer, f)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}"
  },
  {
    "function": "func MakeRequest(method, url string, body io.Reader) (*http.Response, error) {\n\treq, err := http.NewRequest(method, url, body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp, nil\n}\n\nfunc ReadResponse(resp *http.Response) ([]byte, error) {\n\treturn ioutil.ReadAll(resp.Body)\n}"
  },
  {
    "function": "func DeleteFile(path string) error {\n\treturn os.Remove(path)\n}\n\nfunc CheckFileExists(path string) bool {\n\t_, err := os.Stat(path)\n\tif os.IsNotExist(err) {\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc RenameFile(oldPath, newPath string) error {\n\treturn os.Rename(oldPath, newPath)\n}"
  },
  {
    "function": "func CreateDirectory(path string) error {\n\treturn os.MkdirAll(path, 0755)\n}\n\nfunc ListFiles(directory string) ([]os.FileInfo, error) {\n\treturn ioutil.ReadDir(directory)\n}\n\nfunc DeleteDirectory(path string) error {\n\treturn os.RemoveAll(path)\n}"
  },
  {
    "function": "func CreateTempFile(dir, pattern string) (*os.File, error) {\n\treturn ioutil.TempFile(dir, pattern)\n}\n\nfunc CreateTempDir(dir, pattern string) (string, error) {\n\treturn ioutil.TempDir(dir, pattern)\n}\n\nfunc RemoveTempFile(file *os.File) error {\n\treturn os.Remove(file.Name())\n}"
  },
  {
    "function": "func GetCurrentTime() time.Time {\n\treturn time.Now()\n}\n\nfunc FormatTime(t time.Time, layout string) string {\n\treturn t.Format(layout)\n}\n\nfunc ParseTime(layout, value string) (time.Time, error) {\n\treturn time.Parse(layout, value)\n}"
  },
  {
    "function": "func ReadEnvironmentVariable(key string) string {\n\treturn os.Getenv(key)\n}\n\nfunc SetEnvironmentVariable(key, value string) error {\n\treturn os.Setenv(key, value)\n}\n\nfunc UnsetEnvironmentVariable(key string) error {\n\treturn os.Unsetenv(key)\n}"
  },
  {
    "function": "func GetFileSize(path string) (int64, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tfi, err := file.Stat()\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn fi.Size(), nil\n}\n\nfunc WriteBytesToFile(path string, data []byte) error {\n\treturn ioutil.WriteFile(path, data, 0644)\n}\n\nfunc AppendBytesToFile(path string, data []byte) error {\n\tfile, err := os.OpenFile(path, os.O_APPEND|os.O_WRONLY, 0644)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\t_, err = file.Write(data)\n\treturn err\n}"
  },
  {
    "function": "type Cache struct {\n\tcache map[string]string\n}\n\nfunc NewCache() *Cache {\n\treturn &Cache{cache: make(map[string]string)}\n}\n\nfunc (c *Cache) Get(key string) (string, bool) {\n\tvalue, found := c.cache[key]\n\treturn value, found\n}\n\nfunc (c *Cache) Set(key, value string) {\n\tc.cache[key] = value\n}\n\nfunc (c *Cache) Delete(key string) {\n\tdelete(c.cache, key)\n}"
  },
  {
    "function": "func StartHTTPServer(addr string, handler http.Handler) *http.Server {\n\tsrv := &http.Server{\n\t\tAddr:    addr,\n\t\tHandler: handler,\n\t}\n\tgo func() {\n\t\tif err := srv.ListenAndServe(); err != http.ErrServerClosed {\n\t\t\tlog.Fatalf(\"ListenAndServe(): %v\", err)\n\t\t}\n\t}()\n\treturn srv\n}\n\nfunc StopHTTPServer(srv *http.Server) {\n\tif err := srv.Shutdown(context.Background()); err != nil {\n\t\tlog.Printf(\"HTTP server Shutdown: %v\", err)\n\t}\n}"
  },
  {
    "function": "func GenerateRandomString(n int) string {\n\tconst letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\trand.Seed(time.Now().UnixNano())\n\tb := make([]byte, n)\n\tfor i := range b {\n\t\tb[i] = letters[rand.Int63()%int64(len(letters))]\n\t}\n\treturn string(b)\n}\n\nfunc GenerateRandomInt(min, max int) int {\n\trand.Seed(time.Now().UnixNano())\n\treturn rand.Intn(max-min+1) + min\n}"
  },
  {
    "function": "func CopyDirectory(srcDir, dstDir string) error {\n\tentries, err := ioutil.ReadDir(srcDir)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tfor _, entry := range entries {\n\t\tsrcPath := filepath.Join(srcDir, entry.Name())\n\t\tdstPath := filepath.Join(dstDir, entry.Name())\n\n\t\tif entry.IsDir() {\n\t\t\tif err := CopyDirectory(srcPath, dstPath); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t} else {\n\t\t\tif err := CopyFile(srcPath, dstPath); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc CopyFile(srcFile, dstFile string) error {\n\tinput, err := ioutil.ReadFile(srcFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif err := ioutil.WriteFile(dstFile, input, 0644); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}"
  },
  {
    "function": "func CreateNewFile(path string) (*os.File, error) {\n\treturn os.Create(path)\n}\n\nfunc WriteToFile(file *os.File, data []byte) error {\n\t_, err := file.Write(data)\n\treturn err\n}\n\nfunc CloseFile(file *os.File) error {\n\treturn file.Close()\n}"
  },
  {
    "function": "func EncodeToJSON(v interface{}) ([]byte, error) {\n\treturn json.Marshal(v)\n}\n\nfunc DecodeFromJSON(data []byte, v interface{}) error {\n\treturn json.Unmarshal(data, v)\n}\n\nfunc WriteJSONToFile(filename string, v interface{}) error {\n\tdata, err := EncodeToJSON(v)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn ioutil.WriteFile(filename, data, 0644)\n}"
  },
  {
    "function": "func OpenDatabaseConnection(connStr string) (*sql.DB, error) {\n\treturn sql.Open(\"postgres\", connStr)\n}\n\nfunc ExecuteSQLCommand(db *sql.DB, command string) (sql.Result, error) {\n\treturn db.Exec(command)\n}\n\nfunc CloseDatabaseConnection(db *sql.DB) error {\n\treturn db.Close()\n}"
  },
  {
    "function": "func HashPassword(password string) (string, error) {\n\tbytes, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)\n\treturn string(bytes), err\n}\n\nfunc CheckPasswordHash(password, hash string) bool {\n\terr := bcrypt.CompareHashAndPassword([]byte(hash), []byte(password))\n\treturn err == nil\n}"
  },
  {
    "function": "func RunCommand(name string, args ...string) ([]byte, error) {\n\tcmd := exec.Command(name, args...)\n\treturn cmd.Output()\n}\n\nfunc RunCommandWithInput(name string, input []byte, args ...string) ([]byte, error) {\n\tcmd := exec.Command(name, args...)\n\tcmd.Stdin = bytes.NewBuffer(input)\n\treturn cmd.Output()\n}"
  },
  {
    "function": "func CreateHTTPClient(timeout time.Duration) *http.Client {\n\treturn &http.Client{\n\t\tTimeout: timeout,\n\t}\n}\n\nfunc SendHTTPRequest(client *http.Client, req *http.Request) (*http.Response, error) {\n\treturn client.Do(req)\n}\n\nfunc CloseHTTPResponseBody(resp *http.Response) error {\n\treturn resp.Body.Close()\n}"
  },
    {
        "function": "// FileHandler provides file related operations.\n// It uses a predefined filePath as the file to manipulate.\ntype FileHandler struct {\n\tfilePath string\n}\n\n// NewFileHandler creates a new FileHandler.\nfunc NewFileHandler(filePath string) *FileHandler {\n\treturn &FileHandler{filePath}\n}\n\n// ReadFile reads and returns the content of the file.\nfunc (fh *FileHandler) ReadFile() ([]byte, error) {\n\treturn ioutil.ReadFile(fh.filePath)\n}"
    },
    {
        "function": "// Writer wraps the standard io.Writer and adds additional functionality.\ntype Writer struct {\n\tw io.Writer\n}\n\n// NewWriter creates a new Writer.\nfunc NewWriter(w io.Writer) *Writer {\n\treturn &Writer{w}\n}\n\n// WriteLine writes a line to the underlying writer.\nfunc (w *Writer) WriteLine(line string) (int, error) {\n\treturn w.w.Write([]byte(line + \"\\n\"))\n}"
    },
    {
        "function": "// RandomInt returns a random integer between min and max.\nfunc RandomInt(min, max int) int {\n\trand.Seed(time.Now().UnixNano())\n\treturn rand.Intn(max-min+1) + min\n}\n\n// RandomString returns a random string of length n.\nfunc RandomString(n int) string {\n\tconst letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\trand.Seed(time.Now().UnixNano())\n\tb := make([]byte, n)\n\tfor i := range b {\n\t\tb[i] = letters[rand.Int63()%int64(len(letters))]\n\t}\n\treturn string(b)\n}"
    },
    {
        "function": "// Timer represents a simple timer.\ntype Timer struct {\n\tstart time.Time\n}\n\n// NewTimer creates a new Timer and starts it.\nfunc NewTimer() *Timer {\n\treturn &Timer{start: time.Now()}\n}\n\n// Elapsed returns the duration since the timer was started.\nfunc (t *Timer) Elapsed() time.Duration {\n\treturn time.Since(t.start)\n}"
    },
    {
        "function": "// Fibonacci calculates the nth fibonacci number.\nfunc Fibonacci(n int) int {\n\tif n <= 1 {\n\t\treturn n\n\t}\n\treturn Fibonacci(n-1) + Fibonacci(n-2)\n}\n\n// Factorial calculates the factorial of n.\nfunc Factorial(n int) int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n * Factorial(n-1)\n}"
    },
    {
        "function": "// FileSize returns the size of a file.\nfunc FileSize(filePath string) (int64, error) {\n\tinfo, err := os.Stat(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn info.Size(), nil\n}\n\n// FileExists checks whether a file exists.\nfunc FileExists(filePath string) bool {\n\t_, err := os.Stat(filePath)\n\treturn !os.IsNotExist(err)\n}"
    },
    {
        "function": "// Sum adds all the integers in the slice and returns the sum.\nfunc Sum(nums []int) int {\n\tsum := 0\n\tfor _, num := range nums {\n\t\tsum += num\n\t}\n\treturn sum\n}\n\n// Max returns the largest integer in the slice.\nfunc Max(nums []int) int {\n\tmax := nums[0]\n\tfor _, num := range nums {\n\t\tif num > max {\n\t\t\tmax = num\n\t\t}\n\t}\n\treturn max\n}"
    },
    {
        "function": "// Average calculates the average of a slice of floats.\nfunc Average(nums []float64) float64 {\n\ttotal := 0.0\n\tfor _, num := range nums {\n\t\ttotal += num\n\t}\n\treturn total / float64(len(nums))\n}\n\n// Median calculates the median of a slice of floats.\nfunc Median(nums []float64) float64 {\n\tsort.Float64s(nums)\n\tmiddle := len(nums) / 2\n\tif len(nums)%2 == 0 {\n\t\treturn (nums[middle-1] + nums[middle]) / 2\n\t}\n\treturn nums[middle]\n}"
    },
    {
        "function": "// Reverse reverses a string.\nfunc Reverse(s string) string {\n\trunes := []rune(s)\n\tfor i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n\t\trunes[i], runes[j] = runes[j], runes[i]\n\t}\n\treturn string(runes)\n}\n\n// IsPalindrome checks whether a string is a palindrome.\nfunc IsPalindrome(s string) bool {\n\treturn s == Reverse(s)\n}"
    },
    {
        "function": "// AppendToFile appends data to a file.\nfunc AppendToFile(filePath string, data []byte) error {\n\tf, err := os.OpenFile(filePath, os.O_APPEND|os.O_WRONLY, 0644)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer f.Close()\n\t_, err = f.Write(data)\n\treturn err\n}\n\n// PrependToFile prepends data to a file.\nfunc PrependToFile(filePath string, data []byte) error {\n\toriginal, err := ioutil.ReadFile(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn ioutil.WriteFile(filePath, append(data, original...), 0644)\n}"
    },
    {
        "function": "// CopyFile copies a file from src to dst.\nfunc CopyFile(src, dst string) error {\n\tinput, err := ioutil.ReadFile(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn ioutil.WriteFile(dst, input, 0644)\n}\n\n// MoveFile moves a file from src to dst.\nfunc MoveFile(src, dst string) error {\n\treturn os.Rename(src, dst)\n}"
    },
    {
        "function": "// EncodeJSON encodes an interface into a JSON string.\nfunc EncodeJSON(v interface{}) (string, error) {\n\tbytes, err := json.Marshal(v)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(bytes), nil\n}\n\n// DecodeJSON decodes a JSON string into an interface.\nfunc DecodeJSON(s string, v interface{}) error {\n\treturn json.Unmarshal([]byte(s), v)\n}"
    },
    {
        "function": "// RandomElement returns a random element from a slice.\nfunc RandomElement(slice []interface{}) interface{} {\n\trand.Seed(time.Now().UnixNano())\n\treturn slice[rand.Intn(len(slice))]\n}\n\n// Contains checks whether an element is in a slice.\nfunc Contains(slice []interface{}, element interface{}) bool {\n\tfor _, e := range slice {\n\t\tif e == element {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}"
    },
    {
        "function": "// FetchURL fetches the content of a URL.\nfunc FetchURL(url string) (string, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(body), nil\n}\n\n// DownloadFile downloads a file from a URL.\nfunc DownloadFile(url, filePath string) error {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tout, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer out.Close()\n\t_, err = io.Copy(out, resp.Body)\n\treturn err\n}"
    },
    {
        "function": "// HashPassword hashes a password using bcrypt.\nfunc HashPassword(password string) (string, error) {\n\tbytes, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(bytes), nil\n}\n\n// CheckPasswordHash checks a password against a hashed password.\nfunc CheckPasswordHash(password, hash string) bool {\n\terr := bcrypt.CompareHashAndPassword([]byte(hash), []byte(password))\n\treturn err == nil\n}"
    },
    {
        "function": "// EncodeToBase64 encodes data to a base64 string.\nfunc EncodeToBase64(data []byte) string {\n\treturn base64.StdEncoding.EncodeToString(data)\n}\n\n// DecodeFromBase64 decodes a base64 string to data.\nfunc DecodeFromBase64(s string) ([]byte, error) {\n\treturn base64.StdEncoding.DecodeString(s)\n}"
    },
    {
        "function": "// HTTPServer is a simple HTTP server.\ntype HTTPServer struct {\n\tsrv *http.Server\n}\n\n// NewHTTPServer creates a new HTTPServer.\nfunc NewHTTPServer(addr string, handler http.Handler) *HTTPServer {\n\tsrv := &http.Server{\n\t\tAddr:    addr,\n\t\tHandler: handler,\n\t}\n\treturn &HTTPServer{srv}\n}\n\n// Start starts the HTTPServer.\nfunc (h *HTTPServer) Start() error {\n\treturn h.srv.ListenAndServe()\n}\n\n// Stop stops the HTTPServer.\nfunc (h *HTTPServer) Stop(ctx context.Context) error {\n\treturn h.srv.Shutdown(ctx)\n}"
    },
    {
        "function": "// Counter represents a simple counter.\ntype Counter struct {\n\tvalue int64\n}\n\n// NewCounter creates a new Counter.\nfunc NewCounter() *Counter {\n\treturn &Counter{value: 0}\n}\n\n// Increment increments the Counter by one.\nfunc (c *Counter) Increment() {\n\tatomic.AddInt64(&c.value, 1)\n}\n\n// Value returns the current value of the Counter.\nfunc (c *Counter) Value() int64 {\n\treturn atomic.LoadInt64(&c.value)\n}"
    },
    {
        "function": "// EncodeToGob encodes an interface into a gob.\nfunc EncodeToGob(v interface{}) ([]byte, error) {\n\tbuf := new(bytes.Buffer)\n\tenc := gob.NewEncoder(buf)\n\tif err := enc.Encode(v); err != nil {\n\t\treturn nil, err\n\t}\n\treturn buf.Bytes(), nil\n}\n\n// DecodeFromGob decodes a gob into an interface.\nfunc DecodeFromGob(data []byte, v interface{}) error {\n\tbuf := bytes.NewBuffer(data)\n\tdec := gob.NewDecoder(buf)\n\treturn dec.Decode(v)\n}"
    },
    {
        "function": "// CurrentTime returns the current time in the specified format.\nfunc CurrentTime(format string) string {\n\treturn time.Now().Format(format)\n}\n\n// ParseTime parses a string into time.Time according to the specified format.\nfunc ParseTime(s, format string) (time.Time, error) {\n\treturn time.Parse(format, s)\n}"
    },
    {
        "function": "// Square calculates the square of a number.\nfunc Square(n int) int {\n\treturn n * n\n}\n\n// Cube calculates the cube of a number.\nfunc Cube(n int) int {\n\treturn n * n * n\n}"
    },
    {
        "function": "// Circle represents a circle.\ntype Circle struct {\n\tradius float64\n}\n\n// NewCircle creates a new Circle.\nfunc NewCircle(radius float64) *Circle {\n\treturn &Circle{radius}\n}\n\n// Area calculates the area of the Circle.\nfunc (c *Circle) Area() float64 {\n\treturn math.Pi * c.radius * c.radius\n}\n\n// Perimeter calculates the perimeter of the Circle.\nfunc (c *Circle) Perimeter() float64 {\n\treturn 2 * math.Pi * c.radius\n}"
    },
    {
        "function": "// Query executes a query on a database.\nfunc Query(db *sql.DB, query string) (*sql.Rows, error) {\n\treturn db.Query(query)\n}\n\n// Execute executes a command on a database.\nfunc Execute(db *sql.DB, command string) (sql.Result, error) {\n\treturn db.Exec(command)\n}"
    },
    {
        "function": "// File represents a file.\ntype File struct {\n\tname string\n\tsize int64\n}\n\n// NewFile creates a new File.\nfunc NewFile(name string, size int64) *File {\n\treturn &File{name, size}\n}\n\n// Rename renames the File.\nfunc (f *File) Rename(name string) {\n\tf.name = name\n}\n\n// Resize resizes the File.\nfunc (f *File) Resize(size int64) {\n\tf.size = size\n}"
    },
  {
    "function": "package main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n)\n\n// Database represents a connection to a database.\ntype Database struct {\n\tconn *sql.DB\n}\n\n// ConnectToDatabase connects to a database using the given connection string.\nfunc ConnectToDatabase(connectionString string) (*Database, error) {\n\tconn, err := sql.Open(\"postgres\", connectionString)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &Database{conn}, nil\n}\n\n// ExecuteQuery executes the given SQL query and returns the result.\nfunc (db *Database) ExecuteQuery(query string) (*sql.Rows, error) {\n\treturn db.conn.Query(query)\n}\n\n// CloseDatabaseConnection closes the connection to the database.\nfunc (db *Database) CloseDatabaseConnection() error {\n\treturn db.conn.Close()\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n)\n\n// User represents a user.\ntype User struct {\n\tName  string `json:\"name\"`\n\tEmail string `json:\"email\"`\n}\n\n// EncodeUser encodes a user into JSON.\nfunc EncodeUser(user *User) ([]byte, error) {\n\treturn json.Marshal(user)\n}\n\n// DecodeUser decodes JSON into a user.\nfunc DecodeUser(data []byte) (*User, error) {\n\tvar user User\n\terr := json.Unmarshal(data, &user)\n\treturn &user, err\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"html/template\"\n\t\"os\"\n)\n\n// RenderTemplate renders a template using the given data and writes it to a file.\nfunc RenderTemplate(templateFile string, data interface{}, outputFile string) error {\n\ttemplateData, err := ioutil.ReadFile(templateFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ttmpl, err := template.New(\"tmpl\").Parse(string(templateData))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tfile, err := os.Create(outputFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\treturn tmpl.Execute(file, data)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n// SplitCSV splits a CSV string into a slice of fields.\nfunc SplitCSV(csv string) []string {\n\treader := csv.NewReader(strings.NewReader(csv))\n\tfields, err := reader.Read()\n\tif err != nil {\n\t\treturn nil\n\t}\n\treturn fields\n}\n\n// JoinCSV joins a slice of fields into a CSV string.\nfunc JoinCSV(fields []string) string {\n\tvar buf strings.Builder\n\twriter := csv.NewWriter(&buf)\n\twriter.Write(fields)\n\twriter.Flush()\n\treturn buf.String()\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\n// RandomInt generates a random integer between min and max (inclusive).\nfunc RandomInt(min, max int) int {\n\trand.Seed(time.Now().UnixNano())\n\treturn rand.Intn(max-min+1) + min\n}\n\n// RandomFloat generates a random float between 0 and 1.\nfunc RandomFloat() float64 {\n\trand.Seed(time.Now().UnixNano())\n\treturn rand.Float64()\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n)\n\n// Database represents a connection to a database.\ntype Database struct {\n\tconn *sql.DB\n}\n\n// ConnectToDatabase connects to a database using the given connection string.\nfunc ConnectToDatabase(connectionString string) (*Database, error) {\n\tconn, err := sql.Open(\"postgres\", connectionString)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &Database{conn}, nil\n}\n\n// ExecuteQuery executes the given SQL query and returns the result.\nfunc (db *Database) ExecuteQuery(query string) (*sql.Rows, error) {\n\treturn db.conn.Query(query)\n}\n\n// CloseDatabaseConnection closes the connection to the database.\nfunc (db *Database) CloseDatabaseConnection() error {\n\treturn db.conn.Close()\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/rand\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"encoding/csv\"\n\t\"io\"\n\t\"os\"\n)\n\n// ReadCSVFile reads a CSV file and returns its content as a slice of records.\nfunc ReadCSVFile(filePath string) ([][]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\treader := csv.NewReader(file)\n\trecords, err := reader.ReadAll()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn records, nil\n}\n\n// WriteCSVFile writes a slice of records to a CSV file.\nfunc WriteCSVFile(filePath string, records [][]string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := csv.NewWriter(file)\n\terr = writer.WriteAll(records)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\twriter.Flush()\n\treturn writer.Error()\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\n// ReadFile reads and returns the content of a file.\nfunc ReadFile(filePath string) ([]byte, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn content, nil\n}\n\n// WriteFile writes the content to a file.\nfunc WriteFile(filePath string, content []byte) error {\n\treturn ioutil.WriteFile(filePath, content, 0644)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n)\n\n// Database represents a connection to a database.\ntype Database struct {\n\tconn *sql.DB\n}\n\n// ConnectToDatabase connects to a database using the given connection string.\nfunc ConnectToDatabase(connectionString string) (*Database, error) {\n\tconn, err := sql.Open(\"postgres\", connectionString)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &Database{conn}, nil\n}\n\n// ExecuteQuery executes the given SQL query and returns the result.\nfunc (db *Database) ExecuteQuery(query string) (*sql.Rows, error) {\n\treturn db.conn.Query(query)\n}\n\n// CloseDatabaseConnection closes the connection to the database.\nfunc (db *Database) CloseDatabaseConnection() error {\n\treturn db.conn.Close()\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"html/template\"\n\t\"os\"\n)\n\n// RenderTemplate renders a template using the given data and writes it to a file.\nfunc RenderTemplate(templateFile string, data interface{}, outputFile string) error {\n\ttemplateData, err := ioutil.ReadFile(templateFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ttmpl, err := template.New(\"tmpl\").Parse(string(templateData))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tfile, err := os.Create(outputFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\treturn tmpl.Execute(file, data)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\n// ReadFile reads and returns the content of a file.\nfunc ReadFile(filePath string) ([]byte, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn content, nil\n}\n\n// WriteFile writes the content to a file.\nfunc WriteFile(filePath string, content []byte) error {\n\treturn ioutil.WriteFile(filePath, content, 0644)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\n// ReadFile reads and returns the content of a file.\nfunc ReadFile(filePath string) ([]byte, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn content, nil\n}\n\n// WriteFile writes the content to a file.\nfunc WriteFile(filePath string, content []byte) error {\n\treturn ioutil.WriteFile(filePath, content, 0644)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\n// ReadFile reads and returns the content of a file.\nfunc ReadFile(filePath string) ([]byte, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn content, nil\n}\n\n// WriteFile writes the content to a file.\nfunc WriteFile(filePath string, content []byte) error {\n\treturn ioutil.WriteFile(filePath, content, 0644)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/rand\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\n// ReadFile reads and returns the content of a file.\nfunc ReadFile(filePath string) ([]byte, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn content, nil\n}\n\n// WriteFile writes the content to a file.\nfunc WriteFile(filePath string, content []byte) error {\n\treturn ioutil.WriteFile(filePath, content, 0644)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\n// ReadFile reads and returns the content of a file.\nfunc ReadFile(filePath string) ([]byte, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn content, nil\n}\n\n// WriteFile writes the content to a file.\nfunc WriteFile(filePath string, content []byte) error {\n\treturn ioutil.WriteFile(filePath, content, 0644)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\n// ReadFile reads and returns the content of a file.\nfunc ReadFile(filePath string) ([]byte, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn content, nil\n}\n\n// WriteFile writes the content to a file.\nfunc WriteFile(filePath string, content []byte) error {\n\treturn ioutil.WriteFile(filePath, content, 0644)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\n// ReadFile reads and returns the content of a file.\nfunc ReadFile(filePath string) ([]byte, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn content, nil\n}\n\n// WriteFile writes the content to a file.\nfunc WriteFile(filePath string, content []byte) error {\n\treturn ioutil.WriteFile(filePath, content, 0644)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\n// ReadFile reads and returns the content of a file.\nfunc ReadFile(filePath string) ([]byte, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn content, nil\n}\n\n// WriteFile writes the content to a file.\nfunc WriteFile(filePath string, content []byte) error {\n\treturn ioutil.WriteFile(filePath, content, 0644)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\n// ReadJSONFile reads and parses a JSON file into a struct.\nfunc ReadJSONFile(filePath string, v interface{}) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tdata, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn json.Unmarshal(data, v)\n}\n\n// WriteJSONFile writes a struct as JSON to a file.\nfunc WriteJSONFile(filePath string, v interface{}) error {\n\tdata, err := json.MarshalIndent(v, \"\", \"  \")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn ioutil.WriteFile(filePath, data, 0644)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\n// ReadFile reads and returns the content of a file.\nfunc ReadFile(filePath string) ([]byte, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn content, nil\n}\n\n// WriteFile writes the content to a file.\nfunc WriteFile(filePath string, content []byte) error {\n\treturn ioutil.WriteFile(filePath, content, 0644)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"encoding/csv\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// ReadCSVFile reads a CSV file and returns its content as a slice of records.\nfunc ReadCSVFile(filePath string) ([][]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\treader := csv.NewReader(file)\n\trecords, err := reader.ReadAll()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn records, nil\n}\n\n// WriteCSVFile writes a slice of records to a CSV file.\nfunc WriteCSVFile(filePath string, records [][]string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := csv.NewWriter(file)\n\terr = writer.WriteAll(records)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\twriter.Flush()\n\treturn writer.Error()\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"encoding/csv\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// ReadCSVFile reads a CSV file and returns its content as a slice of records.\nfunc ReadCSVFile(filePath string) ([][]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\treader := csv.NewReader(file)\n\trecords, err := reader.ReadAll()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn records, nil\n}\n\n// WriteCSVFile writes a slice of records to a CSV file.\nfunc WriteCSVFile(filePath string, records [][]string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := csv.NewWriter(file)\n\terr = writer.WriteAll(records)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\twriter.Flush()\n\treturn writer.Error()\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"encoding/csv\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// ReadCSVFile reads a CSV file and returns its content as a slice of records.\nfunc ReadCSVFile(filePath string) ([][]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\treader := csv.NewReader(file)\n\trecords, err := reader.ReadAll()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn records, nil\n}\n\n// WriteCSVFile writes a slice of records to a CSV file.\nfunc WriteCSVFile(filePath string, records [][]string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := csv.NewWriter(file)\n\terr = writer.WriteAll(records)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\twriter.Flush()\n\treturn writer.Error()\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"encoding/csv\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// ReadCSVFile reads a CSV file and returns its content as a slice of records.\nfunc ReadCSVFile(filePath string) ([][]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\treader := csv.NewReader(file)\n\trecords, err := reader.ReadAll()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn records, nil\n}\n\n// WriteCSVFile writes a slice of records to a CSV file.\nfunc WriteCSVFile(filePath string, records [][]string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := csv.NewWriter(file)\n\terr = writer.WriteAll(records)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\twriter.Flush()\n\treturn writer.Error()\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"encoding/csv\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// ReadCSVFile reads a CSV file and returns its content as a slice of records.\nfunc ReadCSVFile(filePath string) ([][]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\treader := csv.NewReader(file)\n\trecords, err := reader.ReadAll()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn records, nil\n}\n\n// WriteCSVFile writes a slice of records to a CSV file.\nfunc WriteCSVFile(filePath string, records [][]string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := csv.NewWriter(file)\n\terr = writer.WriteAll(records)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\twriter.Flush()\n\treturn writer.Error()\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"encoding/csv\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// ReadCSVFile reads a CSV file and returns its content as a slice of records.\nfunc ReadCSVFile(filePath string) ([][]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\treader := csv.NewReader(file)\n\trecords, err := reader.ReadAll()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn records, nil\n}\n\n// WriteCSVFile writes a slice of records to a CSV file.\nfunc WriteCSVFile(filePath string, records [][]string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := csv.NewWriter(file)\n\terr = writer.WriteAll(records)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\twriter.Flush()\n\treturn writer.Error()\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// CalculateFileHash calculates the SHA256 hash of a file.\nfunc CalculateFileHash(filePath string) (string, error) {\n\thash := sha256.New()\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\t_, err = io.Copy(hash, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn hex.EncodeToString(hash.Sum(nil)), nil\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Multiply multiplies two integers and returns the result.\nfunc Multiply(a, b int) int {\n\treturn a * b\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Greet greets a person with the given name.\nfunc Greet(name string) {\n\tfmt.Printf(\"Hello, %s!\", name)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// IsEven checks if a number is even and returns true if it is.\nfunc IsEven(num int) bool {\n\treturn num%2 == 0\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Sum calculates the sum of two integers and returns the result.\nfunc Sum(a, b int) int {\n\treturn a + b\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Square calculates the square of a number and returns the result.\nfunc Square(num int) int {\n\treturn num * num\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// ReverseString reverses a given string and returns the result.\nfunc ReverseString(str string) string {\n\tchars := []rune(str)\n\tfor i, j := 0, len(chars)-1; i < j; i, j = i+1, j-1 {\n\t\tchars[i], chars[j] = chars[j], chars[i]\n\t}\n\treturn string(chars)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Power raises a number to the specified exponent and returns the result.\nfunc Power(base, exponent float64) float64 {\n\treturn math.Pow(base, exponent)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n// CapitalizeString capitalizes the first letter of a given string.\nfunc CapitalizeString(str string) string {\n\treturn strings.Title(str)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Factorial calculates the factorial of a given non-negative integer.\nfunc Factorial(n int) int {\n\tif n <= 1 {\n\t\treturn 1\n\t}\n\treturn n * Factorial(n-1)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// IsPalindrome checks if a given string is a palindrome and returns true if it is.\nfunc IsPalindrome(str string) bool {\n\tfor i, j := 0, len(str)-1; i < j; i, j = i+1, j-1 {\n\t\tif str[i] != str[j] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\n// SortInts sorts a slice of integers in ascending order.\nfunc SortInts(nums []int) {\n\tsort.Ints(nums)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\n// CircleArea calculates the area of a circle given its radius.\nfunc CircleArea(radius float64) float64 {\n\treturn math.Pi * math.Pow(radius, 2)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintEvenNumbers prints even numbers up to a given limit.\nfunc PrintEvenNumbers(limit int) {\n\tfor i := 0; i <= limit; i += 2 {\n\t\tfmt.Println(i)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n// CountOccurrences counts the number of occurrences of a substring in a given string.\nfunc CountOccurrences(str, substr string) int {\n\treturn strings.Count(str, substr)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Fibonacci generates the Fibonacci sequence up to the specified limit.\nfunc Fibonacci(limit int) {\n\ta, b := 0, 1\n\tfmt.Println(a)\n\tfor b <= limit {\n\t\tfmt.Println(b)\n\t\ta, b = b, a+b\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintTable prints the multiplication table of a given number up to a specified limit.\nfunc PrintTable(num, limit int) {\n\tfor i := 1; i <= limit; i++ {\n\t\tresult := num * i\n\t\tfmt.Printf(\"%d x %d = %d\\n\", num, i, result)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\n// GenerateRandomNumber generates a random number within the specified range.\nfunc GenerateRandomNumber(min, max int) int {\n\trand.Seed(time.Now().UnixNano())\n\treturn rand.Intn(max-min+1) + min\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintOddNumbers prints odd numbers up to a given limit.\nfunc PrintOddNumbers(limit int) {\n\tfor i := 1; i <= limit; i += 2 {\n\t\tfmt.Println(i)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// ReverseSlice reverses the elements of a given slice in place.\nfunc ReverseSlice(nums []int) {\n\tfor i, j := 0, len(nums)-1; i < j; i, j = i+1, j-1 {\n\t\tnums[i], nums[j] = nums[j], nums[i]\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintFactors prints the factors of a given number.\nfunc PrintFactors(num int) {\n\tfmt.Print(\"Factors of \", num, \":\")\n\tfor i := 1; i <= num; i++ {\n\t\tif num%i == 0 {\n\t\t\tfmt.Print(\" \", i)\n\t\t}\n\t}\n\tfmt.Println()\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\n// SquareRoot calculates the square root of a given number.\nfunc SquareRoot(num float64) (float64, error) {\n\tif num < 0 {\n\t\treturn 0, fmt.Errorf(\"cannot calculate square root of a negative number\")\n\t}\n\treturn math.Sqrt(num), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\n// SortStrings sorts a slice of strings in lexicographical order.\nfunc SortStrings(strs []string) {\n\tsort.Strings(strs)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n// ConcatenateStrings concatenates multiple strings into a single string.\nfunc ConcatenateStrings(strs ...string) string {\n\treturn strings.Join(strs, \"\")\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintMultiples prints multiples of a given number up to a specified limit.\nfunc PrintMultiples(num, limit int) {\n\tfor i := 1; i <= limit; i++ {\n\t\tfmt.Println(num * i)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintPrimeNumbers prints prime numbers up to a given limit.\nfunc PrintPrimeNumbers(limit int) {\n\tfor num := 2; num <= limit; num++ {\n\t\tisPrime := true\n\t\tfor i := 2; i < num; i++ {\n\t\t\tif num%i == 0 {\n\t\t\t\tisPrime = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif isPrime {\n\t\t\tfmt.Println(num)\n\t\t}\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// FindMax finds the maximum element in a given slice of integers.\nfunc FindMax(nums []int) int {\n\tmax := nums[0]\n\tfor _, num := range nums {\n\t\tif num > max {\n\t\t\tmax = num\n\t\t}\n\t}\n\treturn max\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintEvenIndices prints the elements at even indices in a given slice.\nfunc PrintEvenIndices(nums []int) {\n\tfor i, num := range nums {\n\t\tif i%2 == 0 {\n\t\t\tfmt.Println(num)\n\t\t}\n\t}\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\n// GetCurrentTime returns the current time in the specified time zone.\nfunc GetCurrentTime(timezone string) (time.Time, error) {\n\tloc, err := time.LoadLocation(timezone)\n\tif err != nil {\n\t\treturn time.Time{}, err\n\t}\n\treturn time.Now().In(loc), nil\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintFibonacci prints the Fibonacci sequence up to a specified limit.\nfunc PrintFibonacci(limit int) {\n\ta, b := 0, 1\n\tfmt.Println(a)\n\tfor b <= limit {\n\t\tfmt.Println(b)\n\t\ta, b = b, a+b\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// FindMin finds the minimum element in a given slice of integers.\nfunc FindMin(nums []int) int {\n\tmin := nums[0]\n\tfor _, num := range nums {\n\t\tif num < min {\n\t\t\tmin = num\n\t\t}\n\t}\n\treturn min\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\n// FormatDate formats a given time in the specified layout.\nfunc FormatDate(t time.Time, layout string) string {\n\treturn t.Format(layout)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// CountVowels counts the number of vowels in a given string.\nfunc CountVowels(str string) int {\n\tcount := 0\n\tfor _, char := range str {\n\t\tswitch char {\n\t\tcase 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U':\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintSquares prints the squares of numbers up to a specified limit.\nfunc PrintSquares(limit int) {\n\tfor i := 1; i <= limit; i++ {\n\t\tfmt.Println(i * i)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintReverseString prints a given string in reverse order.\nfunc PrintReverseString(str string) {\n\tfor i := len(str) - 1; i >= 0; i-- {\n\t\tfmt.Printf(\"%c\", str[i])\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// CheckPrime checks if a given number is prime and returns true if it is.\nfunc CheckPrime(num int) bool {\n\tif num < 2 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= num; i++ {\n\t\tif num%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintPowers prints the powers of a given number up to a specified limit.\nfunc PrintPowers(base, limit int) {\n\tfor i := 0; i <= limit; i++ {\n\t\tresult := int(math.Pow(float64(base), float64(i)))\n\t\tfmt.Println(result)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// CountDigits counts the number of digits in a given integer.\nfunc CountDigits(num int) int {\n\tcount := 0\n\tfor num != 0 {\n\t\tnum /= 10\n\t\tcount++\n\t}\n\treturn count\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintCharFrequency prints the frequency of each character in a given string.\nfunc PrintCharFrequency(str string) {\n\tfreq := make(map[rune]int)\n\tfor _, char := range str {\n\t\tfreq[char]++\n\t}\n\tfor char, count := range freq {\n\t\tfmt.Printf(\"%c: %d\\n\", char, count)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// IsPalindrome checks if a given string is a palindrome and returns true if it is.\nfunc IsPalindrome(str string) bool {\n\tfor i, j := 0, len(str)-1; i < j; i, j = i+1, j-1 {\n\t\tif str[i] != str[j] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintTable prints the multiplication table of a given number up to a specified limit.\nfunc PrintTable(num, limit int) {\n\tfor i := 1; i <= limit; i++ {\n\t\tresult := num * i\n\t\tfmt.Printf(\"%d x %d = %d\\n\", num, i, result)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// ReverseString reverses a given string and returns the result.\nfunc ReverseString(str string) string {\n\tchars := []rune(str)\n\tfor i, j := 0, len(chars)-1; i < j; i, j = i+1, j-1 {\n\t\tchars[i], chars[j] = chars[j], chars[i]\n\t}\n\treturn string(chars)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\n// GenerateRandomNumber generates a random number within the specified range.\nfunc GenerateRandomNumber(min, max int) int {\n\trand.Seed(time.Now().UnixNano())\n\treturn rand.Intn(max-min+1) + min\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintOddNumbers prints odd numbers up to a given limit.\nfunc PrintOddNumbers(limit int) {\n\tfor i := 1; i <= limit; i += 2 {\n\t\tfmt.Println(i)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n// CapitalizeString capitalizes the first letter of a given string.\nfunc CapitalizeString(str string) string {\n\treturn strings.Title(str)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Factorial calculates the factorial of a given non-negative integer.\nfunc Factorial(n int) int {\n\tif n <= 1 {\n\t\treturn 1\n\t}\n\treturn n * Factorial(n-1)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\n// SortInts sorts a slice of integers in ascending order.\nfunc SortInts(nums []int) {\n\tsort.Ints(nums)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\n// FetchURL fetches the content of a URL using an HTTP GET request.\nfunc FetchURL(url string) (string, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn string(body), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\n// FetchURL fetches the content of a URL using an HTTP GET request.\nfunc FetchURL(url string) (string, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn string(body), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\n// FetchURL fetches the content of a URL using an HTTP GET request.\nfunc FetchURL(url string) (string, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn string(body), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\n// FetchURL fetches the content of a URL using an HTTP GET request.\nfunc FetchURL(url string) (string, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn string(body), nil\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\n// FetchURL fetches the content of a URL using an HTTP GET request.\nfunc FetchURL(url string) (string, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn string(body), nil\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Multiply multiplies two integers and returns the result.\nfunc Multiply(a, b int) int {\n\treturn a * b\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Greet greets a person with the given name.\nfunc Greet(name string) {\n\tfmt.Printf(\"Hello, %s!\", name)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// IsEven checks if a number is even and returns true if it is.\nfunc IsEven(num int) bool {\n\treturn num%2 == 0\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Sum calculates the sum of two integers and returns the result.\nfunc Sum(a, b int) int {\n\treturn a + b\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Square calculates the square of a number and returns the result.\nfunc Square(num int) int {\n\treturn num * num\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// ReverseString reverses a given string and returns the result.\nfunc ReverseString(str string) string {\n\tchars := []rune(str)\n\tfor i, j := 0, len(chars)-1; i < j; i, j = i+1, j-1 {\n\t\tchars[i], chars[j] = chars[j], chars[i]\n\t}\n\treturn string(chars)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Power raises a number to the specified exponent and returns the result.\nfunc Power(base, exponent float64) float64 {\n\treturn math.Pow(base, exponent)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n// CapitalizeString capitalizes the first letter of a given string.\nfunc CapitalizeString(str string) string {\n\treturn strings.Title(str)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Factorial calculates the factorial of a given non-negative integer.\nfunc Factorial(n int) int {\n\tif n <= 1 {\n\t\treturn 1\n\t}\n\treturn n * Factorial(n-1)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// IsPalindrome checks if a given string is a palindrome and returns true if it is.\nfunc IsPalindrome(str string) bool {\n\tfor i, j := 0, len(str)-1; i < j; i, j = i+1, j-1 {\n\t\tif str[i] != str[j] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\n// SortInts sorts a slice of integers in ascending order.\nfunc SortInts(nums []int) {\n\tsort.Ints(nums)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\n// GenerateRandomNumber generates a random number within the specified range.\nfunc GenerateRandomNumber(min, max int) int {\n\trand.Seed(time.Now().UnixNano())\n\treturn rand.Intn(max-min+1) + min\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintEvenNumbers prints even numbers up to a given limit.\nfunc PrintEvenNumbers(limit int) {\n\tfor i := 0; i <= limit; i += 2 {\n\t\tfmt.Println(i)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// CountOccurrences counts the number of occurrences of a substring in a given string.\nfunc CountOccurrences(str, substr string) int {\n\treturn strings.Count(str, substr)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Fibonacci generates the Fibonacci sequence up to the specified limit.\nfunc Fibonacci(limit int) {\n\ta, b := 0, 1\n\tfmt.Println(a)\n\tfor b <= limit {\n\t\tfmt.Println(b)\n\t\ta, b = b, a+b\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintTable prints the multiplication table of a given number up to a specified limit.\nfunc PrintTable(num, limit int) {\n\tfor i := 1; i <= limit; i++ {\n\t\tresult := num * i\n\t\tfmt.Printf(\"%d x %d = %d\\n\", num, i, result)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\n// GenerateRandomNumber generates a random number within the specified range.\nfunc GenerateRandomNumber(min, max int) int {\n\trand.Seed(time.Now().UnixNano())\n\treturn rand.Intn(max-min+1) + min\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintOddNumbers prints odd numbers up to a given limit.\nfunc PrintOddNumbers(limit int) {\n\tfor i := 1; i <= limit; i += 2 {\n\t\tfmt.Println(i)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n// CapitalizeString capitalizes the first letter of a given string.\nfunc CapitalizeString(str string) string {\n\treturn strings.Title(str)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Factorial calculates the factorial of a given non-negative integer.\nfunc Factorial(n int) int {\n\tif n <= 1 {\n\t\treturn 1\n\t}\n\treturn n * Factorial(n-1)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\n// SortInts sorts a slice of integers in ascending order.\nfunc SortInts(nums []int) {\n\tsort.Ints(nums)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\n// GenerateRandomNumber generates a random number within the specified range.\nfunc GenerateRandomNumber(min, max int) int {\n\trand.Seed(time.Now().UnixNano())\n\treturn rand.Intn(max-min+1) + min\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintEvenNumbers prints even numbers up to a given limit.\nfunc PrintEvenNumbers(limit int) {\n\tfor i := 0; i <= limit; i += 2 {\n\t\tfmt.Println(i)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// CountOccurrences counts the number of occurrences of a substring in a given string.\nfunc CountOccurrences(str, substr string) int {\n\treturn strings.Count(str, substr)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Fibonacci generates the Fibonacci sequence up to the specified limit.\nfunc Fibonacci(limit int) {\n\ta, b := 0, 1\n\tfmt.Println(a)\n\tfor b <= limit {\n\t\tfmt.Println(b)\n\t\ta, b = b, a+b\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintTable prints the multiplication table of a given number up to a specified limit.\nfunc PrintTable(num, limit int) {\n\tfor i := 1; i <= limit; i++ {\n\t\tresult := num * i\n\t\tfmt.Printf(\"%d x %d = %d\\n\", num, i, result)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\n// GenerateRandomNumber generates a random number within the specified range.\nfunc GenerateRandomNumber(min, max int) int {\n\trand.Seed(time.Now().UnixNano())\n\treturn rand.Intn(max-min+1) + min\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintOddNumbers prints odd numbers up to a given limit.\nfunc PrintOddNumbers(limit int) {\n\tfor i := 1; i <= limit; i += 2 {\n\t\tfmt.Println(i)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n// CapitalizeString capitalizes the first letter of a given string.\nfunc CapitalizeString(str string) string {\n\treturn strings.Title(str)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Factorial calculates the factorial of a given non-negative integer.\nfunc Factorial(n int) int {\n\tif n <= 1 {\n\t\treturn 1\n\t}\n\treturn n * Factorial(n-1)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\n// SortInts sorts a slice of integers in ascending order.\nfunc SortInts(nums []int) {\n\tsort.Ints(nums)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\n// GenerateRandomNumber generates a random number within the specified range.\nfunc GenerateRandomNumber(min, max int) int {\n\trand.Seed(time.Now().UnixNano())\n\treturn rand.Intn(max-min+1) + min\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintEvenNumbers prints even numbers up to a given limit.\nfunc PrintEvenNumbers(limit int) {\n\tfor i := 0; i <= limit; i += 2 {\n\t\tfmt.Println(i)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// CountOccurrences counts the number of occurrences of a substring in a given string.\nfunc CountOccurrences(str, substr string) int {\n\treturn strings.Count(str, substr)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Fibonacci generates the Fibonacci sequence up to the specified limit.\nfunc Fibonacci(limit int) {\n\ta, b := 0, 1\n\tfmt.Println(a)\n\tfor b <= limit {\n\t\tfmt.Println(b)\n\t\ta, b = b, a+b\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintTable prints the multiplication table of a given number up to a specified limit.\nfunc PrintTable(num, limit int) {\n\tfor i := 1; i <= limit; i++ {\n\t\tresult := num * i\n\t\tfmt.Printf(\"%d x %d = %d\\n\", num, i, result)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\n// GenerateRandomNumber generates a random number within the specified range.\nfunc GenerateRandomNumber(min, max int) int {\n\trand.Seed(time.Now().UnixNano())\n\treturn rand.Intn(max-min+1) + min\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintOddNumbers prints odd numbers up to a given limit.\nfunc PrintOddNumbers(limit int) {\n\tfor i := 1; i <= limit; i += 2 {\n\t\tfmt.Println(i)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n// CapitalizeString capitalizes the first letter of a given string.\nfunc CapitalizeString(str string) string {\n\treturn strings.Title(str)\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// Factorial calculates the factorial of a given non-negative integer.\nfunc Factorial(n int) int {\n\tif n <= 1 {\n\t\treturn 1\n\t}\n\treturn n * Factorial(n-1)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\n// SortInts sorts a slice of integers in ascending order.\nfunc SortInts(nums []int) {\n\tsort.Ints(nums)\n}"
  },
  {
    "function": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\n// GenerateRandomNumber generates a random number within the specified range.\nfunc GenerateRandomNumber(min, max int) int {\n\trand.Seed(time.Now().UnixNano())\n\treturn rand.Intn(max-min+1) + min\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// PrintEvenNumbers prints even numbers up to a given limit.\nfunc PrintEvenNumbers(limit int) {\n\tfor i := 0; i <= limit; i += 2 {\n\t\tfmt.Println(i)\n\t}\n}"
  },
  {
    "function": "package main\n\nimport \"fmt\"\n\n// CountOccurrences counts the number of occurrences of a substring in a given string.\nfunc CountOccurrences(str, substr string) int {\n\treturn strings.Count(str, substr)\n}"
  }
]
