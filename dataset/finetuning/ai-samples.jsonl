{"sample": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/go-redis/redis/v8\"\n)\n\nfunc main() {\n\trdb := redis.NewClient(&redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tPassword: \"\",\n\t\tDB:       0,\n\t})\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tpong, err := rdb.Ping(ctx).Result()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(pong)\n\n\terr = rdb.Set(ctx, \"key\", \"value\", 0).Err()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tval, err := rdb.Get(ctx, \"key\").Result()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"key\", val)\n\n\terr = rdb.Del(ctx, \"key\").Err()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"}
{"sample": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\n\tdefer cancel()\n\n\tch := make(chan string, 1)\n\n\tgo slowProcess(ctx, ch)\n\n\tselect {\n\tcase result := <-ch:\n\t\tfmt.Println(result)\n\tcase <-ctx.Done():\n\t\tfmt.Println(\"Process timed out\")\n\t}\n}\n\nfunc slowProcess(ctx context.Context, ch chan<- string) {\n\tselect {\n\tcase <-time.After(5 * time.Second):\n\t\tch <- \"Process completed\"\n\tcase <-ctx.Done():\n\t\treturn\n\t}\n}"}
{"sample": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\n\tdefer cancel()\n\n\tselect {\n\tcase <-time.After(5 * time.Second):\n\t\tfmt.Println(\"time.After: This should never be printed.\")\n\tcase <-ctx.Done():\n\t\tfmt.Println(\"Context done:\", ctx.Err())\n\t}\n} \n\n// Output:\n// Context done: context deadline exceeded"}
{"sample": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gorilla/mux\"\n)\n\nfunc main() {\n\tr := mux.NewRouter()\n\n\tr.HandleFunc(\"/\", homeHandler).Methods(\"GET\")\n\tr.HandleFunc(\"/about\", aboutHandler).Methods(\"GET\")\n\tr.HandleFunc(\"/contact\", contactHandler).Methods(\"GET\")\n\tr.HandleFunc(\"/user/{id:[0-9]+}\", userHandler).Methods(\"GET\")\n\n\tsrv := &http.Server{\n\t\tHandler:      r,\n\t\tAddr:         \"127.0.0.1:8080\",\n\t\tWriteTimeout: 15 * time.Second,\n\t\tReadTimeout:  15 * time.Second,\n\t}\n\n\tfmt.Println(\"Server listening on port 8080\")\n\tif err := srv.ListenAndServe(); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc homeHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintln(w, \"Welcome to my website!\")\n}\n\nfunc aboutHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintln(w, \"This is my personal website.\")\n}\n\nfunc contactHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintln(w, \"You can contact me at example@example.com.\")\n}\n\nfunc userHandler(w http.ResponseWriter, r *http.Request) {\n\tvars := mux.Vars(r)\n\tid := vars[\"id\"]\n\n\tfmt.Fprintf(w, \"User ID: %v\", id)\n}"}
{"sample": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\ntype User struct {\n\tUsername  string    `json:\"username\"`\n\tEmail     string    `json:\"email,omitempty\"`\n\tCreatedAt time.Time `json:\"created_at\"`\n}\n\nfunc getUserHandler(w http.ResponseWriter, r *http.Request) {\n\tuser := User{\n\t\tUsername:  \"johndoe\",\n\t\tCreatedAt: time.Now(),\n\t}\n\tjson.NewEncoder(w).Encode(user)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/user\", getUserHandler)\n\n\tif err := http.ListenAndServe(\":8080\", nil); err != nil {\n\t\tfmt.Println(err)\n\t}\n}"}
{"sample": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"time\"\n\n\tsqlite3 \"github.com/mattn/go-sqlite3\"\n\t\"gorm.io/driver/sqlite\"\n\t\"gorm.io/gorm\"\n)\n\ntype User struct {\n\tgorm.Model\n\tName       string\n\tEmail      string `gorm:\"unique;not null\"`\n\tAge        uint8\n\tBirthdate  time.Time\n\tCreditCard CreditCard `gorm:\"foreignKey:UserID\"`\n}\n\ntype CreditCard struct {\n\tgorm.Model\n\tUserID     uint\n\tNumber     string\n\tExpiration string\n}\n\nfunc main() {\n\tdb, err := gorm.Open(sqlite.Open(\"test.db\"), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\n\t// Make sure foreign key constraints are enabled\n\tsqlDB, err := db.DB()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer sqlDB.Close()\n\n\tif v, ok := sqlDB.Driver().(*sqlite3.SQLiteDriver); ok {\n\t\tv.Connector.EnableForeignKeys(true) // Enable foreign key constraints\n\t}\n\n\t// Automigrate the database\n\tif err := db.AutoMigrate(&User{}, &CreditCard{}); err != nil {\n\t\tlog.Fatalf(\"Failed to auto migrate: %v\", err)\n\t}\n\n\t// Create a user and their credit card\n\tuser := User{\n\t\tName:      \"John\",\n\t\tEmail:     \"john@gmail.com\",\n\t\tAge:       25,\n\t\tBirthdate: time.Date(1996, 5, 18, 0, 0, 0, 0, time.UTC),\n\t\tCreditCard: CreditCard{\n\t\t\tNumber:     \"1234567890123456\",\n\t\t\tExpiration: \"12/22\",\n\t\t},\n\t}\n\n\tif err := db.Create(&user).Error; err != nil {\n\t\tlog.Fatalf(\"Failed to create user: %v\", err)\n\t}\n\n\t// Find user by email\n\tvar foundUser User\n\tif err := db.Where(\"email = ?\", \"john@gmail.com\").First(&foundUser).Error; err != nil {\n\t\tlog.Fatalf(\"Failed to find user: %v\", err)\n\t}\n\tfmt.Printf(\"Found user: %+v\\n\", foundUser)\n}"}
